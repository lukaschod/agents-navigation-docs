{
  "api/ProjectDawn.LocalAvoidance.Circle.html": {
    "href": "api/ProjectDawn.LocalAvoidance.Circle.html",
    "title": "Struct Circle",
    "keywords": "Struct Circle Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public struct Circle Constructors | Improve this Doc View Source Circle(float2, float) Declaration public Circle(float2 point, float radius) Parameters Type Name Description float2 point float radius Fields | Improve this Doc View Source Point Declaration public float2 Point Field Value Type Description float2 | Improve this Doc View Source Radius Declaration public float Radius Field Value Type Description float Methods | Improve this Doc View Source Collide(Circle, Circle) Declaration public static bool Collide(Circle a, Circle b) Parameters Type Name Description Circle a Circle b Returns Type Description bool | Improve this Doc View Source TangentLineToCircleAngle(float, float) Declaration public static float TangentLineToCircleAngle(float circleRadius, float distanceFromCircle) Parameters Type Name Description float circleRadius float distanceFromCircle Returns Type Description float"
  },
  "api/ProjectDawn.LocalAvoidance.Intersection.html": {
    "href": "api/ProjectDawn.LocalAvoidance.Intersection.html",
    "title": "Class Intersection",
    "keywords": "Class Intersection Inheritance object Intersection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public class Intersection Methods | Improve this Doc View Source IntersectionOfCircleAndSegment(Circle, float2, float2, out float2, out float2) Declaration public static bool IntersectionOfCircleAndSegment(Circle circle, float2 segmentStart, float2 segmentEnd, out float2 intersectionStart, out float2 intersectionEnd) Parameters Type Name Description Circle circle float2 segmentStart float2 segmentEnd float2 intersectionStart float2 intersectionEnd Returns Type Description bool | Improve this Doc View Source IntersectionOfTwoMovingCircles(Circle, float2, Circle, float, float, out Line, out Line) Finds intersection angle range of two movings circles with given pointA velocity and pointB speed. Returns true if intersection exists and also two solutions. Time values can be negative or even infinity. Declaration public static bool IntersectionOfTwoMovingCircles(Circle circleA, float2 velocityA, Circle circleB, float speedB, float maxDistance, out Line angles, out Line times) Parameters Type Name Description Circle circleA float2 velocityA Circle circleB float speedB float maxDistance Line angles Line times Returns Type Description bool | Improve this Doc View Source IntersectionOfTwoMovingCircles(Circle, float2, Circle, float, float, out float, out float) Finds intersection times of two movings points with given pointA velocity and pointB speed, angle. Returns true if intersection exists and also two solutions. Time values can be negative or even infinity. Declaration public static bool IntersectionOfTwoMovingCircles(Circle circleA, float2 velocityA, Circle circleB, float angleB, float speedB, out float time0, out float time1) Parameters Type Name Description Circle circleA float2 velocityA Circle circleB float angleB float speedB float time0 float time1 Returns Type Description bool | Improve this Doc View Source IntersectionOfTwoMovingCircles(Circle, float2, Circle, float, out float, out float) Finds intersection times of two movings circles with given pointA velocity and pointB speed. Returns true if intersection exists and also two solutions. Time values can be negative or even infinity. Declaration public static bool IntersectionOfTwoMovingCircles(Circle circleA, float2 velocityA, Circle circleB, float speedB, out float time0, out float time1) Parameters Type Name Description Circle circleA float2 velocityA Circle circleB float speedB float time0 float time1 Returns Type Description bool | Improve this Doc View Source IntersectionOfTwoMovingCircles(Circle, float2, Circle, float2, out float, out float) Finds intersection times of two movings points with given pointA velocity and pointB velocity. Returns true if intersection exists and also two solutions. Time values can be negative or even infinity. Declaration public static bool IntersectionOfTwoMovingCircles(Circle circleA, float2 velocityA, Circle circleB, float2 velocityB, out float time0, out float time1) Parameters Type Name Description Circle circleA float2 velocityA Circle circleB float2 velocityB float time0 float time1 Returns Type Description bool | Improve this Doc View Source IntersectionOfTwoMovingPoints(float2, float2, float2, float, out float, out float) Finds intersection times of two movings points with given pointA velocity and pointB speed. Returns true if intersection exists and also two solutions. Time values can be negative or even infinity. Declaration public static bool IntersectionOfTwoMovingPoints(float2 pointA, float2 velocityA, float2 pointB, float speedB, out float time0, out float time1) Parameters Type Name Description float2 pointA float2 velocityA float2 pointB float speedB float time0 float time1 Returns Type Description bool"
  },
  "api/ProjectDawn.LocalAvoidance.Line.CutResult.html": {
    "href": "api/ProjectDawn.LocalAvoidance.Line.CutResult.html",
    "title": "Struct Line.CutResult",
    "keywords": "Struct Line.CutResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public struct Line.CutResult Fields | Improve this Doc View Source Segment0 Declaration public Line Segment0 Field Value Type Description Line | Improve this Doc View Source Segment1 Declaration public Line Segment1 Field Value Type Description Line | Improve this Doc View Source SegmentCount Declaration public int SegmentCount Field Value Type Description int"
  },
  "api/ProjectDawn.LocalAvoidance.Line.html": {
    "href": "api/ProjectDawn.LocalAvoidance.Line.html",
    "title": "Struct Line",
    "keywords": "Struct Line One dimension line segment. Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax [Serializable] public struct Line Constructors | Improve this Doc View Source Line(float, float) One dimension line segment. Declaration public Line(float from, float to) Parameters Type Name Description float from float to Fields | Improve this Doc View Source From Position where segment starts. Must be lower than To. Declaration public float From Field Value Type Description float | Improve this Doc View Source To Position where segment ends. Must be greated than From. Declaration public float To Field Value Type Description float Properties | Improve this Doc View Source Length Length of segment from start to end. Declaration public float Length { get; } Property Value Type Description float Methods | Improve this Doc View Source CutLine(Line, Line, out CutResult) One dimension line segment. Declaration public static bool CutLine(Line lhs, Line rhs, out Line.CutResult result) Parameters Type Name Description Line lhs Line rhs Line.CutResult result Returns Type Description bool | Improve this Doc View Source Equals(Line) One dimension line segment. Declaration public bool Equals(Line other) Parameters Type Name Description Line other Returns Type Description bool | Improve this Doc View Source Equals(object) One dimension line segment. Declaration public override bool Equals(object compare) Parameters Type Name Description object compare Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source GetHashCode() One dimension line segment. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(Line, Line) One dimension line segment. Declaration public static bool operator ==(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description bool | Improve this Doc View Source operator !=(Line, Line) One dimension line segment. Declaration public static bool operator !=(Line lhs, Line rhs) Parameters Type Name Description Line lhs Line rhs Returns Type Description bool"
  },
  "api/ProjectDawn.LocalAvoidance.SonarAvoidance.IDrawArc.html": {
    "href": "api/ProjectDawn.LocalAvoidance.SonarAvoidance.IDrawArc.html",
    "title": "Interface SonarAvoidance.IDrawArc",
    "keywords": "Interface SonarAvoidance.IDrawArc Interface used to implement draw arc method. Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public interface SonarAvoidance.IDrawArc Methods | Improve this Doc View Source DrawArc(float3, float3, float3, float3, float, Color) Interface used to implement draw arc method. Declaration void DrawArc(float3 center, float3 normal, float3 from, float3 to, float angle, Color color) Parameters Type Name Description float3 center float3 normal float3 from float3 to float angle Color color"
  },
  "api/ProjectDawn.LocalAvoidance.SonarAvoidance.IDrawCircle.html": {
    "href": "api/ProjectDawn.LocalAvoidance.SonarAvoidance.IDrawCircle.html",
    "title": "Interface SonarAvoidance.IDrawCircle",
    "keywords": "Interface SonarAvoidance.IDrawCircle Interface used to implement draw circle method. Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public interface SonarAvoidance.IDrawCircle Methods | Improve this Doc View Source DrawCircle(float3, float3, float, Color) Interface used to implement draw circle method. Declaration void DrawCircle(float3 center, float3 normal, float radius, Color color) Parameters Type Name Description float3 center float3 normal float radius Color color"
  },
  "api/ProjectDawn.LocalAvoidance.SonarAvoidance.html": {
    "href": "api/ProjectDawn.LocalAvoidance.SonarAvoidance.html",
    "title": "Struct SonarAvoidance",
    "keywords": "Struct SonarAvoidance This structure can be used for constructing local objet avoidance structure and finding the closest direction for it. It is composed of three main methods: Constructor, InsertObstacle and FindClosestDirection. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax [BurstCompile] public struct SonarAvoidance : IDisposable Constructors | Improve this Doc View Source SonarAvoidance(Allocator) Constructs sonar avoidance without properties. After this constructor you must call Set(float3, float3, float3, float3, float, float, float) at least once to setup correct properties. Declaration public SonarAvoidance(Allocator allocator) Parameters Type Name Description Allocator allocator Allocator type Properties | Improve this Doc View Source InnerRadius Inner radius of sonar. Declaration public float InnerRadius { get; } Property Value Type Description float | Improve this Doc View Source IsCreated True if structure is created. Declaration public bool IsCreated { get; } Property Value Type Description bool | Improve this Doc View Source OuterRadius Outer radius of sonar. Declaration public float OuterRadius { get; } Property Value Type Description float | Improve this Doc View Source Position Position of sonar. Declaration public float3 Position { get; } Property Value Type Description float3 | Improve this Doc View Source Rotation Rotation of sonar. Declaration public quaternion Rotation { get; } Property Value Type Description quaternion | Improve this Doc View Source Speed Speed of sonar. Declaration public float Speed { get; } Property Value Type Description float Methods | Improve this Doc View Source Clear() Remove all inserted obstacles. Declaration public void Clear() | Improve this Doc View Source CopyFrom(in SonarAvoidance) Constructs copy of sonar avoidance. No memory is shared between copy and original. Declaration public void CopyFrom(in SonarAvoidance other) Parameters Type Name Description SonarAvoidance other Copies from | Improve this Doc View Source DirectionToRotation(float3, float3) This is almost same as Quaternion.LookRotation just uses forward as x axis instead of z. Declaration public static quaternion DirectionToRotation(float3 forward, float3 up) Parameters Type Name Description float3 forward Forward direction on x axis float3 up Up direction Returns Type Description quaternion | Improve this Doc View Source Dispose() Dispose implementation. Declaration public void Dispose() | Improve this Doc View Source DrawObstacleCircle<T>(T, float3, float3, float, int) Draw sonar obstacle collision points. Use provided action to draw it. Declaration public void DrawObstacleCircle<T>(T action, float3 position, float3 velocity, float radius, int numIterations = 5) where T : unmanaged, SonarAvoidance.IDrawCircle Parameters Type Name Description T action Structure used for drawing float3 position Position of obstacle float3 velocity Velocity of obstacle float radius Radius of obstacle int numIterations Number of iterations of obstacle collisions Type Parameters Name Description T The type of draw structure | Improve this Doc View Source DrawSonar<T>(T) Draws sonar that is not obstructed by obstacle. Use provided action to draw it. Declaration public void DrawSonar<T>(T action) where T : unmanaged, SonarAvoidance.IDrawArc Parameters Type Name Description T action Structure used for drawing Type Parameters Name Description T The type of draw structure | Improve this Doc View Source FindClosestDirection(out float3) Finds closest desired direction that is not obstructed by obstacle. Declaration public bool FindClosestDirection(out float3 direction) Parameters Type Name Description float3 direction Closest direction found Returns Type Description bool True if direction was found | Improve this Doc View Source InsertObstacle(float3, float) Inserts radius obstacle into sonar. Declaration public bool InsertObstacle(float3 direction, float radius) Parameters Type Name Description float3 direction Direction of obstacle from sonar float radius Radius of obstacle Returns Type Description bool True if obstacle was added successfully | Improve this Doc View Source InsertObstacle(float3, float3, float) This structure can be used for constructing local objet avoidance structure and finding the closest direction for it. It is composed of three main methods: Constructor, InsertObstacle and FindClosestDirection. Declaration [Obsolete(\"This method is obsolete, please use InsertObstacleCircle\")] public bool InsertObstacle(float3 obstaclePosition, float3 obstacleVelocity, float obstacleRadius) Parameters Type Name Description float3 obstaclePosition float3 obstacleVelocity float obstacleRadius Returns Type Description bool | Improve this Doc View Source InsertObstacleCircle(float3, float) Inserts sphere obstacle into sonar. Declaration public bool InsertObstacleCircle(float3 obstaclePosition, float obstacleRadius) Parameters Type Name Description float3 obstaclePosition Position of obstacle float obstacleRadius Radius of obstacle Returns Type Description bool True if obstacle was added successfully | Improve this Doc View Source InsertObstacleCircle(float3, float3, float) Inserts sphere obstacle into sonar. Declaration public bool InsertObstacleCircle(float3 obstaclePosition, float3 obstacleVelocity, float obstacleRadius) Parameters Type Name Description float3 obstaclePosition Position of obstacle float3 obstacleVelocity Velocity of obstacle (Zero can be used for non moving obstacle) float obstacleRadius Radius of obstacle Returns Type Description bool True if obstacle was added successfully | Improve this Doc View Source InsertObstacleLine(float3, float3) Inserts line obstacle into sonar. Declaration public bool InsertObstacleLine(float3 obstacleStartPosition, float3 obstacleEndPosition) Parameters Type Name Description float3 obstacleStartPosition Start position of obstacle float3 obstacleEndPosition End position of obstacle Returns Type Description bool True if obstacle was added successfully | Improve this Doc View Source InsertObstacleLineIgnoreRadius(float3, float3) Inserts line obstacle into sonar without using the radius. Counter clockwise wall will be ignored. Declaration public bool InsertObstacleLineIgnoreRadius(float3 obstacleStartPosition, float3 obstacleEndPosition) Parameters Type Name Description float3 obstacleStartPosition Start position of obstacle float3 obstacleEndPosition End position of obstacle Returns Type Description bool True if obstacle was added successfully | Improve this Doc View Source Set(float3, float3, float3, float3, float, float, float) Reconstructs sonar avoidance using position, direction and radius. Declaration public void Set(float3 position, float3 velocity, float3 direction, float3 up, float innerRadius, float outerRadius, float angle) Parameters Type Name Description float3 position Position of sonar float3 velocity float3 direction Direction of sonar. Note this is forward direction on x axis, not z like LookRotation uses float3 up Up direction float innerRadius Minimum radius from which sonar will tracks obstacles and also used for path size float outerRadius Maximum radius from which sonar will tracks obstacles float angle The total angle in radians of sonar volume. One way to think it as range from -angle/2 to angle/2 the desired direction and avoidance direction will be. | Improve this Doc View Source Set(float3, float3, quaternion, float, float, float) This structure can be used for constructing local objet avoidance structure and finding the closest direction for it. It is composed of three main methods: Constructor, InsertObstacle and FindClosestDirection. Declaration public void Set(float3 position, float3 velocity, quaternion rotation, float innerRadius, float outerRadius, float angle) Parameters Type Name Description float3 position float3 velocity quaternion rotation float innerRadius float outerRadius float angle | Improve this Doc View Source TryDirectionToRotation(float3, float3, out quaternion) This is almost same as Quaternion.LookRotation just uses forward as x axis instead of z. Declaration public static bool TryDirectionToRotation(float3 forward, float3 up, out quaternion rotation) Parameters Type Name Description float3 forward Forward direction on x axis float3 up Up direction quaternion rotation Returns Type Description bool Implements IDisposable Extension Methods SonarAvoidanceUtility.DrawClosestDirection(SonarAvoidance) SonarAvoidanceUtility.DrawObstacleCircle(SonarAvoidance, float3, float3, float, int) SonarAvoidanceUtility.DrawSonar(SonarAvoidance)"
  },
  "api/ProjectDawn.LocalAvoidance.SonarAvoidanceUtility.html": {
    "href": "api/ProjectDawn.LocalAvoidance.SonarAvoidanceUtility.html",
    "title": "Class SonarAvoidanceUtility",
    "keywords": "Class SonarAvoidanceUtility Sonar avoidance utility class with some helpful functions. Inheritance object SonarAvoidanceUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.LocalAvoidance Assembly: ProjectDawn.LocalAvoidance.dll Syntax public static class SonarAvoidanceUtility Methods | Improve this Doc View Source DrawClosestDirection(SonarAvoidance) Draws closest desired direction that is not obstructed by obstacle. Must be called inside MonoBehaviour.OnGizmos and only works in Editor. Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawClosestDirection(this SonarAvoidance sonar) Parameters Type Name Description SonarAvoidance sonar | Improve this Doc View Source DrawObstacleCircle(SonarAvoidance, float3, float3, float, int) Draw sonar obstacle collision points. Use provided action to draw it. Must be called inside MonoBehaviour.OnGizmos and only works in Editor. Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawObstacleCircle(this SonarAvoidance sonar, float3 position, float3 velocity, float radius, int numIterations = 5) Parameters Type Name Description SonarAvoidance sonar float3 position float3 velocity float radius int numIterations | Improve this Doc View Source DrawSonar(SonarAvoidance) Draws sonar that is not obstructed by obstacle. Must be called inside MonoBehaviour.OnGizmos and only works in Editor. Declaration [Conditional(\"UNITY_EDITOR\")] public static void DrawSonar(this SonarAvoidance sonar) Parameters Type Name Description SonarAvoidance sonar"
  },
  "api/ProjectDawn.LocalAvoidance.html": {
    "href": "api/ProjectDawn.LocalAvoidance.html",
    "title": "Namespace ProjectDawn.LocalAvoidance",
    "keywords": "Namespace ProjectDawn.LocalAvoidance Classes Intersection SonarAvoidanceUtility Sonar avoidance utility class with some helpful functions. Structs Circle Line One dimension line segment. Line.CutResult SonarAvoidance This structure can be used for constructing local objet avoidance structure and finding the closest direction for it. It is composed of three main methods: Constructor, InsertObstacle and FindClosestDirection. Interfaces SonarAvoidance.IDrawArc Interface used to implement draw arc method. SonarAvoidance.IDrawCircle Interface used to implement draw circle method."
  },
  "api/ProjectDawn.Navigation.Agent.html": {
    "href": "api/ProjectDawn.Navigation.Agent.html",
    "title": "Struct Agent",
    "keywords": "Struct Agent Agent tag. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct Agent : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Layers Agent tag. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static Agent Default { get; } Property Value Type Description Agent Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentActionSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentActionSystemGroup.html",
    "title": "Class AgentActionSystemGroup",
    "keywords": "Class AgentActionSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentActionSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentSpatialSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentActionSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentBody.html": {
    "href": "api/ProjectDawn.Navigation.AgentBody.html",
    "title": "Struct AgentBody",
    "keywords": "Struct AgentBody Agent's body movement. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentBody : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Destination Final destination that agent will attempt to reach. Declaration public float3 Destination Field Value Type Description float3 | Improve this Doc View Source Force Force that agent will use to move towards. Calculated from agent position and destination. Declaration public float3 Force Field Value Type Description float3 | Improve this Doc View Source IsStopped This property holds the stop or resume condition of the agent. Declaration public bool IsStopped Field Value Type Description bool | Improve this Doc View Source RemainingDistance The distance between the agent's position and the destination. With NavMesh this value will return partial remaining distance not full path. Declaration public float RemainingDistance Field Value Type Description float | Improve this Doc View Source Velocity The velocity agent is moving. Declaration public float3 Velocity Field Value Type Description float3 Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentBody Default { get; } Property Value Type Description AgentBody | Improve this Doc View Source Speed Returns the legnth of Velocity. Declaration public float Speed { get; } Property Value Type Description float Methods | Improve this Doc View Source SetDestination(float3) Sets properties for new agent destination. Declaration public void SetDestination(float3 value) Parameters Type Name Description float3 value | Improve this Doc View Source Stop() Sets properties for agent to stop. Declaration public void Stop() Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentCollider.html": {
    "href": "api/ProjectDawn.Navigation.AgentCollider.html",
    "title": "Struct AgentCollider",
    "keywords": "Struct AgentCollider This component tags, if agent should collide with nearby agents. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentCollider : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source Layers This component tags, if agent should collide with nearby agents. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentCollider Default { get; } Property Value Type Description AgentCollider Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentColliderSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentColliderSystem.html",
    "title": "Struct AgentColliderSystem",
    "keywords": "Struct AgentColliderSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] public struct AgentColliderSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentCrowdPath.html": {
    "href": "api/ProjectDawn.Navigation.AgentCrowdPath.html",
    "title": "Struct AgentCrowdPath",
    "keywords": "Struct AgentCrowdPath Agent Crowd pathing. Implements ISharedComponentData IQueryTypeParameter IEquatable<AgentCrowdPath> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentCrowdPath : ISharedComponentData, IQueryTypeParameter, IEquatable<AgentCrowdPath> Fields | Improve this Doc View Source Group Entity that contains CrowdGroup and CrowdGroupFlow. Declaration public Entity Group Field Value Type Description Entity Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentCrowdPath Default { get; } Property Value Type Description AgentCrowdPath Methods | Improve this Doc View Source Equals(AgentCrowdPath) Agent Crowd pathing. Declaration public bool Equals(AgentCrowdPath other) Parameters Type Name Description AgentCrowdPath other Returns Type Description bool | Improve this Doc View Source GetHashCode() Agent Crowd pathing. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.AgentDepthCollider.html": {
    "href": "api/ProjectDawn.Navigation.AgentDepthCollider.html",
    "title": "Struct AgentDepthCollider",
    "keywords": "Struct AgentDepthCollider Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentDepthCollider : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Grounded Declaration public AgentDepthGrounded Grounded Field Value Type Description AgentDepthGrounded Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentDepthCollisionSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentDepthCollisionSystem.html",
    "title": "Struct AgentDepthCollisionSystem",
    "keywords": "Struct AgentDepthCollisionSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] public struct AgentDepthCollisionSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentDepthGrounded.html": {
    "href": "api/ProjectDawn.Navigation.AgentDepthGrounded.html",
    "title": "Enum AgentDepthGrounded",
    "keywords": "Enum AgentDepthGrounded Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum AgentDepthGrounded Fields Name Description HeightCorrection None PlaneSphereCollision"
  },
  "api/ProjectDawn.Navigation.AgentDisplacementSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentDisplacementSystemGroup.html",
    "title": "Class AgentDisplacementSystemGroup",
    "keywords": "Class AgentDisplacementSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentDisplacementSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentLocomotionSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentDisplacementSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentFlock.html": {
    "href": "api/ProjectDawn.Navigation.AgentFlock.html",
    "title": "Struct AgentFlock",
    "keywords": "Struct AgentFlock Agent flocking with nearby agents. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentFlock : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source AlignmentWeight The weight of the alignment force. Declaration public float AlignmentWeight Field Value Type Description float | Improve this Doc View Source CohesionWeight The weight of the cohesion force. Declaration public float CohesionWeight Field Value Type Description float | Improve this Doc View Source Layers Agent flocking with nearby agents. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers | Improve this Doc View Source Radius Radius at which agent will attempt cohesion and alignement with nearby agents. Declaration public float Radius Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentFlock Default { get; } Property Value Type Description AgentFlock Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentFlockSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentFlockSystem.html",
    "title": "Struct AgentFlockSystem",
    "keywords": "Struct AgentFlockSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(AgentForceSystemGroup))] [UpdateAfter(typeof(FlockGroupSystem))] public struct AgentFlockSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentFlockingSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentFlockingSystem.html",
    "title": "Struct AgentFlockingSystem",
    "keywords": "Struct AgentFlockingSystem System that calculates Flock direction from nearby agents. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct AgentFlockingSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentForceSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentForceSystem.html",
    "title": "Struct AgentForceSystem",
    "keywords": "Struct AgentForceSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentLocomotionSystemGroup))] [Obsolete(\"AgentForceSystem is deprecated, please use AgentLocomotionSystem!\", false)] public struct AgentForceSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentForceSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentForceSystemGroup.html",
    "title": "Class AgentForceSystemGroup",
    "keywords": "Class AgentForceSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentForceSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentPathingSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentForceSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentGrounding.html": {
    "href": "api/ProjectDawn.Navigation.AgentGrounding.html",
    "title": "Struct AgentGrounding",
    "keywords": "Struct AgentGrounding This component tags, if agent Unity.Transforms.LocalTransform.Position y should be grounded using unity physics. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentGrounding : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source Layers Mask layer that determines which colliders it will interact with. Declaration public LayerMask Layers Field Value Type Description LayerMask Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentGrounding Default { get; } Property Value Type Description AgentGrounding Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentGroundingSlope.html": {
    "href": "api/ProjectDawn.Navigation.AgentGroundingSlope.html",
    "title": "Struct AgentGroundingSlope",
    "keywords": "Struct AgentGroundingSlope This component tags, if agent Force should be grounded using unity physics. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentGroundingSlope : IComponentData, IQueryTypeParameter Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentGroundingSlopeSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentGroundingSlopeSystem.html",
    "title": "Struct AgentGroundingSlopeSystem",
    "keywords": "Struct AgentGroundingSlopeSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSystemGroup))] [UpdateAfter(typeof(AgentForceSystemGroup))] [UpdateBefore(typeof(AgentLocomotionSystemGroup))] public struct AgentGroundingSlopeSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentGroundingSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentGroundingSystem.html",
    "title": "Struct AgentGroundingSystem",
    "keywords": "Struct AgentGroundingSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] public struct AgentGroundingSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentLocomotion.html": {
    "href": "api/ProjectDawn.Navigation.AgentLocomotion.html",
    "title": "Struct AgentLocomotion",
    "keywords": "Struct AgentLocomotion Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct AgentLocomotion : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Acceleration The maximum acceleration of an agent as it follows a path, given in units / sec^2. Declaration public float Acceleration Field Value Type Description float | Improve this Doc View Source AngularSpeed Maximum turning speed in (rad/s) while following a path. Declaration public float AngularSpeed Field Value Type Description float | Improve this Doc View Source AutoBreaking Should the agent brake automatically to avoid overshooting the destination point? Declaration public bool AutoBreaking Field Value Type Description bool | Improve this Doc View Source Speed Maximum movement speed when moving to destination. Declaration public float Speed Field Value Type Description float | Improve this Doc View Source StoppingDistance Stop within this distance from the target position. Declaration public float StoppingDistance Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentLocomotion Default { get; } Property Value Type Description AgentLocomotion Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentLocomotionSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentLocomotionSystem.html",
    "title": "Struct AgentLocomotionSystem",
    "keywords": "Struct AgentLocomotionSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentLocomotionSystemGroup))] public struct AgentLocomotionSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentLocomotionSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentLocomotionSystemGroup.html",
    "title": "Class AgentLocomotionSystemGroup",
    "keywords": "Class AgentLocomotionSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentLocomotionSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentForceSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentLocomotionSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentOculusAvoid.html": {
    "href": "api/ProjectDawn.Navigation.AgentOculusAvoid.html",
    "title": "Struct AgentOculusAvoid",
    "keywords": "Struct AgentOculusAvoid Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentOculusAvoid : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source CoverageWeight Declaration public float CoverageWeight Field Value Type Description float | Improve this Doc View Source Mode Declaration public AgentOculusAvoidMode Mode Field Value Type Description AgentOculusAvoidMode | Improve this Doc View Source Radius Declaration public float Radius Field Value Type Description float | Improve this Doc View Source Weights Declaration public OculusAvoidanceWeights Weights Field Value Type Description OculusAvoidanceWeights Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentOculusAvoid Default { get; } Property Value Type Description AgentOculusAvoid Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentOculusAvoidMode.html": {
    "href": "api/ProjectDawn.Navigation.AgentOculusAvoidMode.html",
    "title": "Enum AgentOculusAvoidMode",
    "keywords": "Enum AgentOculusAvoidMode Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum AgentOculusAvoidMode Fields Name Description HemiSphere17 HemiSphere25 Separation"
  },
  "api/ProjectDawn.Navigation.AgentOculusAvoidSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentOculusAvoidSystem.html",
    "title": "Struct AgentOculusAvoidSystem",
    "keywords": "Struct AgentOculusAvoidSystem System that calculates avoidance direction from nearby agents. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct AgentOculusAvoidSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentPathingSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentPathingSystemGroup.html",
    "title": "Class AgentPathingSystemGroup",
    "keywords": "Class AgentPathingSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentPathingSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentSeekingSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentPathingSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentPositionSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentPositionSystemGroup.html",
    "title": "Class AgentPositionSystemGroup",
    "keywords": "Class AgentPositionSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentPositionSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Obsolete(\"AgentPositionSystemGroup is deprecated, please use AgentDisplacementSystemGroup!\", false)] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] public class AgentPositionSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentReciprocalAvoid.html": {
    "href": "api/ProjectDawn.Navigation.AgentReciprocalAvoid.html",
    "title": "Struct AgentReciprocalAvoid",
    "keywords": "Struct AgentReciprocalAvoid Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentReciprocalAvoid : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Layers Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers | Improve this Doc View Source Radius Declaration public float Radius Field Value Type Description float Properties | Improve this Doc View Source Default Declaration public static AgentReciprocalAvoid Default { get; } Property Value Type Description AgentReciprocalAvoid Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentReciprocalAvoidSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentReciprocalAvoidSystem.html",
    "title": "Struct AgentReciprocalAvoidSystem",
    "keywords": "Struct AgentReciprocalAvoidSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct AgentReciprocalAvoidSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSeekingSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSeekingSystem.html",
    "title": "Struct AgentSeekingSystem",
    "keywords": "Struct AgentSeekingSystem System that steers agent towards destination. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSeekingSystemGroup))] public struct AgentSeekingSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSeekingSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentSeekingSystemGroup.html",
    "title": "Class AgentSeekingSystemGroup",
    "keywords": "Class AgentSeekingSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentSeekingSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(AgentActionSystemGroup))] [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentSeekingSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentSeparation.html": {
    "href": "api/ProjectDawn.Navigation.AgentSeparation.html",
    "title": "Struct AgentSeparation",
    "keywords": "Struct AgentSeparation Agent separation from nearby agents. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentSeparation : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source Layers Agent separation from nearby agents. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers | Improve this Doc View Source Radius Radius at which agent will attempt separate from each other. Declaration public float Radius Field Value Type Description float | Improve this Doc View Source Weight The weight of the separation force. Declaration public float Weight Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentSeparation Default { get; } Property Value Type Description AgentSeparation Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentSeparationSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSeparationSystem.html",
    "title": "Struct AgentSeparationSystem",
    "keywords": "Struct AgentSeparationSystem System that calculates separation direction from nearby agents. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct AgentSeparationSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentShape.html": {
    "href": "api/ProjectDawn.Navigation.AgentShape.html",
    "title": "Struct AgentShape",
    "keywords": "Struct AgentShape Represents agent shape in space. In the future this component might be split into specific shape components instead of having one big generic. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentShape : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Height The height of the agent for purposes of passing under obstacles, etc. Declaration public float Height Field Value Type Description float | Improve this Doc View Source Radius The radius of the agent. Declaration public float Radius Field Value Type Description float | Improve this Doc View Source Type The type of shape. Declaration public ShapeType Type Field Value Type Description ShapeType Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentShape Default { get; } Property Value Type Description AgentShape | Improve this Doc View Source Orentation Represents agent shape in space. In the future this component might be split into specific shape components instead of having one big generic. Declaration public quaternion Orentation { get; } Property Value Type Description quaternion | Improve this Doc View Source Up Represents agent shape in space. In the future this component might be split into specific shape components instead of having one big generic. Declaration public float3 Up { get; } Property Value Type Description float3 Methods | Improve this Doc View Source GetUp() Returns up vector of shape. Declaration public float3 GetUp() Returns Type Description float3 Returns up vector of shape. Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentSmartStop.html": {
    "href": "api/ProjectDawn.Navigation.AgentSmartStop.html",
    "title": "Struct AgentSmartStop",
    "keywords": "Struct AgentSmartStop Agent smart stop to handle some common stuck scenarios. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentSmartStop : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source GiveUpStop Agent smart stop to handle some common stuck scenarios. Declaration public GiveUpStop GiveUpStop Field Value Type Description GiveUpStop | Improve this Doc View Source HiveMindStop Agent smart stop to handle some common stuck scenarios. Declaration public HiveMindStop HiveMindStop Field Value Type Description HiveMindStop Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentSmartStop Default { get; } Property Value Type Description AgentSmartStop Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentSmartStopSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSmartStopSystem.html",
    "title": "Struct AgentSmartStopSystem",
    "keywords": "Struct AgentSmartStopSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentActionSystemGroup))] public struct AgentSmartStopSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration [BurstCompile] public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSonarAvoid.html": {
    "href": "api/ProjectDawn.Navigation.AgentSonarAvoid.html",
    "title": "Struct AgentSonarAvoid",
    "keywords": "Struct AgentSonarAvoid Agent avoidance of nearby agents using Sonar Avoidance algorithm. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentSonarAvoid : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source Angle Discourages the agent from moving backwards. The higher the value, the more likely the agent will be able to escape surrounded scenarios, but this comes at the cost of reduced agent control. Declaration public float Angle Field Value Type Description float | Improve this Doc View Source BlockedStop Whenever agent should stop if all directions are blocked. Declaration public bool BlockedStop Field Value Type Description bool | Improve this Doc View Source Layers Agent avoidance of nearby agents using Sonar Avoidance algorithm. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers | Improve this Doc View Source MaxAngle The maximum angle at which the agent will steer away to avoid local obstacles. The lower the value, the less sonar avoidance will affect the steering direction. Declaration public float MaxAngle Field Value Type Description float | Improve this Doc View Source Mode Mode that modifies avoidance behaviour. Declaration public SonarAvoidMode Mode Field Value Type Description SonarAvoidMode | Improve this Doc View Source Radius The maximum distance at which agent will attempt to avoid nearby agents. Declaration public float Radius Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentSonarAvoid Default { get; } Property Value Type Description AgentSonarAvoid Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.AgentSonarAvoidSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSonarAvoidSystem.html",
    "title": "Struct AgentSonarAvoidSystem",
    "keywords": "Struct AgentSonarAvoidSystem System that calculates avoidance direction from nearby agents. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct AgentSonarAvoidSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSpatialPartitioningSystem.Singleton.html": {
    "href": "api/ProjectDawn.Navigation.AgentSpatialPartitioningSystem.Singleton.html",
    "title": "Struct AgentSpatialPartitioningSystem.Singleton",
    "keywords": "Struct AgentSpatialPartitioningSystem.Singleton Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct AgentSpatialPartitioningSystem.Singleton : IComponentData, IQueryTypeParameter Properties | Improve this Doc View Source QueryCapacity Declaration public int QueryCapacity { get; } Property Value Type Description int Methods | Improve this Doc View Source QueryCircle<T>(float3, float, int, ref T, NavigationLayers) Query agents that intersect with the circle. Declaration public int QueryCircle<T>(float3 center, float radius, int maxCount, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 center float radius int maxCount T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T | Improve this Doc View Source QueryCircle<T>(float3, float, ref T, NavigationLayers) Query agents that intersect with the sphere. Declaration public int QueryCircle<T>(float3 center, float radius, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 center float radius T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T | Improve this Doc View Source QueryCylinder<T>(float3, float, float, int, ref T, NavigationLayers) Query agents that intersect with the sphere. Declaration public int QueryCylinder<T>(float3 center, float radius, float height, int maxCount, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 center float radius float height int maxCount T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T | Improve this Doc View Source QueryCylinder<T>(float3, float, float, ref T, NavigationLayers) Query agents that intersect with the cylinder. Declaration public int QueryCylinder<T>(float3 center, float radius, float height, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 center float radius float height T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T | Improve this Doc View Source QueryLine<T>(float3, float3, ref T, NavigationLayers) Query agents that intersect with the line. Declaration public int QueryLine<T>(float3 from, float3 to, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 from float3 to T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T | Improve this Doc View Source QuerySphere<T>(float3, float, ref T, NavigationLayers) Query agents that intersect with the sphere. Declaration public int QuerySphere<T>(float3 center, float radius, ref T action, NavigationLayers layers = NavigationLayers.Layer31 | NavigationLayers.Default | NavigationLayers.Layer1 | NavigationLayers.Layer2 | NavigationLayers.Layer3 | NavigationLayers.Layer4 | NavigationLayers.Layer5 | NavigationLayers.Layer6 | NavigationLayers.Layer7 | NavigationLayers.Layer8 | NavigationLayers.Layer9 | NavigationLayers.Layer10 | NavigationLayers.Layer11 | NavigationLayers.Layer12 | NavigationLayers.Layer13 | NavigationLayers.Layer14 | NavigationLayers.Layer15 | NavigationLayers.Layer16 | NavigationLayers.Layer17 | NavigationLayers.Layer18 | NavigationLayers.Layer19 | NavigationLayers.Layer20 | NavigationLayers.Layer21 | NavigationLayers.Layer22 | NavigationLayers.Layer23 | NavigationLayers.Layer24 | NavigationLayers.Layer25 | NavigationLayers.Layer26 | NavigationLayers.Layer27 | NavigationLayers.Layer28 | NavigationLayers.Layer29 | NavigationLayers.Layer30) where T : unmanaged, ISpatialQueryEntity Parameters Type Name Description float3 center float radius T action NavigationLayers layers Returns Type Description int Type Parameters Name Description T Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentSpatialPartitioningSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSpatialPartitioningSystem.html",
    "title": "Struct AgentSpatialPartitioningSystem",
    "keywords": "Struct AgentSpatialPartitioningSystem Partitions agents into arbitary size cells. This allows to query nearby agents more efficiently. Space is partitioned using multi hash map. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSpatialSystemGroup))] public struct AgentSpatialPartitioningSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration [BurstCompile] public void OnDestroy(ref SystemState systemState) Parameters Type Name Description SystemState systemState Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSpatialSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentSpatialSystemGroup.html",
    "title": "Class AgentSpatialSystemGroup",
    "keywords": "Class AgentSpatialSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentSpatialSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(AgentSystemGroup))] public class AgentSpatialSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentSteering.html": {
    "href": "api/ProjectDawn.Navigation.AgentSteering.html",
    "title": "Struct AgentSteering",
    "keywords": "Struct AgentSteering Agent's steering towards destination with arrival. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Obsolete(\"AgentSteering is deprecated, please use AgentLocomotion!\", false)] public struct AgentSteering : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Acceleration The maximum acceleration of an agent as it follows a path, given in units / sec^2. Declaration public float Acceleration Field Value Type Description float | Improve this Doc View Source AngularSpeed Maximum turning speed in (rad/s) while following a path. Declaration public float AngularSpeed Field Value Type Description float | Improve this Doc View Source AutoBreaking Should the agent brake automatically to avoid overshooting the destination point? Declaration public bool AutoBreaking Field Value Type Description bool | Improve this Doc View Source Speed Maximum movement speed when moving to destination. Declaration public float Speed Field Value Type Description float | Improve this Doc View Source StoppingDistance Stop within this distance from the target position. Declaration public float StoppingDistance Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static AgentSteering Default { get; } Property Value Type Description AgentSteering Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.AgentSteeringSystem.html": {
    "href": "api/ProjectDawn.Navigation.AgentSteeringSystem.html",
    "title": "Struct AgentSteeringSystem",
    "keywords": "Struct AgentSteeringSystem System that steers agent towards destination. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSteeringSystemGroup))] [Obsolete(\"AgentSteeringSystem is deprecated, please use AgentSeekingSystem!\", false)] public struct AgentSteeringSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.AgentSteeringSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentSteeringSystemGroup.html",
    "title": "Class AgentSteeringSystemGroup",
    "keywords": "Class AgentSteeringSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentSteeringSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Obsolete(\"AgentSteeringSystemGroup is deprecated, please use AgentSeekingSystemGroup!\", false)] [UpdateInGroup(typeof(AgentSeekingSystemGroup))] public class AgentSteeringSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentSystemGroup.html",
    "title": "Class AgentSystemGroup",
    "keywords": "Class AgentSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(FixedStepSimulationSystemGroup))] public class AgentSystemGroup : ComponentSystemGroup Methods | Improve this Doc View Source OnUpdate() Updates the group's systems Declaration protected override void OnUpdate() Overrides Unity.Entities.ComponentSystemGroup.OnUpdate()"
  },
  "api/ProjectDawn.Navigation.AgentTransformSystemGroup.html": {
    "href": "api/ProjectDawn.Navigation.AgentTransformSystemGroup.html",
    "title": "Class AgentTransformSystemGroup",
    "keywords": "Class AgentTransformSystemGroup Inheritance object ComponentSystemBase SystemBase ComponentSystemGroup AgentTransformSystemGroup Inherited Members ComponentSystemGroup.EnableSystemSorting ComponentSystemGroup.Created ComponentSystemGroup.ManagedSystems ComponentSystemGroup.GetUnmanagedSystems(Allocator) ComponentSystemGroup.GetAllSystems(Allocator) ComponentSystemGroup.OnCreate() ComponentSystemGroup.OnDestroy() ComponentSystemGroup.AddSystemToUpdateList(ComponentSystemBase) ComponentSystemGroup.AddSystemToUpdateList(SystemHandle) ComponentSystemGroup.RemoveSystemFromUpdateList(ComponentSystemBase) ComponentSystemGroup.RemoveSystemFromUpdateList(SystemHandle) ComponentSystemGroup.SortSystems() ComponentSystemGroup.FixedRateManager ComponentSystemGroup.RateManager ComponentSystemGroup.SetRateManagerCreateAllocator(IRateManager) ComponentSystemGroup.RateGroupAllocators ComponentSystemGroup.OnUpdate() SystemBase.Dependency SystemBase.CheckedStateRef SystemBase.CompleteDependency() SystemBase.Entities SystemBase.Job SystemBase.Update() SystemBase.GetComponent<T>(Entity) SystemBase.SetComponent<T>(Entity, T) SystemBase.HasComponent<T>(Entity) SystemBase.HasBuffer<T>(Entity) SystemBase.GetComponentLookup<T>(bool) SystemBase.GetComponentDataFromEntity<T>(bool) SystemBase.GetBuffer<T>(Entity, bool) SystemBase.GetBufferLookup<T>(bool) SystemBase.GetBufferFromEntity<T>(bool) SystemBase.GetEntityStorageInfoLookup() SystemBase.GetStorageInfoFromEntity() SystemBase.Exists(Entity) ComponentSystemBase.Enabled ComponentSystemBase.EntityQueries ComponentSystemBase.GlobalSystemVersion ComponentSystemBase.LastSystemVersion ComponentSystemBase.EntityManager ComponentSystemBase.World ComponentSystemBase.SystemHandle ComponentSystemBase.SystemHandleUntyped ComponentSystemBase.Time ComponentSystemBase.WorldUpdateAllocator ComponentSystemBase.OnStartRunning() ComponentSystemBase.OnStopRunning() ComponentSystemBase.ShouldRunSystem() ComponentSystemBase.GetComponentTypeHandle<T>(bool) ComponentSystemBase.GetDynamicComponentTypeHandle(ComponentType) ComponentSystemBase.GetBufferTypeHandle<T>(bool) ComponentSystemBase.GetSharedComponentTypeHandle<T>() ComponentSystemBase.GetDynamicSharedComponentTypeHandle(ComponentType) ComponentSystemBase.GetEntityTypeHandle() ComponentSystemBase.RequireForUpdate(EntityQuery) ComponentSystemBase.RequireAnyForUpdate(params EntityQuery[]) ComponentSystemBase.RequireAnyForUpdate(NativeArray<EntityQuery>) ComponentSystemBase.RequireForUpdate<T>() ComponentSystemBase.RequireSingletonForUpdate<T>() ComponentSystemBase.HasSingleton<T>() ComponentSystemBase.GetSingleton<T>() ComponentSystemBase.GetSingletonRW<T>() ComponentSystemBase.GetSingletonBuffer<T>(bool) ComponentSystemBase.TryGetSingleton<T>(out T) ComponentSystemBase.TryGetSingletonBuffer<T>(out DynamicBuffer<T>) ComponentSystemBase.SetSingleton<T>(T) ComponentSystemBase.GetSingletonEntity<T>() ComponentSystemBase.TryGetSingletonEntity<T>(out Entity) ComponentSystemBase.GetEntityQuery(params ComponentType[]) ComponentSystemBase.GetEntityQuery(NativeArray<ComponentType>) ComponentSystemBase.GetEntityQuery(params EntityQueryDesc[]) ComponentSystemBase.GetEntityQuery(in EntityQueryBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Obsolete(\"AgentTransformSystemGroup is deprecated, please use AgentLocomotionSystemGroup!\", false)] [UpdateInGroup(typeof(AgentLocomotionSystemGroup))] public class AgentTransformSystemGroup : ComponentSystemGroup"
  },
  "api/ProjectDawn.Navigation.AgentsNavigationSettings.html": {
    "href": "api/ProjectDawn.Navigation.AgentsNavigationSettings.html",
    "title": "Class AgentsNavigationSettings",
    "keywords": "Class AgentsNavigationSettings Settings asset of agents navigation package. Contains list of sub settings combined from classes that implement ISubSettings interface. Inheritance object Object ScriptableObject AgentsNavigationSettings Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [CreateAssetMenu(fileName = \"Agents Navigation Settings\", menuName = \"AI/Agents Navigation Settings\", order = 1000)] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/settings.html\")] public class AgentsNavigationSettings : ScriptableObject Constructors | Improve this Doc View Source AgentsNavigationSettings() Settings asset of agents navigation package. Contains list of sub settings combined from classes that implement ISubSettings interface. Declaration public AgentsNavigationSettings() Properties | Improve this Doc View Source Instance Currently used agents navigation settings asset. Declaration public static AgentsNavigationSettings Instance { get; set; } Property Value Type Description AgentsNavigationSettings | Improve this Doc View Source SubSettings Settings asset of agents navigation package. Contains list of sub settings combined from classes that implement ISubSettings interface. Declaration public List<ISubSettings> SubSettings { get; } Property Value Type Description List<ISubSettings> Methods | Improve this Doc View Source Contains(Type) Returns true, if contains settings of specified type. Declaration public bool Contains(Type type) Parameters Type Name Description Type type Returns Type Description bool | Improve this Doc View Source FindTypesInAssemblies() Returns all types that implement ISubSettings interface. Declaration public static List<Type> FindTypesInAssemblies() Returns Type Description List<Type> | Improve this Doc View Source Get<T>() Returns instance of sub setting. In case project does not have settings asset set, it will return instance with default values. Declaration public static T Get<T>() where T : ISubSettings Returns Type Description T Type Parameters Name Description T"
  },
  "api/ProjectDawn.Navigation.Astar.AgentAstarPathingAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Astar.AgentAstarPathingAuthoring.html",
    "title": "Class AgentAstarPathingAuthoring",
    "keywords": "Class AgentAstarPathingAuthoring Agent uses NavMesh for pathfinding. Inheritance object Object Component Behaviour MonoBehaviour AgentAstarPathingAuthoring Implements INavMeshWallProvider Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Astar Assembly: ProjectDawn.Navigation.Astar.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Astar Pathing\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/pathing/astar.html\")] public class AgentAstarPathingAuthoring : MonoBehaviour, INavMeshWallProvider Implements INavMeshWallProvider"
  },
  "api/ProjectDawn.Navigation.Astar.html": {
    "href": "api/ProjectDawn.Navigation.Astar.html",
    "title": "Namespace ProjectDawn.Navigation.Astar",
    "keywords": "Namespace ProjectDawn.Navigation.Astar Classes AgentAstarPathingAuthoring Agent uses NavMesh for pathfinding."
  },
  "api/ProjectDawn.Navigation.Bird.html": {
    "href": "api/ProjectDawn.Navigation.Bird.html",
    "title": "Struct Bird",
    "keywords": "Struct Bird Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct Bird : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source PerchedDuration Declaration public Range PerchedDuration Field Value Type Description Range | Improve this Doc View Source Random Declaration public Random Random Field Value Type Description Random | Improve this Doc View Source State Declaration public BirdState State Field Value Type Description BirdState | Improve this Doc View Source TimeStamp Declaration public double TimeStamp Field Value Type Description double | Improve this Doc View Source Wander Declaration public BirdWander Wander Field Value Type Description BirdWander Properties | Improve this Doc View Source Default Declaration public static Bird Default { get; } Property Value Type Description Bird Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.BirdLocomotion.html": {
    "href": "api/ProjectDawn.Navigation.BirdLocomotion.html",
    "title": "Struct BirdLocomotion",
    "keywords": "Struct BirdLocomotion Agent's locomotion that moves towards destination with arrival. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct BirdLocomotion : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Acceleration The maximum acceleration of an agent as it follows a path, given in units / sec^2. Declaration public float Acceleration Field Value Type Description float | Improve this Doc View Source AngularSpeed Maximum turning speed in (rad/s) while following a path. Declaration public float AngularSpeed Field Value Type Description float | Improve this Doc View Source AutoBreaking Should the agent brake automatically to avoid overshooting the destination point? Declaration public bool AutoBreaking Field Value Type Description bool | Improve this Doc View Source Speed Maximum movement speed when moving to destination. Declaration public float Speed Field Value Type Description float | Improve this Doc View Source StoppingDistance Stop within this distance from the target position. Declaration public float StoppingDistance Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static BirdLocomotion Default { get; } Property Value Type Description BirdLocomotion Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.BirdLocomotionSystem.html": {
    "href": "api/ProjectDawn.Navigation.BirdLocomotionSystem.html",
    "title": "Struct BirdLocomotionSystem",
    "keywords": "Struct BirdLocomotionSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentLocomotionSystemGroup))] public struct BirdLocomotionSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.BirdSeekingSystem.html": {
    "href": "api/ProjectDawn.Navigation.BirdSeekingSystem.html",
    "title": "Struct BirdSeekingSystem",
    "keywords": "Struct BirdSeekingSystem System that steers agent towards destination. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSeekingSystemGroup))] public struct BirdSeekingSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.BirdState.html": {
    "href": "api/ProjectDawn.Navigation.BirdState.html",
    "title": "Enum BirdState",
    "keywords": "Enum BirdState Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum BirdState Fields Name Description Birth Landing Perched SearchSpot Wander"
  },
  "api/ProjectDawn.Navigation.BirdSystem.html": {
    "href": "api/ProjectDawn.Navigation.BirdSystem.html",
    "title": "Struct BirdSystem",
    "keywords": "Struct BirdSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentActionSystemGroup))] public struct BirdSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.BirdWander.html": {
    "href": "api/ProjectDawn.Navigation.BirdWander.html",
    "title": "Struct BirdWander",
    "keywords": "Struct BirdWander Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct BirdWander Fields | Improve this Doc View Source Duration Declaration public Range Duration Field Value Type Description Range | Improve this Doc View Source Exploration Declaration [Range(1, 3)] public float Exploration Field Value Type Description float | Improve this Doc View Source Height Declaration public Range Height Field Value Type Description Range | Improve this Doc View Source Step Declaration public Range Step Field Value Type Description Range Properties | Improve this Doc View Source Default Declaration public static BirdWander Default { get; } Property Value Type Description BirdWander"
  },
  "api/ProjectDawn.Navigation.CollectionChecks.html": {
    "href": "api/ProjectDawn.Navigation.CollectionChecks.html",
    "title": "Class CollectionChecks",
    "keywords": "Class CollectionChecks Inheritance object CollectionChecks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public static class CollectionChecks Methods | Improve this Doc View Source CheckAllocator(AllocatorHandle) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckAllocator(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description AllocatorManager.AllocatorHandle allocator | Improve this Doc View Source CheckCapacity(int) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckCapacity(int capacity) Parameters Type Name Description int capacity | Improve this Doc View Source CheckCapacityInRange(int, int) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckCapacityInRange(int capacity, int length) Parameters Type Name Description int capacity int length | Improve this Doc View Source CheckIndexInRange(int, int) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [Conditional(\"UNITY_DOTS_DEBUG\")] public static void CheckIndexInRange(int index, int length) Parameters Type Name Description int index int length | Improve this Doc View Source CheckIsUnmanaged<T>() Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] [BurstDiscard] public static void CheckIsUnmanaged<T>() Type Parameters Name Description T | Improve this Doc View Source CheckNull<T>(T*) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckNull<T>(T* listData) where T : unmanaged Parameters Type Name Description T* listData Type Parameters Name Description T | Improve this Doc View Source CheckPositive(int) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckPositive(int value) Parameters Type Name Description int value | Improve this Doc View Source CheckReinterpret<T>(int) Declaration [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] public static void CheckReinterpret<T>(int size) where T : unmanaged Parameters Type Name Description int size Type Parameters Name Description T | Improve this Doc View Source ShouldDeallocate(AllocatorHandle) Declaration public static bool ShouldDeallocate(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description AllocatorManager.AllocatorHandle allocator Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.ColliderSubSettings.html": {
    "href": "api/ProjectDawn.Navigation.ColliderSubSettings.html",
    "title": "Class ColliderSubSettings",
    "keywords": "Class ColliderSubSettings Inheritance object ColliderSubSettings Implements ISubSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public class ColliderSubSettings : ISubSettings Properties | Improve this Doc View Source Iterations The number of iterations per frame for resolving collisions will be determined. A higher number will result in more accurate collision resolution, but it will also incur a greater performance cost. Declaration public int Iterations { get; } Property Value Type Description int Implements ISubSettings"
  },
  "api/ProjectDawn.Navigation.CrowdData.Baked.html": {
    "href": "api/ProjectDawn.Navigation.CrowdData.Baked.html",
    "title": "Struct CrowdData.Baked",
    "keywords": "Struct CrowdData.Baked Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct CrowdData.Baked Fields | Improve this Doc View Source Height Baked data height. Declaration [Tooltip(\"Baked data height.\")] [SerializeField] public int Height Field Value Type Description int | Improve this Doc View Source HeightFieldData Baked height field. Declaration [Tooltip(\"Baked height field.\")] [SerializeField] public float[] HeightFieldData Field Value Type Description float[] | Improve this Doc View Source ObstacleFieldData Baked obstacle field: Zero represents a non-occluded cell, a positive number indicates multiple occlusions on a single cell, and a negative number is invalid. Declaration [Tooltip(\"Baked obstacle field: Zero represents a non-occluded cell, a positive number indicates multiple occlusions on a single cell, and a negative number is invalid.\")] [SerializeField] public int[] ObstacleFieldData Field Value Type Description int[] | Improve this Doc View Source Width Baked data width. Declaration [Tooltip(\"Baked data width.\")] [SerializeField] public int Width Field Value Type Description int Methods | Improve this Doc View Source Validate() Returns error Declaration public void Validate()"
  },
  "api/ProjectDawn.Navigation.CrowdData.ObjectCollection.html": {
    "href": "api/ProjectDawn.Navigation.CrowdData.ObjectCollection.html",
    "title": "Struct CrowdData.ObjectCollection",
    "keywords": "Struct CrowdData.ObjectCollection Settings that define objects that will be collected for crowd surface data baking. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct CrowdData.ObjectCollection Fields | Improve this Doc View Source Geometry Defines the collected objects geometry. Declaration [Tooltip(\"Defines the collected objects geometry.\")] public CrowdData.ObjectCollectionGeometry Geometry Field Value Type Description CrowdData.ObjectCollectionGeometry | Improve this Doc View Source Layers Objects with specified layer will be included. Declaration [Tooltip(\"Objects with specified layer will be included.\")] public LayerMask Layers Field Value Type Description LayerMask Properties | Improve this Doc View Source Default Settings that define objects that will be collected for crowd surface data baking. Declaration public static CrowdData.ObjectCollection Default { get; } Property Value Type Description CrowdData.ObjectCollection"
  },
  "api/ProjectDawn.Navigation.CrowdData.ObjectCollectionGeometry.html": {
    "href": "api/ProjectDawn.Navigation.CrowdData.ObjectCollectionGeometry.html",
    "title": "Enum CrowdData.ObjectCollectionGeometry",
    "keywords": "Enum CrowdData.ObjectCollectionGeometry Defines the collected objects geometry. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum CrowdData.ObjectCollectionGeometry Fields Name Description PhysicsColliders Defines the collected objects geometry."
  },
  "api/ProjectDawn.Navigation.CrowdData.html": {
    "href": "api/ProjectDawn.Navigation.CrowdData.html",
    "title": "Class CrowdData",
    "keywords": "Class CrowdData Crowd data used for initializing topographical surface data. Inheritance object Object ScriptableObject CrowdData Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [CreateAssetMenu(fileName = \"New Crowd Data\", menuName = \"AI/Crowd Data\", order = 1000)] public class CrowdData : ScriptableObject Properties | Improve this Doc View Source BakedData Baked data. Declaration public CrowdData.Baked BakedData { get; } Property Value Type Description CrowdData.Baked | Improve this Doc View Source GizmosColor Cell color then drawing gizmos. Declaration public Color GizmosColor { get; } Property Value Type Description Color | Improve this Doc View Source Height Baked data height. Declaration public int Height { get; } Property Value Type Description int | Improve this Doc View Source HeightField Baked height field. Declaration public ReadOnlySpan<float> HeightField { get; } Property Value Type Description ReadOnlySpan<float> | Improve this Doc View Source Length Multiplication of width and height. Declaration public int Length { get; } Property Value Type Description int | Improve this Doc View Source MaxHeight Maximum height of cell. Declaration public float MaxHeight { get; } Property Value Type Description float | Improve this Doc View Source MaxSlope Maximum slope in degress. Declaration public float MaxSlope { get; } Property Value Type Description float | Improve this Doc View Source ObstacleField Baked obstacle field: Zero represents a non-occluded cell, a positive number indicates multiple occlusions on a single cell, and a negative number is invalid. Declaration public ReadOnlySpan<int> ObstacleField { get; } Property Value Type Description ReadOnlySpan<int> | Improve this Doc View Source Radius Radius of agent. Declaration public float Radius { get; } Property Value Type Description float | Improve this Doc View Source Width Baked data width. Declaration public int Width { get; } Property Value Type Description int Methods | Improve this Doc View Source BuildHeightFieldFromColliders(int, int, NonUniformTransform) Builds height field out of physics UnityEngine.Collider in the scene. Declaration public void BuildHeightFieldFromColliders(int width, int height, NonUniformTransform transform) Parameters Type Name Description int width int height NonUniformTransform transform | Improve this Doc View Source BuildHeightFieldFromCollidersWithRadius(int, int, NonUniformTransform) Builds height field out of physics UnityEngine.Collider in the scene with respect of agent radius. Declaration public void BuildHeightFieldFromCollidersWithRadius(int width, int height, NonUniformTransform transform) Parameters Type Name Description int width int height NonUniformTransform transform | Improve this Doc View Source GetCell(int) Converts index to cell. Declaration public int2 GetCell(int index) Parameters Type Name Description int index Returns Type Description int2 | Improve this Doc View Source GetCellIndex(int2) Converts cell to index. Declaration public int GetCellIndex(int2 point) Parameters Type Name Description int2 point Returns Type Description int | Improve this Doc View Source IsValidCell(int2) Returns true, if cell is within world bounds and has no obstacle. Declaration public bool IsValidCell(int2 cell) Parameters Type Name Description int2 cell Returns Type Description bool | Improve this Doc View Source RecalculateObstacleField() Updates obstacle field from HeightFieldData. Make sure height field is updated before calling this method. Declaration public void RecalculateObstacleField() | Improve this Doc View Source SampleHeight(float2) Returns interpolated height at world space position. Declaration public float SampleHeight(float2 point) Parameters Type Name Description float2 point Returns Type Description float | Improve this Doc View Source SetBakedData(in Baked) Sets new baked data. This can be used to bake it outside this class. Declaration public void SetBakedData(in CrowdData.Baked baked) Parameters Type Name Description CrowdData.Baked baked"
  },
  "api/ProjectDawn.Navigation.CrowdDiscomfort.html": {
    "href": "api/ProjectDawn.Navigation.CrowdDiscomfort.html",
    "title": "Struct CrowdDiscomfort",
    "keywords": "Struct CrowdDiscomfort Discomfort volume of crowd agents. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdDiscomfort : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source Gradient The gradient of discomfort. The x-component represents the discomfort value at the center of the shape, and the y-component represents it at the edge Declaration public float2 Gradient Field Value Type Description float2 | Improve this Doc View Source Size The size of the discomfort. Declaration public float3 Size Field Value Type Description float3 | Improve this Doc View Source Type The shape of the discomfort. Declaration public CrowdDiscomfortType Type Field Value Type Description CrowdDiscomfortType Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static CrowdDiscomfort Default { get; } Property Value Type Description CrowdDiscomfort Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.CrowdDiscomfortSplat.html": {
    "href": "api/ProjectDawn.Navigation.CrowdDiscomfortSplat.html",
    "title": "Struct CrowdDiscomfortSplat",
    "keywords": "Struct CrowdDiscomfortSplat Implements ICleanupComponentData IComponentData IQueryTypeParameter IEquatable<CrowdDiscomfortSplat> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdDiscomfortSplat : ICleanupComponentData, IComponentData, IQueryTypeParameter, IEquatable<CrowdDiscomfortSplat> Fields | Improve this Doc View Source Gradient Declaration public float2 Gradient Field Value Type Description float2 | Improve this Doc View Source Position Declaration public float3 Position Field Value Type Description float3 | Improve this Doc View Source Size Declaration public float3 Size Field Value Type Description float3 | Improve this Doc View Source Type Declaration public CrowdDiscomfortType Type Field Value Type Description CrowdDiscomfortType Methods | Improve this Doc View Source Equals(CrowdDiscomfortSplat) Declaration public bool Equals(CrowdDiscomfortSplat other) Parameters Type Name Description CrowdDiscomfortSplat other Returns Type Description bool | Improve this Doc View Source Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(in CrowdDiscomfortSplat, in CrowdDiscomfortSplat) Declaration public static bool operator ==(in CrowdDiscomfortSplat lhs, in CrowdDiscomfortSplat rhs) Parameters Type Name Description CrowdDiscomfortSplat lhs CrowdDiscomfortSplat rhs Returns Type Description bool | Improve this Doc View Source operator !=(in CrowdDiscomfortSplat, in CrowdDiscomfortSplat) Declaration public static bool operator !=(in CrowdDiscomfortSplat lhs, in CrowdDiscomfortSplat rhs) Parameters Type Name Description CrowdDiscomfortSplat lhs CrowdDiscomfortSplat rhs Returns Type Description bool Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.CrowdDiscomfortType.html": {
    "href": "api/ProjectDawn.Navigation.CrowdDiscomfortType.html",
    "title": "Enum CrowdDiscomfortType",
    "keywords": "Enum CrowdDiscomfortType Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum CrowdDiscomfortType Fields Name Description Circle Quad"
  },
  "api/ProjectDawn.Navigation.CrowdDisplacementSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdDisplacementSystem.html",
    "title": "Struct CrowdDisplacementSystem",
    "keywords": "Struct CrowdDisplacementSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] [UpdateAfter(typeof(AgentColliderSystem))] public struct CrowdDisplacementSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdFlowSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdFlowSystem.html",
    "title": "Struct CrowdFlowSystem",
    "keywords": "Struct CrowdFlowSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(CrowdWorldSystem))] [UpdateAfter(typeof(CrowdGoalSystem))] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct CrowdFlowSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdFlows.html": {
    "href": "api/ProjectDawn.Navigation.CrowdFlows.html",
    "title": "Class CrowdFlows",
    "keywords": "Class CrowdFlows Inheritance object CrowdFlows Implements IComponentData IQueryTypeParameter IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public class CrowdFlows : IComponentData, IQueryTypeParameter, IDisposable Fields | Improve this Doc View Source Flows Declaration public List<CrowdFlow> Flows Field Value Type Description List<CrowdFlow> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IDisposable"
  },
  "api/ProjectDawn.Navigation.CrowdGoalSource.html": {
    "href": "api/ProjectDawn.Navigation.CrowdGoalSource.html",
    "title": "Enum CrowdGoalSource",
    "keywords": "Enum CrowdGoalSource Source from which crowd will get goal. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum CrowdGoalSource Fields Name Description AgentDestination Automatically gathered from crowd agents Destination. Script Manually set via scripting."
  },
  "api/ProjectDawn.Navigation.CrowdGoalSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdGoalSystem.html",
    "title": "Struct CrowdGoalSystem",
    "keywords": "Struct CrowdGoalSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct CrowdGoalSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdGroup.html": {
    "href": "api/ProjectDawn.Navigation.CrowdGroup.html",
    "title": "Struct CrowdGroup",
    "keywords": "Struct CrowdGroup Crowd group settings. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdGroup : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source CostWeights Controls the cost weights of constructing crowd flow fields. Declaration public CostWeights CostWeights Field Value Type Description CostWeights | Improve this Doc View Source GoalSource Source from which crowd will get goal. Declaration public CrowdGoalSource GoalSource Field Value Type Description CrowdGoalSource | Improve this Doc View Source Grounded Constraint agent to be on the surface. It is useful to disable then used with physics, to allow more freedom motion and precision. Declaration public bool Grounded Field Value Type Description bool | Improve this Doc View Source MappingRadius Maximum distance that will be used when attempting to map the agent's position or destination onto surface. The higher the value, the bigger the performance cost. Declaration public float MappingRadius Field Value Type Description float | Improve this Doc View Source Speed Crowd group speed settings. Declaration public Speed Speed Field Value Type Description Speed | Improve this Doc View Source Surface Entity that contains CrowdSurface and CrowdSurfaceWorld. Declaration public Entity Surface Field Value Type Description Entity Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static CrowdGroup Default { get; } Property Value Type Description CrowdGroup Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.CrowdGroupFlow.html": {
    "href": "api/ProjectDawn.Navigation.CrowdGroupFlow.html",
    "title": "Struct CrowdGroupFlow",
    "keywords": "Struct CrowdGroupFlow Crowd group runtime created ProjectDawn.ContinuumCrowds.CrowdFlow. Implements ICleanupComponentData IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdGroupFlow : ICleanupComponentData, IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Flow Crowd group runtime created ProjectDawn.ContinuumCrowds.CrowdFlow. Declaration public CrowdFlow Flow Field Value Type Description CrowdFlow Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.CrowdObstacle.html": {
    "href": "api/ProjectDawn.Navigation.CrowdObstacle.html",
    "title": "Struct CrowdObstacle",
    "keywords": "Struct CrowdObstacle Obstacle volume of crowd agents. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdObstacle : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Size The size of the obstacle. Declaration public float3 Size Field Value Type Description float3 | Improve this Doc View Source Type The shape of the obstacle. Declaration public CrowdObstacleType Type Field Value Type Description CrowdObstacleType Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static CrowdObstacle Default { get; } Property Value Type Description CrowdObstacle Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.CrowdObstacleSplat.html": {
    "href": "api/ProjectDawn.Navigation.CrowdObstacleSplat.html",
    "title": "Struct CrowdObstacleSplat",
    "keywords": "Struct CrowdObstacleSplat Implements ICleanupComponentData IComponentData IQueryTypeParameter IEquatable<CrowdObstacleSplat> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdObstacleSplat : ICleanupComponentData, IComponentData, IQueryTypeParameter, IEquatable<CrowdObstacleSplat> Fields | Improve this Doc View Source Position Declaration public float3 Position Field Value Type Description float3 | Improve this Doc View Source Size Declaration public float3 Size Field Value Type Description float3 | Improve this Doc View Source Type Declaration public CrowdObstacleType Type Field Value Type Description CrowdObstacleType Methods | Improve this Doc View Source Equals(CrowdObstacleSplat) Declaration public bool Equals(CrowdObstacleSplat other) Parameters Type Name Description CrowdObstacleSplat other Returns Type Description bool | Improve this Doc View Source Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(in CrowdObstacleSplat, in CrowdObstacleSplat) Declaration public static bool operator ==(in CrowdObstacleSplat lhs, in CrowdObstacleSplat rhs) Parameters Type Name Description CrowdObstacleSplat lhs CrowdObstacleSplat rhs Returns Type Description bool | Improve this Doc View Source operator !=(in CrowdObstacleSplat, in CrowdObstacleSplat) Declaration public static bool operator !=(in CrowdObstacleSplat lhs, in CrowdObstacleSplat rhs) Parameters Type Name Description CrowdObstacleSplat lhs CrowdObstacleSplat rhs Returns Type Description bool Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.CrowdObstacleType.html": {
    "href": "api/ProjectDawn.Navigation.CrowdObstacleType.html",
    "title": "Enum CrowdObstacleType",
    "keywords": "Enum CrowdObstacleType Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum CrowdObstacleType Fields Name Description Circle Quad"
  },
  "api/ProjectDawn.Navigation.CrowdSteeringSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdSteeringSystem.html",
    "title": "Struct CrowdSteeringSystem",
    "keywords": "Struct CrowdSteeringSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateAfter(typeof(CrowdFlowSystem))] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct CrowdSteeringSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdSurface.html": {
    "href": "api/ProjectDawn.Navigation.CrowdSurface.html",
    "title": "Struct CrowdSurface",
    "keywords": "Struct CrowdSurface Crowd surface settings. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdSurface : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Density Crowd group density settings. Declaration public Density Density Field Value Type Description Density | Improve this Doc View Source Height Cell count vertically. Declaration public int Height Field Value Type Description int | Improve this Doc View Source Layers Crowd surface settings. Declaration public NavigationLayers Layers Field Value Type Description NavigationLayers | Improve this Doc View Source Size World space size. Declaration public float2 Size Field Value Type Description float2 | Improve this Doc View Source Slope Crowd group slope settings. Declaration public Slope Slope Field Value Type Description Slope | Improve this Doc View Source Width Cell count horizontally. Declaration public int Width Field Value Type Description int Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static CrowdSurface Default { get; } Property Value Type Description CrowdSurface Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.CrowdSurfaceData.html": {
    "href": "api/ProjectDawn.Navigation.CrowdSurfaceData.html",
    "title": "Struct CrowdSurfaceData",
    "keywords": "Struct CrowdSurfaceData Crowd surface CrowdData. Implements ISharedComponentData IQueryTypeParameter IEquatable<CrowdSurfaceData> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdSurfaceData : ISharedComponentData, IQueryTypeParameter, IEquatable<CrowdSurfaceData> Fields | Improve this Doc View Source Data Crowd surface CrowdData. Declaration public CrowdData Data Field Value Type Description CrowdData Methods | Improve this Doc View Source Equals(CrowdSurfaceData) Crowd surface CrowdData. Declaration public bool Equals(CrowdSurfaceData other) Parameters Type Name Description CrowdSurfaceData other Returns Type Description bool | Improve this Doc View Source GetHashCode() Crowd surface CrowdData. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.CrowdSurfaceSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdSurfaceSystem.html",
    "title": "Struct CrowdSurfaceSystem",
    "keywords": "Struct CrowdSurfaceSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] [UpdateAfter(typeof(SceneSystemGroup))] public struct CrowdSurfaceSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdSurfaceWorld.html": {
    "href": "api/ProjectDawn.Navigation.CrowdSurfaceWorld.html",
    "title": "Struct CrowdSurfaceWorld",
    "keywords": "Struct CrowdSurfaceWorld Crowd surface runtime created ProjectDawn.ContinuumCrowds.CrowdWorld. Implements ICleanupComponentData IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct CrowdSurfaceWorld : ICleanupComponentData, IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source World Crowd surface runtime created ProjectDawn.ContinuumCrowds.CrowdWorld. Declaration public CrowdWorld World Field Value Type Description CrowdWorld Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.CrowdWorldSystem.html": {
    "href": "api/ProjectDawn.Navigation.CrowdWorldSystem.html",
    "title": "Struct CrowdWorldSystem",
    "keywords": "Struct CrowdWorldSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct CrowdWorldSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.CrowdWorlds.html": {
    "href": "api/ProjectDawn.Navigation.CrowdWorlds.html",
    "title": "Class CrowdWorlds",
    "keywords": "Class CrowdWorlds Inheritance object CrowdWorlds Implements IComponentData IQueryTypeParameter IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public class CrowdWorlds : IComponentData, IQueryTypeParameter, IDisposable Fields | Improve this Doc View Source Worlds Declaration public List<CrowdWorld> Worlds Field Value Type Description List<CrowdWorld> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IDisposable"
  },
  "api/ProjectDawn.Navigation.DepthSurface.html": {
    "href": "api/ProjectDawn.Navigation.DepthSurface.html",
    "title": "Struct DepthSurface",
    "keywords": "Struct DepthSurface Depth surface settings. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct DepthSurface : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Height Cell count vertically. Declaration public int Height Field Value Type Description int | Improve this Doc View Source Layers Depth surface settings. Declaration public LayerMask Layers Field Value Type Description LayerMask | Improve this Doc View Source Size World space size. Declaration public float3 Size Field Value Type Description float3 | Improve this Doc View Source Width Cell count horizontally. Declaration public int Width Field Value Type Description int Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static DepthSurface Default { get; } Property Value Type Description DepthSurface Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.DepthSurfaceSystem.html": {
    "href": "api/ProjectDawn.Navigation.DepthSurfaceSystem.html",
    "title": "Struct DepthSurfaceSystem",
    "keywords": "Struct DepthSurfaceSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] [UpdateAfter(typeof(SceneSystemGroup))] public struct DepthSurfaceSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.DepthSurfaceWorld.html": {
    "href": "api/ProjectDawn.Navigation.DepthSurfaceWorld.html",
    "title": "Struct DepthSurfaceWorld",
    "keywords": "Struct DepthSurfaceWorld Depth surface runtime created DepthWorld. Implements ICleanupComponentData IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct DepthSurfaceWorld : ICleanupComponentData, IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source World Depth surface runtime created DepthWorld. Declaration public DepthWorld World Field Value Type Description DepthWorld Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.DepthWorld.html": {
    "href": "api/ProjectDawn.Navigation.DepthWorld.html",
    "title": "Struct DepthWorld",
    "keywords": "Struct DepthWorld World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct DepthWorld : IDisposable Constructors | Improve this Doc View Source DepthWorld(int, int, NonUniformTransform, AllocatorHandle) World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public DepthWorld(int width, int height, NonUniformTransform transform, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int width int height NonUniformTransform transform AllocatorManager.AllocatorHandle allocator Properties | Improve this Doc View Source Height World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public int Height { get; } Property Value Type Description int | Improve this Doc View Source HeightField World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public NativeArray<float> HeightField { get; } Property Value Type Description NativeArray<float> | Improve this Doc View Source IsCreated World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public bool IsCreated { get; } Property Value Type Description bool | Improve this Doc View Source Length World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public int Length { get; } Property Value Type Description int | Improve this Doc View Source Transform World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public NonUniformTransform Transform { get; } Property Value Type Description NonUniformTransform | Improve this Doc View Source Width World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public int Width { get; } Property Value Type Description int Methods | Improve this Doc View Source Dispose() Releases all resources related to this container. Declaration public void Dispose() | Improve this Doc View Source GetCell(int) Converts index to cell. Declaration public int2 GetCell(int index) Parameters Type Name Description int index Returns Type Description int2 | Improve this Doc View Source GetCellIndex(int2) Converts cell to index. Declaration public int GetCellIndex(int2 cell) Parameters Type Name Description int2 cell Returns Type Description int | Improve this Doc View Source GetCellPosition(int2) Returns cell enter world space position. Declaration public float3 GetCellPosition(int2 cell) Parameters Type Name Description int2 cell Returns Type Description float3 | Improve this Doc View Source GetUnsafe() Returns unsafe pointer. Declaration public UnsafeDepthWorld* GetUnsafe() Returns Type Description UnsafeDepthWorld* | Improve this Doc View Source IsSphereOverlap(float3, float) World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public bool IsSphereOverlap(float3 center, float radius) Parameters Type Name Description float3 center float radius Returns Type Description bool | Improve this Doc View Source IsValidCell(int2) Returns true, if cell is within world bounds and has no obstacle. Declaration public bool IsValidCell(int2 cell) Parameters Type Name Description int2 cell Returns Type Description bool | Improve this Doc View Source IsValidQuad(float2, float2) Returns true, if quad area is not covered by obstacles. Declaration public bool IsValidQuad(float2 start, float2 end) Parameters Type Name Description float2 start float2 end Returns Type Description bool | Improve this Doc View Source IsValidQuad(float3, float3) Returns true, if quad area is not covered by obstacles. Declaration public bool IsValidQuad(float3 position, float3 size) Parameters Type Name Description float3 position float3 size Returns Type Description bool | Improve this Doc View Source MapLocation(float3, float) Maps constrained position that is within the navigatable surface. Declaration public float3 MapLocation(float3 position, float heightOffset = 0) Parameters Type Name Description float3 position Mapping center. float heightOffset Returns Type Description float3 Returns true, if such position exists. It can fail, if position is too far. | Improve this Doc View Source SampleHeight(float2) Returns interpolated height at local space point. Declaration public float SampleHeight(float2 point) Parameters Type Name Description float2 point Returns Type Description float | Improve this Doc View Source SampleHeight(float3) Returns interpolated height at world space position. Declaration public float SampleHeight(float3 point) Parameters Type Name Description float3 point Returns Type Description float | Improve this Doc View Source SetHeightField(ReadOnlySpan<float>) World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. Declaration public void SetHeightField(ReadOnlySpan<float> heights) Parameters Type Name Description ReadOnlySpan<float> heights | Improve this Doc View Source TryGetCell(float3, out int2) Returns cell, if it is valid. Declaration public bool TryGetCell(float3 position, out int2 cell) Parameters Type Name Description float3 position int2 cell Returns Type Description bool Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.DepthWorlds.html": {
    "href": "api/ProjectDawn.Navigation.DepthWorlds.html",
    "title": "Struct DepthWorlds",
    "keywords": "Struct DepthWorlds Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct DepthWorlds : IComponentData, IQueryTypeParameter Methods | Improve this Doc View Source AddWorld(DepthWorld) Declaration public void AddWorld(DepthWorld world) Parameters Type Name Description DepthWorld world | Improve this Doc View Source RemoveWorld(DepthWorld) Declaration public void RemoveWorld(DepthWorld world) Parameters Type Name Description DepthWorld world | Improve this Doc View Source TryGetWorld(float3, out DepthWorld) Declaration public bool TryGetWorld(float3 position, out DepthWorld world) Parameters Type Name Description float3 position DepthWorld world Returns Type Description bool Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.DrawGizmos.html": {
    "href": "api/ProjectDawn.Navigation.DrawGizmos.html",
    "title": "Struct DrawGizmos",
    "keywords": "Struct DrawGizmos Tag for drawing gizmos. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct DrawGizmos : IComponentData, IQueryTypeParameter Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.Editor.AgentAvoidGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.AgentAvoidGizmosSystem.html",
    "title": "Struct AgentAvoidGizmosSystem",
    "keywords": "Struct AgentAvoidGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] [UpdateBefore(typeof(AgentSonarAvoidSystem))] public struct AgentAvoidGizmosSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.AgentColliderGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.AgentColliderGizmosSystem.html",
    "title": "Struct AgentColliderGizmosSystem",
    "keywords": "Struct AgentColliderGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] [UpdateBefore(typeof(AgentColliderSystem))] public struct AgentColliderGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.AgentSmartStopGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.AgentSmartStopGizmosSystem.html",
    "title": "Struct AgentSmartStopGizmosSystem",
    "keywords": "Struct AgentSmartStopGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] public struct AgentSmartStopGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.AgentSpatilaPartitioningGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.AgentSpatilaPartitioningGizmosSystem.html",
    "title": "Struct AgentSpatilaPartitioningGizmosSystem",
    "keywords": "Struct AgentSpatilaPartitioningGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] [UpdateAfter(typeof(NavMeshBoundarySystem))] public struct AgentSpatilaPartitioningGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.AgentsNavigationSettingsEditor.html": {
    "href": "api/ProjectDawn.Navigation.Editor.AgentsNavigationSettingsEditor.html",
    "title": "Class AgentsNavigationSettingsEditor",
    "keywords": "Class AgentsNavigationSettingsEditor Inheritance object Object ScriptableObject Editor AgentsNavigationSettingsEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [CustomEditor(typeof(AgentsNavigationSettings))] public class AgentsNavigationSettingsEditor : Editor Methods | Improve this Doc View Source OnInspectorGUI() Implement this function to make a custom inspector. Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/ProjectDawn.Navigation.Editor.CostWeightDrawer.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CostWeightDrawer.html",
    "title": "Class CostWeightDrawer",
    "keywords": "Class CostWeightDrawer Inheritance object GUIDrawer PropertyDrawer CostWeightDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [CustomPropertyDrawer(typeof(CostWeights))] public class CostWeightDrawer : PropertyDrawer Methods | Improve this Doc View Source GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Returns Type Description float The height in pixels. Overrides UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/ProjectDawn.Navigation.Editor.CrowdGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CrowdGizmosSystem.html",
    "title": "Struct CrowdGizmosSystem",
    "keywords": "Struct CrowdGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] [UpdateAfter(typeof(CrowdFlowSystem))] public struct CrowdGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.CrowdGroupDrawGizmos.Mode.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CrowdGroupDrawGizmos.Mode.html",
    "title": "Enum CrowdGroupDrawGizmos.Mode",
    "keywords": "Enum CrowdGroupDrawGizmos.Mode Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public enum CrowdGroupDrawGizmos.Mode Fields Name Description Goal Potential Speed Velocity"
  },
  "api/ProjectDawn.Navigation.Editor.CrowdGroupDrawGizmos.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CrowdGroupDrawGizmos.html",
    "title": "Struct CrowdGroupDrawGizmos",
    "keywords": "Struct CrowdGroupDrawGizmos Tag for drawing gizmos. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public struct CrowdGroupDrawGizmos : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Tag for drawing gizmos. Declaration public CrowdGroupDrawGizmos.Mode Value Field Value Type Description CrowdGroupDrawGizmos.Mode Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.Editor.CrowdSurfaceDrawGizmos.Mode.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CrowdSurfaceDrawGizmos.Mode.html",
    "title": "Enum CrowdSurfaceDrawGizmos.Mode",
    "keywords": "Enum CrowdSurfaceDrawGizmos.Mode Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public enum CrowdSurfaceDrawGizmos.Mode Fields Name Description AverageVelocity Density Discomfort Height HeightGradient"
  },
  "api/ProjectDawn.Navigation.Editor.CrowdSurfaceDrawGizmos.html": {
    "href": "api/ProjectDawn.Navigation.Editor.CrowdSurfaceDrawGizmos.html",
    "title": "Struct CrowdSurfaceDrawGizmos",
    "keywords": "Struct CrowdSurfaceDrawGizmos Tag for drawing gizmos. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public struct CrowdSurfaceDrawGizmos : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Tag for drawing gizmos. Declaration public CrowdSurfaceDrawGizmos.Mode Value Field Value Type Description CrowdSurfaceDrawGizmos.Mode Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.Editor.DepthGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.DepthGizmosSystem.html",
    "title": "Struct DepthGizmosSystem",
    "keywords": "Struct DepthGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct DepthGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.NavMeshBoundaryGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.NavMeshBoundaryGizmosSystem.html",
    "title": "Struct NavMeshBoundaryGizmosSystem",
    "keywords": "Struct NavMeshBoundaryGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] [UpdateAfter(typeof(NavMeshBoundarySystem))] public struct NavMeshBoundaryGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.NavMeshNodesGizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.Editor.NavMeshNodesGizmosSystem.html",
    "title": "Struct NavMeshNodesGizmosSystem",
    "keywords": "Struct NavMeshNodesGizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] [UpdateAfter(typeof(NavMeshPathSystem))] public struct NavMeshNodesGizmosSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Editor.RangeDrawer.html": {
    "href": "api/ProjectDawn.Navigation.Editor.RangeDrawer.html",
    "title": "Class RangeDrawer",
    "keywords": "Class RangeDrawer Inheritance object GUIDrawer PropertyDrawer RangeDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.GetPropertyHeight(SerializedProperty, GUIContent) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax [CustomPropertyDrawer(typeof(Range))] public class RangeDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property. Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/ProjectDawn.Navigation.Editor.ScriptingDefinePopupField.html": {
    "href": "api/ProjectDawn.Navigation.Editor.ScriptingDefinePopupField.html",
    "title": "Class ScriptingDefinePopupField",
    "keywords": "Class ScriptingDefinePopupField Inheritance object ScriptingDefinePopupField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public static class ScriptingDefinePopupField Methods | Improve this Doc View Source Draw(GUIContent, string[], string[]) Declaration public static void Draw(GUIContent label, string[] values, string[] names) Parameters Type Name Description GUIContent label string[] values string[] names"
  },
  "api/ProjectDawn.Navigation.Editor.ScriptingDefineToggleField.html": {
    "href": "api/ProjectDawn.Navigation.Editor.ScriptingDefineToggleField.html",
    "title": "Class ScriptingDefineToggleField",
    "keywords": "Class ScriptingDefineToggleField Inheritance object ScriptingDefineToggleField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation.Editor Assembly: ProjectDawn.Navigation.Editor.dll Syntax public static class ScriptingDefineToggleField Methods | Improve this Doc View Source Draw(GUIContent, string) Declaration public static bool Draw(GUIContent label, string defineSymbol) Parameters Type Name Description GUIContent label string defineSymbol Returns Type Description bool | Improve this Doc View Source DrawInverted(GUIContent, string) Declaration public static bool DrawInverted(GUIContent label, string defineSymbol) Parameters Type Name Description GUIContent label string defineSymbol Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.Editor.html": {
    "href": "api/ProjectDawn.Navigation.Editor.html",
    "title": "Namespace ProjectDawn.Navigation.Editor",
    "keywords": "Namespace ProjectDawn.Navigation.Editor Classes AgentsNavigationSettingsEditor CostWeightDrawer RangeDrawer ScriptingDefinePopupField ScriptingDefineToggleField Structs AgentAvoidGizmosSystem AgentColliderGizmosSystem AgentSmartStopGizmosSystem AgentSpatilaPartitioningGizmosSystem CrowdGizmosSystem CrowdGroupDrawGizmos Tag for drawing gizmos. CrowdSurfaceDrawGizmos Tag for drawing gizmos. DepthGizmosSystem NavMeshBoundaryGizmosSystem NavMeshNodesGizmosSystem Enums CrowdGroupDrawGizmos.Mode CrowdSurfaceDrawGizmos.Mode"
  },
  "api/ProjectDawn.Navigation.FlockEntity.html": {
    "href": "api/ProjectDawn.Navigation.FlockEntity.html",
    "title": "Struct FlockEntity",
    "keywords": "Struct FlockEntity Single entity of the FlockGroup. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct FlockEntity : IBufferElementData Fields | Improve this Doc View Source Value Single entity of the FlockGroup. Declaration public Entity Value Field Value Type Description Entity Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Navigation.FlockGroup.html": {
    "href": "api/ProjectDawn.Navigation.FlockGroup.html",
    "title": "Struct FlockGroup",
    "keywords": "Struct FlockGroup Agent group for flocking. Modifies desired direction to match flock direction. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct FlockGroup : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Alignment Scaler of alignment. Declaration public float Alignment Field Value Type Description float | Improve this Doc View Source AverageDirection Average direction of the flock. Declaration public float3 AverageDirection Field Value Type Description float3 | Improve this Doc View Source AveragePositions Average position of the flock. Declaration public float3 AveragePositions Field Value Type Description float3 | Improve this Doc View Source Cohesion Scaler of cohesion. Declaration public float Cohesion Field Value Type Description float | Improve this Doc View Source LeaderEntity Leader of the flock. Declaration public Entity LeaderEntity Field Value Type Description Entity | Improve this Doc View Source Radius Maximum radius of the flock from leader. Declaration public float Radius Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.FlockGroupSystem.html": {
    "href": "api/ProjectDawn.Navigation.FlockGroupSystem.html",
    "title": "Struct FlockGroupSystem",
    "keywords": "Struct FlockGroupSystem System that calculates flock grouo average position and direction of flock entities. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentForceSystemGroup))] public struct FlockGroupSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration [BurstCompile] public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.GeometryUtils.html": {
    "href": "api/ProjectDawn.Navigation.GeometryUtils.html",
    "title": "Class GeometryUtils",
    "keywords": "Class GeometryUtils Inheritance object GeometryUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public class GeometryUtils Methods | Improve this Doc View Source ClosestPointOnSegment(float3, float3, float3) Declaration public static float3 ClosestPointOnSegment(float3 from, float3 to, float3 point) Parameters Type Name Description float3 from float3 to float3 point Returns Type Description float3 | Improve this Doc View Source SegmentSegmentCPA(out float3, out float3, float3, float3, float3, float3) Declaration public static bool SegmentSegmentCPA(out float3 c0, out float3 c1, float3 p0, float3 p1, float3 q0, float3 q1) Parameters Type Name Description float3 c0 float3 c1 float3 p0 float3 p1 float3 q0 float3 q1 Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.GiveUpStop.html": {
    "href": "api/ProjectDawn.Navigation.GiveUpStop.html",
    "title": "Struct GiveUpStop",
    "keywords": "Struct GiveUpStop This option allows the agent to make smarter stop decisions than simply deciding if it is stuck. Every time the agent bumps into a standing agent, it will progress towards stopping. Additionally, by not bumping into one, it will recover from stopping. Once the progress value is met, the agent will stop. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct GiveUpStop Fields | Improve this Doc View Source Enabled This option allows the agent to make smarter stop decisions than simply deciding if it is stuck. Every time the agent bumps into a standing agent, it will progress towards stopping. Additionally, by not bumping into one, it will recover from stopping. Once the progress value is met, the agent will stop. Declaration public bool Enabled Field Value Type Description bool | Improve this Doc View Source FatigueSpeed The speed at which the agent progresses towards stopping. The higher the value, the faster it will stop. Declaration [Tooltip(\"The speed at which the agent progresses towards stopping. The higher the value, the faster it will stop.\")] [Range(0, 1)] public float FatigueSpeed Field Value Type Description float | Improve this Doc View Source RecoverySpeed The speed at which the agent recovers from stopping. The lower the value, the less tolerant it will be towards getting stuck. Declaration [Tooltip(\"The speed at which the agent recovers from stopping. The lower the value, the less tolerant it will be towards getting stuck.\")] [Range(0, 1)] public float RecoverySpeed Field Value Type Description float Properties | Improve this Doc View Source Default Returns the default configuration. Declaration public static GiveUpStop Default { get; } Property Value Type Description GiveUpStop"
  },
  "api/ProjectDawn.Navigation.GiveUpStopTimer.html": {
    "href": "api/ProjectDawn.Navigation.GiveUpStopTimer.html",
    "title": "Struct GiveUpStopTimer",
    "keywords": "Struct GiveUpStopTimer For tracking give up progress. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct GiveUpStopTimer : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Destination Destination towards which it will track give up progress. Declaration public float3 Destination Field Value Type Description float3 | Improve this Doc View Source Progress Current progress towards stopping. Once it is reached, it will stop. Declaration public float Progress Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.GizmosCommandBuffer.html": {
    "href": "api/ProjectDawn.Navigation.GizmosCommandBuffer.html",
    "title": "Struct GizmosCommandBuffer",
    "keywords": "Struct GizmosCommandBuffer Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct GizmosCommandBuffer : IDisposable Constructors | Improve this Doc View Source GizmosCommandBuffer(Allocator) Declaration public GizmosCommandBuffer(Allocator allocator) Parameters Type Name Description Allocator allocator Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DrawAAConvexPolygon(NativeArray<float3>, Color, bool) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawAAConvexPolygon(NativeArray<float3> vertices, Color color, bool zTest = false) Parameters Type Name Description NativeArray<float3> vertices Color color bool zTest | Improve this Doc View Source DrawArrow(float3, float3, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawArrow(float3 origin, float3 direction, float size, Color color) Parameters Type Name Description float3 origin float3 direction float size Color color | Improve this Doc View Source DrawField(NativeArray<float>, NativeArray<int>, NativeArray<Color>, int, int, float4x4, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawField(NativeArray<float> heightField, NativeArray<int> obstacleField, NativeArray<Color> colorField, int width, int height, float4x4 transform, Color color) Parameters Type Name Description NativeArray<float> heightField NativeArray<int> obstacleField NativeArray<Color> colorField int width int height float4x4 transform Color color | Improve this Doc View Source DrawLine(float3, float3, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawLine(float3 from, float3 to, Color color) Parameters Type Name Description float3 from float3 to Color color | Improve this Doc View Source DrawNumber(float3, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawNumber(float3 position, float value, Color color) Parameters Type Name Description float3 position float value Color color | Improve this Doc View Source DrawQuad(float3, float3, float3, float3, Color, bool) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawQuad(float3 a, float3 b, float3 c, float3 d, Color color, bool zTest = false) Parameters Type Name Description float3 a float3 b float3 c float3 d Color color bool zTest | Improve this Doc View Source DrawSolidArc(float3, float3, float3, float, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawSolidArc(float3 center, float3 normal, float3 from, float angle, float radius, Color color) Parameters Type Name Description float3 center float3 normal float3 from float angle float radius Color color | Improve this Doc View Source DrawSolidDisc(float3, float3, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawSolidDisc(float3 center, float3 normal, float radius, Color color) Parameters Type Name Description float3 center float3 normal float radius Color color | Improve this Doc View Source DrawWireArc(float3, float3, float3, float, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawWireArc(float3 center, float3 normal, float3 from, float angle, float radius, Color color) Parameters Type Name Description float3 center float3 normal float3 from float angle float radius Color color | Improve this Doc View Source DrawWireBox(float3, float3, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawWireBox(float3 position, float3 size, Color color) Parameters Type Name Description float3 position float3 size Color color | Improve this Doc View Source DrawWireSphere(float3, float, Color) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawWireSphere(float3 position, float radius, Color color) Parameters Type Name Description float3 position float radius Color color | Improve this Doc View Source Execute() Declaration public void Execute() Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.GizmosSystem.Singleton.html": {
    "href": "api/ProjectDawn.Navigation.GizmosSystem.Singleton.html",
    "title": "Struct GizmosSystem.Singleton",
    "keywords": "Struct GizmosSystem.Singleton Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct GizmosSystem.Singleton : IComponentData, IQueryTypeParameter Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source CreateCommandBuffer() Declaration public GizmosCommandBuffer CreateCommandBuffer() Returns Type Description GizmosCommandBuffer | Improve this Doc View Source ExecuteCommandBuffers() Declaration public void ExecuteCommandBuffers() Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.GizmosSystem.html": {
    "href": "api/ProjectDawn.Navigation.GizmosSystem.html",
    "title": "Struct GizmosSystem",
    "keywords": "Struct GizmosSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentSystemGroup))] [UpdateBefore(typeof(AgentSeekingSystemGroup))] public struct GizmosSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration [BurstCompile] public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration [BurstCompile] public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Grounded.html": {
    "href": "api/ProjectDawn.Navigation.Grounded.html",
    "title": "Enum Grounded",
    "keywords": "Enum Grounded Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum Grounded : byte Fields Name Description None XYZ XZ"
  },
  "api/ProjectDawn.Navigation.HiveMindStop.html": {
    "href": "api/ProjectDawn.Navigation.HiveMindStop.html",
    "title": "Struct HiveMindStop",
    "keywords": "Struct HiveMindStop This option allows agent to do smarter stop decision then moving in group. It works under assumption that by reaching nearby agent that is already idle and have similar destination it can stop as destination is reached. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct HiveMindStop Fields | Improve this Doc View Source Enabled This option allows agent to do smarter stop decision then moving in group. It works under assumption that by reaching nearby agent that is already idle and have similar destination it can stop as destination is reached. Declaration public bool Enabled Field Value Type Description bool | Improve this Doc View Source MinDistance The minimum distance from the destination at which the hive mind stop behavior becomes active. The agent's body remaining distance is used to determine this value. Declaration [Tooltip(\"The minimum distance from the destination at which the hive mind stop behavior becomes active. The agent's body remaining distance is used to determine this value.\")] public float MinDistance Field Value Type Description float | Improve this Doc View Source Radius Radius at which agent will assume similarity of the distance. Declaration [Tooltip(\"Radius at which agent will assume similarity of the distance.\")] public float Radius Field Value Type Description float Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static HiveMindStop Default { get; } Property Value Type Description HiveMindStop"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentAuthoring.html",
    "title": "Class AgentAuthoring",
    "keywords": "Class AgentAuthoring Main component of agent that enables motion. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour AgentAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Agent\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/agent.html\")] public class AgentAuthoring : EntityBehaviour Fields | Improve this Doc View Source Acceleration Main component of agent that enables motion. Declaration [SerializeField] protected float Acceleration Field Value Type Description float | Improve this Doc View Source AngularSpeed Main component of agent that enables motion. Declaration [SerializeField] protected float AngularSpeed Field Value Type Description float | Improve this Doc View Source AutoBreaking Main component of agent that enables motion. Declaration [SerializeField] protected bool AutoBreaking Field Value Type Description bool | Improve this Doc View Source Speed Main component of agent that enables motion. Declaration [SerializeField] protected float Speed Field Value Type Description float | Improve this Doc View Source StoppingDistance Main component of agent that enables motion. Declaration [SerializeField] protected float StoppingDistance Field Value Type Description float | Improve this Doc View Source m_Layers Main component of agent that enables motion. Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source Body AgentBody component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentBody Body { get; } Property Value Type Description AgentBody | Improve this Doc View Source DefaultAgent Returns default component of Agent. Declaration public Agent DefaultAgent { get; } Property Value Type Description Agent | Improve this Doc View Source DefaultBody Returns default component of AgentBody. Declaration public AgentBody DefaultBody { get; } Property Value Type Description AgentBody | Improve this Doc View Source DefaultLocomotion Returns default component of AgentLocomotion. Declaration public AgentLocomotion DefaultLocomotion { get; } Property Value Type Description AgentLocomotion | Improve this Doc View Source EntityAgent Agent component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public Agent EntityAgent { get; set; } Property Value Type Description Agent | Improve this Doc View Source EntityBody AgentBody component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentBody EntityBody { get; set; } Property Value Type Description AgentBody | Improve this Doc View Source EntityLocomotion AgentLocomotion component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentLocomotion EntityLocomotion { get; set; } Property Value Type Description AgentLocomotion | Improve this Doc View Source HasEntityBody Returns true if AgentAuthoring entity has AgentBody. Declaration public bool HasEntityBody { get; } Property Value Type Description bool | Improve this Doc View Source HasEntityLocomotion Returns true if AgentAuthoring entity has AgentLocomotion. Declaration public bool HasEntityLocomotion { get; } Property Value Type Description bool Methods | Improve this Doc View Source SetDestination(float3) Sets or updates the destination thus triggering the calculation for a new path. Calling this method is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public void SetDestination(float3 target) Parameters Type Name Description float3 target | Improve this Doc View Source SetDestinationDeferred(float3) Sets or updates the destination thus triggering the calculation for a new path. This call is deferred and destination will only changed later in the frame. Declaration public void SetDestinationDeferred(float3 destination) Parameters Type Name Description float3 destination | Improve this Doc View Source Stop() Stop agent movement. Calling this method is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public void Stop()"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentAvoidAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentAvoidAuthoring.html",
    "title": "Class AgentAvoidAuthoring",
    "keywords": "Class AgentAvoidAuthoring Agent avoidance of nearby agents. Inheritance object Object Component Behaviour MonoBehaviour AgentAvoidAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Sonar Avoid\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/avoidance/sonar-avoidance.html\")] public class AgentAvoidAuthoring : MonoBehaviour Fields | Improve this Doc View Source Angle Agent avoidance of nearby agents. Declaration [SerializeField] [Range(0, 360)] protected float Angle Field Value Type Description float | Improve this Doc View Source BlockedStop Agent avoidance of nearby agents. Declaration [SerializeField] protected bool BlockedStop Field Value Type Description bool | Improve this Doc View Source MaxAngle Agent avoidance of nearby agents. Declaration [SerializeField] [Range(0, 360)] protected float MaxAngle Field Value Type Description float | Improve this Doc View Source Mode Agent avoidance of nearby agents. Declaration [SerializeField] protected SonarAvoidMode Mode Field Value Type Description SonarAvoidMode | Improve this Doc View Source Radius Agent avoidance of nearby agents. Declaration [SerializeField] protected float Radius Field Value Type Description float | Improve this Doc View Source UseWalls Agent avoidance of nearby agents. Declaration [SerializeField] protected bool UseWalls Field Value Type Description bool | Improve this Doc View Source m_Layers Agent avoidance of nearby agents. Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source DefaultAvoid Returns default component of AgentSonarAvoid. Declaration public AgentSonarAvoid DefaultAvoid { get; } Property Value Type Description AgentSonarAvoid | Improve this Doc View Source EntityAvoid AgentSonarAvoid component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentSonarAvoid EntityAvoid { get; set; } Property Value Type Description AgentSonarAvoid | Improve this Doc View Source HasEntityAvoid Returns true if AgentAuthoring entity has AgentSonarAvoid. Declaration public bool HasEntityAvoid { get; } Property Value Type Description bool | Improve this Doc View Source Sonar AgentSonarAvoid component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentSonarAvoid Sonar { get; } Property Value Type Description AgentSonarAvoid"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentCircleShapeAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentCircleShapeAuthoring.html",
    "title": "Class AgentCircleShapeAuthoring",
    "keywords": "Class AgentCircleShapeAuthoring Agent circle shape. Inheritance object Object Component Behaviour MonoBehaviour AgentCircleShapeAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Circle Shape\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/shape.html\")] public class AgentCircleShapeAuthoring : MonoBehaviour Fields | Improve this Doc View Source Radius Agent circle shape. Declaration [SerializeField] protected float Radius Field Value Type Description float Properties | Improve this Doc View Source DefaultShape Returns default component of AgentShape. Declaration public AgentShape DefaultShape { get; } Property Value Type Description AgentShape | Improve this Doc View Source EntityShape AgentShape component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentShape EntityShape { get; set; } Property Value Type Description AgentShape | Improve this Doc View Source HasEntityShape Returns true if AgentAuthoring entity has AgentShape. Declaration public bool HasEntityShape { get; } Property Value Type Description bool | Improve this Doc View Source Shape AgentShape component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentShape Shape { get; } Property Value Type Description AgentShape"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentColliderAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentColliderAuthoring.html",
    "title": "Class AgentColliderAuthoring",
    "keywords": "Class AgentColliderAuthoring Enables collision with other agents. Inheritance object Object Component Behaviour MonoBehaviour AgentColliderAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Collider\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/collider.html\")] public class AgentColliderAuthoring : MonoBehaviour Fields | Improve this Doc View Source m_Layers Enables collision with other agents. Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source Collider AgentCollider component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentCollider Collider { get; } Property Value Type Description AgentCollider | Improve this Doc View Source DefaultCollider Returns default component of AgentCollider. Declaration public AgentCollider DefaultCollider { get; } Property Value Type Description AgentCollider | Improve this Doc View Source EntityCollider AgentCollider component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentCollider EntityCollider { get; set; } Property Value Type Description AgentCollider"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentCrowdPathingAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentCrowdPathingAuthoring.html",
    "title": "Class AgentCrowdPathingAuthoring",
    "keywords": "Class AgentCrowdPathingAuthoring Agent uses Continuum Crowd for pathfinding in specific CrowdGroupAuthoring. Inheritance object Object Component Behaviour MonoBehaviour AgentCrowdPathingAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Crowd/Agent Crowd Pathing\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/pathing/crowds.html\")] public class AgentCrowdPathingAuthoring : MonoBehaviour Properties | Improve this Doc View Source DefaultPath Returns default component of AgentSonarAvoid. Declaration public AgentCrowdPath DefaultPath { get; } Property Value Type Description AgentCrowdPath | Improve this Doc View Source EntityPath AgentCrowdPath component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentCrowdPath EntityPath { get; set; } Property Value Type Description AgentCrowdPath | Improve this Doc View Source Group Current crowds group this agent belongs too. Groups always share same destination. Agents in null crowds group will skip pathing. Declaration public CrowdGroupAuthoring Group { get; set; } Property Value Type Description CrowdGroupAuthoring | Improve this Doc View Source HasEntityPath Returns true if AgentAuthoring entity has AgentCrowdPath. Declaration public bool HasEntityPath { get; } Property Value Type Description bool"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentCylinderShapeAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentCylinderShapeAuthoring.html",
    "title": "Class AgentCylinderShapeAuthoring",
    "keywords": "Class AgentCylinderShapeAuthoring Agent cylindre shape. Inheritance object Object Component Behaviour MonoBehaviour AgentCylinderShapeAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Cylinder Shape\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/shape.html\")] public class AgentCylinderShapeAuthoring : MonoBehaviour Fields | Improve this Doc View Source Height Agent cylindre shape. Declaration [SerializeField] protected float Height Field Value Type Description float | Improve this Doc View Source Radius Agent cylindre shape. Declaration [SerializeField] protected float Radius Field Value Type Description float Properties | Improve this Doc View Source DefaultShape Returns default component of AgentShape. Declaration public AgentShape DefaultShape { get; } Property Value Type Description AgentShape | Improve this Doc View Source EntityShape AgentShape component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentShape EntityShape { get; set; } Property Value Type Description AgentShape | Improve this Doc View Source HasEntityShape Returns true if AgentAuthoring entity has AgentShape. Declaration public bool HasEntityShape { get; } Property Value Type Description bool | Improve this Doc View Source Shape AgentShape component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentShape Shape { get; } Property Value Type Description AgentShape"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentFlockAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentFlockAuthoring.html",
    "title": "Class AgentFlockAuthoring",
    "keywords": "Class AgentFlockAuthoring Inheritance object Object Component Behaviour MonoBehaviour AgentFlockAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Agent Flock\")] public class AgentFlockAuthoring : MonoBehaviour Fields | Improve this Doc View Source m_AlignmentWeight Declaration [SerializeField] [Range(0, 1)] protected float m_AlignmentWeight Field Value Type Description float | Improve this Doc View Source m_CohesionWeight Declaration [SerializeField] [Range(0, 1)] protected float m_CohesionWeight Field Value Type Description float | Improve this Doc View Source m_Layers Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers | Improve this Doc View Source m_Radius Declaration [SerializeField] protected float m_Radius Field Value Type Description float Properties | Improve this Doc View Source DefaulFlock Returns default component of AgentFlock. Declaration public AgentFlock DefaulFlock { get; } Property Value Type Description AgentFlock | Improve this Doc View Source Flock AgentFlock component of this Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentFlock Flock { get; } Property Value Type Description AgentFlock"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentGroundingAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentGroundingAuthoring.html",
    "title": "Class AgentGroundingAuthoring",
    "keywords": "Class AgentGroundingAuthoring Enables collisio with other agents. Inheritance object Object Component Behaviour MonoBehaviour AgentGroundingAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Grounding\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/grounding.html\")] public class AgentGroundingAuthoring : MonoBehaviour Fields | Improve this Doc View Source m_Layers Enables collisio with other agents. Declaration [SerializeField] protected LayerMask m_Layers Field Value Type Description LayerMask | Improve this Doc View Source m_Mode Enables collisio with other agents. Declaration [SerializeField] protected AgentGroundingMode m_Mode Field Value Type Description AgentGroundingMode Properties | Improve this Doc View Source Grounding AgentGrounding component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentGrounding Grounding { get; } Property Value Type Description AgentGrounding | Improve this Doc View Source Layers Enables collisio with other agents. Declaration public LayerMask Layers { get; set; } Property Value Type Description LayerMask | Improve this Doc View Source Mode Enables collisio with other agents. Declaration public AgentGroundingMode Mode { get; set; } Property Value Type Description AgentGroundingMode"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentGroundingMode.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentGroundingMode.html",
    "title": "Enum AgentGroundingMode",
    "keywords": "Enum AgentGroundingMode Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public enum AgentGroundingMode Fields Name Description Body BodyAndForce"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentMotionType.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentMotionType.html",
    "title": "Enum AgentMotionType",
    "keywords": "Enum AgentMotionType Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public enum AgentMotionType Fields Name Description DefaultLocomotion Agent is dynamic. It's entity will have have AgentBody and AgentLocomotion components. Dynamic Agent is dynamic. It's entity will not have AgentSteering component. Static Agent is static. It's entity will not have AgentBody and AgentSteering components."
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentNavMeshAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentNavMeshAuthoring.html",
    "title": "Class AgentNavMeshAuthoring",
    "keywords": "Class AgentNavMeshAuthoring Agent uses NavMesh for pathfinding. Inheritance object Object Component Behaviour MonoBehaviour AgentNavMeshAuthoring Implements INavMeshWallProvider Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent NavMesh Pathing\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/pathing/nav-mesh.html\")] public class AgentNavMeshAuthoring : MonoBehaviour, INavMeshWallProvider Fields | Improve this Doc View Source AgentTypeId Agent uses NavMesh for pathfinding. Declaration [SerializeField] protected int AgentTypeId Field Value Type Description int | Improve this Doc View Source AreaMask Agent uses NavMesh for pathfinding. Declaration [SerializeField] protected int AreaMask Field Value Type Description int | Improve this Doc View Source AutoRepath Agent uses NavMesh for pathfinding. Declaration [SerializeField] protected bool AutoRepath Field Value Type Description bool | Improve this Doc View Source MappingExtent Agent uses NavMesh for pathfinding. Declaration [SerializeField] protected float3 MappingExtent Field Value Type Description float3 | Improve this Doc View Source m_Grounded Agent uses NavMesh for pathfinding. Declaration [SerializeField] protected Grounded m_Grounded Field Value Type Description Grounded Properties | Improve this Doc View Source DefaultPath Returns default component of NavMeshPath. Declaration public NavMeshPath DefaultPath { get; } Property Value Type Description NavMeshPath | Improve this Doc View Source EntityNodes NavMeshNode component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration [Obsolete(\"EntityNodes nodes is obsolete, please use Nodes\")] public DynamicBuffer<NavMeshNode> EntityNodes { get; } Property Value Type Description DynamicBuffer<NavMeshNode> | Improve this Doc View Source EntityPath NavMeshPath component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public NavMeshPath EntityPath { get; set; } Property Value Type Description NavMeshPath | Improve this Doc View Source HasEntityPath Returns true if AgentAuthoring entity has NavMeshPath. Declaration public bool HasEntityPath { get; } Property Value Type Description bool | Improve this Doc View Source NavMeshLinkTraversal Agent uses NavMesh for pathfinding. Declaration public ref NavMeshLinkTraversal NavMeshLinkTraversal { get; } Property Value Type Description NavMeshLinkTraversal | Improve this Doc View Source Nodes NavMeshNode component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public DynamicBuffer<NavMeshNode> Nodes { get; } Property Value Type Description DynamicBuffer<NavMeshNode> | Improve this Doc View Source OnLinkTraversal NavMeshLinkTraversal component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public bool OnLinkTraversal { get; set; } Property Value Type Description bool | Improve this Doc View Source Path NavMeshPath component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref NavMeshPath Path { get; } Property Value Type Description NavMeshPath | Improve this Doc View Source SeekLinkTraversal Agent uses NavMesh for pathfinding. Declaration public ref LinkTraversalSeek SeekLinkTraversal { get; } Property Value Type Description LinkTraversalSeek Methods | Improve this Doc View Source CreateCorners(int, Allocator) Creates structure for accessing the corners of current agent path. Declaration public NavMeshCorners CreateCorners(int capacity, Allocator allocator = Allocator.Persistent) Parameters Type Name Description int capacity Allocator allocator Returns Type Description NavMeshCorners | Improve this Doc View Source GetAreaCost(int) Gets the cost for path calculation when crossing area of a particular type. The cost of a path is the amount of \"difficulty\" involved in calculating it - the shortest path may not be the best if it passes over difficult ground, such as mud, snow, etc.Different types of areas are denoted by navmesh areas in Unity.The cost of a particular area is given in cost units per distance unit.Note that the cost of a path applies to the pathfinding only and does not automatically affect the movement speed of the agent when following the path.Indeed, the path's cost may denote other factors such as danger (safe but long path through a minefield) or visibility (long path that keeps a character in the shadows) Declaration public float GetAreaCost(int areaIndex) Parameters Type Name Description int areaIndex Returns Type Description float | Improve this Doc View Source SetAreaCost(int, float) Sets the cost for traversing over areas of the area type. Declaration public void SetAreaCost(int areaIndex, float areaCost) Parameters Type Name Description int areaIndex float areaCost Implements INavMeshWallProvider"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentOculusAvoidAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentOculusAvoidAuthoring.html",
    "title": "Class AgentOculusAvoidAuthoring",
    "keywords": "Class AgentOculusAvoidAuthoring Inheritance object Object Component Behaviour MonoBehaviour AgentOculusAvoidAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Agent Oculus Avoidance\")] public class AgentOculusAvoidAuthoring : MonoBehaviour Fields | Improve this Doc View Source CoverageWeight Declaration [SerializeField] protected float CoverageWeight Field Value Type Description float | Improve this Doc View Source Mode Declaration [SerializeField] protected AgentOculusAvoidMode Mode Field Value Type Description AgentOculusAvoidMode | Improve this Doc View Source Radius Declaration [SerializeField] protected float Radius Field Value Type Description float | Improve this Doc View Source m_Grounded Declaration [SerializeField] protected AgentDepthGrounded m_Grounded Field Value Type Description AgentDepthGrounded | Improve this Doc View Source m_Weights Declaration [SerializeField] protected OculusAvoidanceWeights m_Weights Field Value Type Description OculusAvoidanceWeights Properties | Improve this Doc View Source DefaulAvoid Returns default component of AgentOculusAvoid. Declaration public AgentOculusAvoid DefaulAvoid { get; } Property Value Type Description AgentOculusAvoid | Improve this Doc View Source EntityAvoid AgentOculusAvoid component of this Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentOculusAvoid EntityAvoid { get; } Property Value Type Description AgentOculusAvoid"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentReciprocalAvoidAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentReciprocalAvoidAuthoring.html",
    "title": "Class AgentReciprocalAvoidAuthoring",
    "keywords": "Class AgentReciprocalAvoidAuthoring Inheritance object Object Component Behaviour MonoBehaviour AgentReciprocalAvoidAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Reciprocal Avoid (Experimental)\")] [DisallowMultipleComponent] public class AgentReciprocalAvoidAuthoring : MonoBehaviour Fields | Improve this Doc View Source Radius Declaration [SerializeField] protected float Radius Field Value Type Description float | Improve this Doc View Source m_Layers Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source DefaultAvoid Returns default component of AgentReciprocalAvoid. Declaration public AgentReciprocalAvoid DefaultAvoid { get; } Property Value Type Description AgentReciprocalAvoid | Improve this Doc View Source EntityAvoid AgentReciprocalAvoid component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentReciprocalAvoid EntityAvoid { get; set; } Property Value Type Description AgentReciprocalAvoid | Improve this Doc View Source HasEntityAvoid Returns true if AgentAuthoring entity has AgentReciprocalAvoid. Declaration public bool HasEntityAvoid { get; } Property Value Type Description bool | Improve this Doc View Source Sonar AgentReciprocalAvoid component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentReciprocalAvoid Sonar { get; } Property Value Type Description AgentReciprocalAvoid"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentSeparationAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentSeparationAuthoring.html",
    "title": "Class AgentSeparationAuthoring",
    "keywords": "Class AgentSeparationAuthoring Agent separation from nearby agents. Inheritance object Object Component Behaviour MonoBehaviour AgentSeparationAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Separation\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/avoidance/separation.html\")] public class AgentSeparationAuthoring : MonoBehaviour Fields | Improve this Doc View Source Radius Agent separation from nearby agents. Declaration [SerializeField] protected float Radius Field Value Type Description float | Improve this Doc View Source Weight Agent separation from nearby agents. Declaration [SerializeField] [Range(0, 2)] protected float Weight Field Value Type Description float | Improve this Doc View Source m_Layers Agent separation from nearby agents. Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers Properties | Improve this Doc View Source DefaultSeparation Returns default component of AgentSeparation. Declaration public AgentSeparation DefaultSeparation { get; } Property Value Type Description AgentSeparation | Improve this Doc View Source EntitySeparation AgentSeparation component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentSeparation EntitySeparation { get; set; } Property Value Type Description AgentSeparation | Improve this Doc View Source HasEntitySeparation Returns true if AgentAuthoring entity has AgentSeparation. Declaration public bool HasEntitySeparation { get; } Property Value Type Description bool | Improve this Doc View Source Separation AgentSeparation component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentSeparation Separation { get; } Property Value Type Description AgentSeparation"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentSetDestinationDeferredSystem.Singleton.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentSetDestinationDeferredSystem.Singleton.html",
    "title": "Struct AgentSetDestinationDeferredSystem.Singleton",
    "keywords": "Struct AgentSetDestinationDeferredSystem.Singleton Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public struct AgentSetDestinationDeferredSystem.Singleton : IComponentData, IQueryTypeParameter Methods | Improve this Doc View Source SetDestinationDeferred(Entity, float3) Declaration public void SetDestinationDeferred(Entity entity, float3 destination) Parameters Type Name Description Entity entity float3 destination Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentSetDestinationDeferredSystem.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentSetDestinationDeferredSystem.html",
    "title": "Struct AgentSetDestinationDeferredSystem",
    "keywords": "Struct AgentSetDestinationDeferredSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [BurstCompile] [UpdateInGroup(typeof(InitializationSystemGroup))] public struct AgentSetDestinationDeferredSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Hybrid.AgentSmartStopAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.AgentSmartStopAuthoring.html",
    "title": "Class AgentSmartStopAuthoring",
    "keywords": "Class AgentSmartStopAuthoring Enables collisio with other agents. Inheritance object Object Component Behaviour MonoBehaviour AgentSmartStopAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Agent Smart Stop\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/smart-stop.html\")] public class AgentSmartStopAuthoring : MonoBehaviour Fields | Improve this Doc View Source m_GiveUpStop Enables collisio with other agents. Declaration [SerializeField] protected GiveUpStop m_GiveUpStop Field Value Type Description GiveUpStop | Improve this Doc View Source m_HiveMindStop Enables collisio with other agents. Declaration [SerializeField] protected HiveMindStop m_HiveMindStop Field Value Type Description HiveMindStop Properties | Improve this Doc View Source DefaulSmartStop Returns default component of AgentSeparation. Declaration public AgentSmartStop DefaulSmartStop { get; } Property Value Type Description AgentSmartStop | Improve this Doc View Source EntitySmartStop AgentSmartStop component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public AgentSmartStop EntitySmartStop { get; set; } Property Value Type Description AgentSmartStop | Improve this Doc View Source HasEntitySmartStop Returns true if AgentAuthoring entity has AgentSmartStop. Declaration public bool HasEntitySmartStop { get; } Property Value Type Description bool | Improve this Doc View Source SmartStop AgentSmartStop component of this AgentAuthoring Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref AgentSmartStop SmartStop { get; } Property Value Type Description AgentSmartStop"
  },
  "api/ProjectDawn.Navigation.Hybrid.BirdAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.BirdAuthoring.html",
    "title": "Class BirdAuthoring",
    "keywords": "Class BirdAuthoring Agent Bird from nearby agents. Inheritance object Object Component Behaviour MonoBehaviour BirdAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [RequireComponent(typeof(AgentAuthoring))] [AddComponentMenu(\"Agents Navigation/Bird\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/game-objects/avoidance/Bird.html\")] public class BirdAuthoring : MonoBehaviour Fields | Improve this Doc View Source m_PerchedDuration Agent Bird from nearby agents. Declaration [SerializeField] protected Range m_PerchedDuration Field Value Type Description Range | Improve this Doc View Source m_Wander Agent Bird from nearby agents. Declaration [SerializeField] protected BirdWander m_Wander Field Value Type Description BirdWander Properties | Improve this Doc View Source Bird Bird component of this Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref Bird Bird { get; } Property Value Type Description Bird | Improve this Doc View Source DefaultBird Returns default component of Bird. Declaration public Bird DefaultBird { get; } Property Value Type Description Bird"
  },
  "api/ProjectDawn.Navigation.Hybrid.CrowdDiscomfortAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.CrowdDiscomfortAuthoring.html",
    "title": "Class CrowdDiscomfortAuthoring",
    "keywords": "Class CrowdDiscomfortAuthoring Discomfort volume of crowd agents. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour CrowdDiscomfortAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Crowd/Crowd Discomfort\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/crowds/crowd-discomfort.html\")] public class CrowdDiscomfortAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_Gradient Discomfort volume of crowd agents. Declaration [Tooltip(\"The gradient of discomfort. The x-component represents the discomfort value at the center of the shape, and the y-component represents it at the edge.\")] [SerializeField] protected float2 m_Gradient Field Value Type Description float2 | Improve this Doc View Source m_Size Discomfort volume of crowd agents. Declaration [Tooltip(\"The size of the discomfort.\")] [SerializeField] protected float3 m_Size Field Value Type Description float3 | Improve this Doc View Source m_Type Discomfort volume of crowd agents. Declaration [Tooltip(\"The shape of the discomfort.\")] [SerializeField] protected CrowdDiscomfortType m_Type Field Value Type Description CrowdDiscomfortType Properties | Improve this Doc View Source DefaultDiscomfort Returns default component of CrowdDiscomfort. Declaration public CrowdDiscomfort DefaultDiscomfort { get; } Property Value Type Description CrowdDiscomfort | Improve this Doc View Source EntityDiscomfort Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public CrowdDiscomfort EntityDiscomfort { get; set; } Property Value Type Description CrowdDiscomfort | Improve this Doc View Source Gradient The gradient of discomfort. The x-component represents the discomfort value at the center of the shape, and the y-component represents it at the edge. Declaration public float2 Gradient { get; set; } Property Value Type Description float2 | Improve this Doc View Source HasEntityDiscomfort Returns true if EntityBehaviour entity has CrowdDiscomfort. Declaration public bool HasEntityDiscomfort { get; } Property Value Type Description bool | Improve this Doc View Source Size The size of the discomfort. Declaration public float3 Size { get; set; } Property Value Type Description float3 | Improve this Doc View Source Type The shape of the discomfort. Declaration public CrowdDiscomfortType Type { get; set; } Property Value Type Description CrowdDiscomfortType"
  },
  "api/ProjectDawn.Navigation.Hybrid.CrowdGroupAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.CrowdGroupAuthoring.html",
    "title": "Class CrowdGroupAuthoring",
    "keywords": "Class CrowdGroupAuthoring A single group that will navigate on the CrowdSurfaceAuthoring. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour CrowdGroupAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Crowd/Crowd Group\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/crowds/crowd-group.html\")] public class CrowdGroupAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_CostWeights A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [Tooltip(\"Controls the cost weights of constructing crowd flow fields.\")] [SerializeField] protected CostWeights m_CostWeights Field Value Type Description CostWeights | Improve this Doc View Source m_GoalSource A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [Tooltip(\"Source from which crowd will get goal.\")] [SerializeField] protected CrowdGoalSource m_GoalSource Field Value Type Description CrowdGoalSource | Improve this Doc View Source m_Grounded A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [Tooltip(\"Anchors the agent to the surface. It is useful to disable then used with physics, to allow more freedom motion and precision.\")] [SerializeField] protected bool m_Grounded Field Value Type Description bool | Improve this Doc View Source m_MappingRadius A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [Tooltip(\"Maximum distance that will be used when attempting to map the agent's position or destination onto surface. The higher the value, the bigger the performance cost.\")] [SerializeField] protected float m_MappingRadius Field Value Type Description float | Improve this Doc View Source m_Speed A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [Tooltip(\"Crowd group speed settings.\")] [SerializeField] protected Speed m_Speed Field Value Type Description Speed | Improve this Doc View Source m_Surface A single group that will navigate on the CrowdSurfaceAuthoring. Declaration [SerializeField] protected CrowdSurfaceAuthoring m_Surface Field Value Type Description CrowdSurfaceAuthoring Properties | Improve this Doc View Source CostWeight Controls the cost weights of constructing crowd flow fields. Declaration public CostWeights CostWeight { get; set; } Property Value Type Description CostWeights | Improve this Doc View Source DefaultGroup Returns default component of CrowdGroup. Declaration public CrowdGroup DefaultGroup { get; } Property Value Type Description CrowdGroup | Improve this Doc View Source EntityGroup Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public CrowdGroup EntityGroup { get; set; } Property Value Type Description CrowdGroup | Improve this Doc View Source GoalSource Source from which crowd will get goal. Declaration public CrowdGoalSource GoalSource { get; set; } Property Value Type Description CrowdGoalSource | Improve this Doc View Source Grounded Anchors the agent to the surface. It is useful to disable then used with physics, to allow more freedom motion and precision. Declaration public bool Grounded { get; set; } Property Value Type Description bool | Improve this Doc View Source HasEntityGroup Returns true if EntityBehaviour entity has CrowdGroup. Declaration public bool HasEntityGroup { get; } Property Value Type Description bool | Improve this Doc View Source MappingRadius Maximum distance that will be used when attempting to map the agent's position or destination onto surface. The higher the value, the bigger the performance cost. Declaration public float MappingRadius { get; set; } Property Value Type Description float | Improve this Doc View Source Speed Crowd group speed settings. Declaration public Speed Speed { get; set; } Property Value Type Description Speed | Improve this Doc View Source Surface A surface which will be used by this group. Declaration public CrowdSurfaceAuthoring Surface { get; } Property Value Type Description CrowdSurfaceAuthoring Methods | Improve this Doc View Source SetGoals(ReadOnlySpan<float3>) Set goals of crowds group. This method requires goal source to be set to Script. Declaration public void SetGoals(ReadOnlySpan<float3> goals) Parameters Type Name Description ReadOnlySpan<float3> goals | Improve this Doc View Source SetGoals(float3, float3) Set goals of crowds group. This method requires goal source to be set to Script. Declaration public void SetGoals(float3 min, float3 max) Parameters Type Name Description float3 min float3 max | Improve this Doc View Source SetSurface(CrowdSurfaceAuthoring) Changes the surface. This is expensive operation. Declaration public void SetSurface(CrowdSurfaceAuthoring surface) Parameters Type Name Description CrowdSurfaceAuthoring surface"
  },
  "api/ProjectDawn.Navigation.Hybrid.CrowdObstacleAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.CrowdObstacleAuthoring.html",
    "title": "Class CrowdObstacleAuthoring",
    "keywords": "Class CrowdObstacleAuthoring Obstacle volume of crowd agents. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour CrowdObstacleAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Crowd/Crowd Obstacle\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/crowds/crowd-obstacle.html\")] public class CrowdObstacleAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_Size Obstacle volume of crowd agents. Declaration [Tooltip(\"The size of the obstacle.\")] [SerializeField] protected float3 m_Size Field Value Type Description float3 | Improve this Doc View Source m_Type Obstacle volume of crowd agents. Declaration [Tooltip(\"The shape of the obstacle.\")] [SerializeField] protected CrowdObstacleType m_Type Field Value Type Description CrowdObstacleType Properties | Improve this Doc View Source DefaultObstacle Returns default component of CrowdObstacle. Declaration public CrowdObstacle DefaultObstacle { get; } Property Value Type Description CrowdObstacle | Improve this Doc View Source EntityObstacle Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public CrowdObstacle EntityObstacle { get; set; } Property Value Type Description CrowdObstacle | Improve this Doc View Source HasEntityObstacle Returns true if EntityBehaviour entity has CrowdObstacle. Declaration public bool HasEntityObstacle { get; } Property Value Type Description bool | Improve this Doc View Source Obstacle Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public ref CrowdObstacle Obstacle { get; } Property Value Type Description CrowdObstacle | Improve this Doc View Source Size The size of the obstacle. Declaration public float3 Size { get; set; } Property Value Type Description float3 | Improve this Doc View Source Type The shape of the obstacle. Declaration public CrowdObstacleType Type { get; set; } Property Value Type Description CrowdObstacleType"
  },
  "api/ProjectDawn.Navigation.Hybrid.CrowdSurfaceAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.CrowdSurfaceAuthoring.html",
    "title": "Class CrowdSurfaceAuthoring",
    "keywords": "Class CrowdSurfaceAuthoring A surface on which a crowd can move. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour CrowdSurfaceAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Crowd/Crowd Surface\")] [DisallowMultipleComponent] [HelpURL(\"https://lukaschod.github.io/agents-navigation-docs/manual/crowds/crowd-surface.html\")] public class CrowdSurfaceAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_Data A surface on which a crowd can move. Declaration [SerializeField] protected CrowdData m_Data Field Value Type Description CrowdData | Improve this Doc View Source m_Density A surface on which a crowd can move. Declaration [Tooltip(\"Crowd group density settings.\")] [SerializeField] protected Density m_Density Field Value Type Description Density | Improve this Doc View Source m_Height A surface on which a crowd can move. Declaration [Tooltip(\"Cell count vertically.\")] [SerializeField] protected int m_Height Field Value Type Description int | Improve this Doc View Source m_Layers A surface on which a crowd can move. Declaration [SerializeField] protected NavigationLayers m_Layers Field Value Type Description NavigationLayers | Improve this Doc View Source m_Size A surface on which a crowd can move. Declaration [Tooltip(\"World space size.\")] [SerializeField] protected float2 m_Size Field Value Type Description float2 | Improve this Doc View Source m_Slope A surface on which a crowd can move. Declaration [Tooltip(\"Crowd group slope settings.\")] [SerializeField] protected Slope m_Slope Field Value Type Description Slope | Improve this Doc View Source m_Width A surface on which a crowd can move. Declaration [Tooltip(\"Cell count horizontally.\")] [SerializeField] protected int m_Width Field Value Type Description int Properties | Improve this Doc View Source CellSize Local space size of single cell. Declaration public float2 CellSize { get; } Property Value Type Description float2 | Improve this Doc View Source Data A surface on which a crowd can move. Declaration public CrowdData Data { get; set; } Property Value Type Description CrowdData | Improve this Doc View Source DefaultSurface Returns default component of CrowdSurface. Declaration public CrowdSurface DefaultSurface { get; } Property Value Type Description CrowdSurface | Improve this Doc View Source Height Cell count vertically. Declaration public int Height { get; } Property Value Type Description int | Improve this Doc View Source Normal Up vector of surface. Declaration public float3 Normal { get; } Property Value Type Description float3 | Improve this Doc View Source Size World space size. Declaration public float2 Size { get; } Property Value Type Description float2 | Improve this Doc View Source Transform Transform from local to world space. Declaration public NonUniformTransform Transform { get; } Property Value Type Description NonUniformTransform | Improve this Doc View Source Width Cell count horizontally. Declaration public int Width { get; } Property Value Type Description int Methods | Improve this Doc View Source ApplyData() Applies changes of data. Declaration public void ApplyData() | Improve this Doc View Source IsDataValid() Returns true, if crowds data is valid for this surface. Declaration public bool IsDataValid() Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.Hybrid.DepthSurfaceAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.DepthSurfaceAuthoring.html",
    "title": "Class DepthSurfaceAuthoring",
    "keywords": "Class DepthSurfaceAuthoring A surface on which a boids can move. Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour DepthSurfaceAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Boids/Depth Surface\")] [DisallowMultipleComponent] public class DepthSurfaceAuthoring : EntityBehaviour Fields | Improve this Doc View Source m_Height A surface on which a boids can move. Declaration [Tooltip(\"Cell count vertically.\")] [SerializeField] protected int m_Height Field Value Type Description int | Improve this Doc View Source m_Layers A surface on which a boids can move. Declaration [SerializeField] protected LayerMask m_Layers Field Value Type Description LayerMask | Improve this Doc View Source m_Size A surface on which a boids can move. Declaration [Tooltip(\"World space size.\")] [SerializeField] protected float3 m_Size Field Value Type Description float3 | Improve this Doc View Source m_Width A surface on which a boids can move. Declaration [Tooltip(\"Cell count horizontally.\")] [SerializeField] protected int m_Width Field Value Type Description int Properties | Improve this Doc View Source DefaultSurface Returns default component of DepthSurface. Declaration public DepthSurface DefaultSurface { get; } Property Value Type Description DepthSurface | Improve this Doc View Source Height Cell count vertically. Declaration public int Height { get; } Property Value Type Description int | Improve this Doc View Source Normal Up vector of surface. Declaration public float3 Normal { get; } Property Value Type Description float3 | Improve this Doc View Source Size World space size. Declaration public float3 Size { get; } Property Value Type Description float3 | Improve this Doc View Source Transform Transform from local to world space. Declaration public NonUniformTransform Transform { get; } Property Value Type Description NonUniformTransform | Improve this Doc View Source Width Cell count horizontally. Declaration public int Width { get; } Property Value Type Description int"
  },
  "api/ProjectDawn.Navigation.Hybrid.EntityBehaviour.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.EntityBehaviour.html",
    "title": "Class EntityBehaviour",
    "keywords": "Class EntityBehaviour Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour AgentAuthoring CrowdDiscomfortAuthoring CrowdGroupAuthoring CrowdObstacleAuthoring CrowdSurfaceAuthoring DepthSurfaceAuthoring FlockGroupAuthoring Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public class EntityBehaviour : MonoBehaviour Fields | Improve this Doc View Source m_Entity Declaration protected Entity m_Entity Field Value Type Description Entity Properties | Improve this Doc View Source IsEntityCreated Declaration public bool IsEntityCreated { get; } Property Value Type Description bool Methods | Improve this Doc View Source GetOrCreateEntity() Declaration public Entity GetOrCreateEntity() Returns Type Description Entity"
  },
  "api/ProjectDawn.Navigation.Hybrid.FlockGroupAuthoring.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.FlockGroupAuthoring.html",
    "title": "Class FlockGroupAuthoring",
    "keywords": "Class FlockGroupAuthoring Inheritance object Object Component Behaviour MonoBehaviour EntityBehaviour FlockGroupAuthoring Inherited Members EntityBehaviour.m_Entity EntityBehaviour.IsEntityCreated EntityBehaviour.GetOrCreateEntity() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [AddComponentMenu(\"Agents Navigation/Flock Group (Experimental)\")] public class FlockGroupAuthoring : EntityBehaviour Fields | Improve this Doc View Source Alignment Declaration [SerializeField] [Range(0, 0.3)] protected float Alignment Field Value Type Description float | Improve this Doc View Source Cohesion Declaration [SerializeField] [Range(0, 0.3)] protected float Cohesion Field Value Type Description float | Improve this Doc View Source Leader Declaration [SerializeField] protected AgentAuthoring Leader Field Value Type Description AgentAuthoring | Improve this Doc View Source Radius Declaration [SerializeField] protected float Radius Field Value Type Description float Properties | Improve this Doc View Source DefaulFlockGroup Returns default component of FlockGroup. Declaration public FlockGroup DefaulFlockGroup { get; } Property Value Type Description FlockGroup | Improve this Doc View Source EntityFlockEntities FlockEntity buffer of this Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public DynamicBuffer<FlockEntity> EntityFlockEntities { get; } Property Value Type Description DynamicBuffer<FlockEntity> | Improve this Doc View Source EntityFlockGroup FlockGroup component of this Entity. Accessing this property is potentially heavy operation as it will require wait for agent jobs to finish. Declaration public FlockGroup EntityFlockGroup { get; set; } Property Value Type Description FlockGroup | Improve this Doc View Source HasEntityFlockGroup Returns true if entity has FlockGroup. Declaration public bool HasEntityFlockGroup { get; } Property Value Type Description bool"
  },
  "api/ProjectDawn.Navigation.Hybrid.INavMeshWallProvider.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.INavMeshWallProvider.html",
    "title": "Interface INavMeshWallProvider",
    "keywords": "Interface INavMeshWallProvider Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public interface INavMeshWallProvider"
  },
  "api/ProjectDawn.Navigation.Hybrid.NavMeshSurfaceBaker.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.NavMeshSurfaceBaker.html",
    "title": "Class NavMeshSurfaceBaker",
    "keywords": "Class NavMeshSurfaceBaker Inheritance object IBaker Baker<NavMeshSurface> NavMeshSurfaceBaker Inherited Members IBaker.GetSceneGUID() IBaker.GetComponent<T>() IBaker.GetComponent<T>(Component) IBaker.GetComponent<T>(GameObject) IBaker.GetComponents<T>(List<T>) IBaker.GetComponents<T>(Component, List<T>) IBaker.GetComponents<T>(GameObject, List<T>) IBaker.GetComponents<T>() IBaker.GetComponents<T>(Component) IBaker.GetComponents<T>(GameObject) IBaker.GetComponentInParent<T>() IBaker.GetComponentInParent<T>(Component) IBaker.GetComponentInParent<T>(GameObject) IBaker.GetComponentsInParent<T>(List<T>) IBaker.GetComponentsInParent<T>(Component, List<T>) IBaker.GetComponentsInParent<T>(GameObject, List<T>) IBaker.GetComponentsInParent<T>() IBaker.GetComponentsInParent<T>(Component) IBaker.GetComponentsInParent<T>(GameObject) IBaker.GetComponentInChildren<T>() IBaker.GetComponentInChildren<T>(Component) IBaker.GetComponentInChildren<T>(GameObject) IBaker.GetComponentsInChildren<T>(List<T>) IBaker.GetComponentsInChildren<T>(Component, List<T>) IBaker.GetComponentsInChildren<T>(GameObject, List<T>) IBaker.GetComponentsInChildren<T>() IBaker.GetComponentsInChildren<T>(Component) IBaker.GetComponentsInChildren<T>(GameObject) IBaker.GetParent() IBaker.GetParent(Component) IBaker.GetParent(GameObject) IBaker.GetParents() IBaker.GetParents(Component) IBaker.GetParents(GameObject) IBaker.GetParents(List<GameObject>) IBaker.GetParents(Component, List<GameObject>) IBaker.GetParents(GameObject, List<GameObject>) IBaker.GetChild(int) IBaker.GetChild(Component, int) IBaker.GetChild(GameObject, int) IBaker.GetChildren(bool) IBaker.GetChildren(Component, bool) IBaker.GetChildren(GameObject, bool) IBaker.GetChildren(List<GameObject>, bool) IBaker.GetChildren(Component, List<GameObject>, bool) IBaker.GetChildren(GameObject, List<GameObject>, bool) IBaker.GetChildCount() IBaker.GetChildCount(Component) IBaker.GetChildCount(GameObject) IBaker.GetName() IBaker.GetName(Component) IBaker.GetName(GameObject) IBaker.GetLayer() IBaker.GetLayer(Component) IBaker.GetLayer(GameObject) IBaker.GetTag() IBaker.GetTag(Component) IBaker.GetTag(GameObject) IBaker.GetEntity() IBaker.GetEntity(GameObject) IBaker.GetEntity(Component) IBaker.GetEntity(TransformUsageFlags) IBaker.GetEntity(GameObject, TransformUsageFlags) IBaker.GetEntity(Component, TransformUsageFlags) IBaker.GetEntityWithoutDependency() IBaker.IsActive() IBaker.IsActive(Component) IBaker.IsActive(GameObject) IBaker.IsActiveAndEnabled() IBaker.IsActiveAndEnabled(Component) IBaker.IsStatic() IBaker.IsStatic(Component) IBaker.IsStatic(GameObject) IBaker.IsClient() IBaker.IsServer() IBaker.DependsOn<T>(T) IBaker.DependsOnComponentInParent<T>() IBaker.DependsOnComponentInParent<T>(Component) IBaker.DependsOnComponentInParent<T>(GameObject) IBaker.DependsOnComponentsInParent<T>() IBaker.DependsOnComponentsInParent<T>(Component) IBaker.DependsOnComponentsInParent<T>(GameObject) IBaker.DependsOnComponentInChildren<T>() IBaker.DependsOnComponentInChildren<T>(Component) IBaker.DependsOnComponentInChildren<T>(GameObject) IBaker.DependsOnComponentsInChildren<T>() IBaker.DependsOnComponentsInChildren<T>(GameObject) IBaker.DependsOnComponentsInChildren<T>(Component) IBaker.DependsOnLightBaking() IBaker.AddBlobAsset<T>(ref BlobAssetReference<T>, out Hash128) IBaker.AddBlobAssetWithCustomHash<T>(ref BlobAssetReference<T>, Hash128) IBaker.TryGetBlobAssetReference<T>(Hash128, out BlobAssetReference<T>) IBaker.AddComponent<T>() IBaker.AddComponent<T>(in T) IBaker.AddComponent<T>(Entity) IBaker.AddComponent<T>(Entity, in T) IBaker.AddComponent(ComponentType) IBaker.AddComponent(Entity, ComponentType) IBaker.AddComponent(in ComponentTypeSet) IBaker.AddComponent(Entity, in ComponentTypeSet) IBaker.AddComponentObject<T>(T) IBaker.AddComponentObject<T>(Entity, T) IBaker.AddSharedComponentManaged<T>(T) IBaker.AddSharedComponentManaged<T>(Entity, T) IBaker.AddSharedComponent<T>(T) IBaker.AddSharedComponent<T>(Entity, T) IBaker.AddBuffer<T>() IBaker.AddBuffer<T>(Entity) IBaker.SetComponent<T>(Entity, in T) IBaker.SetComponentEnabled<T>(Entity, bool) IBaker.SetComponentEnabled<T>(bool) IBaker.SetSharedComponentManaged<T>(Entity, in T) IBaker.SetSharedComponent<T>(Entity, in T) IBaker.SetBuffer<T>() IBaker.SetBuffer<T>(Entity) IBaker.AppendToBuffer<T>(T) IBaker.AppendToBuffer<T>(Entity, T) IBaker.CreateAdditionalEntity() IBaker.CreateAdditionalEntity(TransformUsageFlags, bool, string) IBaker.CreateAdditionalEntities(NativeArray<Entity>, TransformUsageFlags, bool) IBaker.RegisterPrefabForBaking(GameObject) IBaker.AddTransformUsageFlags(TransformUsageFlags) IBaker.AddTransformUsageFlags(Entity, TransformUsageFlags) IBaker.IsBakingForEditor() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax public class NavMeshSurfaceBaker : Baker<NavMeshSurface> Methods | Improve this Doc View Source Bake(NavMeshSurface) Called in the baking process to bake the authoring component Declaration public override void Bake(NavMeshSurface authoring) Parameters Type Name Description NavMeshSurface authoring The authoring component to bake Overrides Unity.Entities.Baker<Unity.AI.Navigation.NavMeshSurface>.Bake(Unity.AI.Navigation.NavMeshSurface) Remarks This method will be called for every instance of TAuthoringType in order to bake that instance."
  },
  "api/ProjectDawn.Navigation.Hybrid.ReadAgentRectTransformSystem.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.ReadAgentRectTransformSystem.html",
    "title": "Struct ReadAgentRectTransformSystem",
    "keywords": "Struct ReadAgentRectTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup))] [UpdateAfter(typeof(FixedStepSimulationSystemGroup))] public struct ReadAgentRectTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Hybrid.ReadAgentTransformSystem.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.ReadAgentTransformSystem.html",
    "title": "Struct ReadAgentTransformSystem",
    "keywords": "Struct ReadAgentTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderLast = true)] [UpdateAfter(typeof(EndSimulationEntityCommandBufferSystem))] public struct ReadAgentTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Hybrid.SettingsBehaviour.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.SettingsBehaviour.html",
    "title": "Class SettingsBehaviour",
    "keywords": "Class SettingsBehaviour Inheritance object Object Component Behaviour MonoBehaviour SettingsBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [Obsolete(\"This class is obsolete, please use new settings workflow https://lukaschod.github.io/agents-navigation-docs/manual/settings.html.\")] public abstract class SettingsBehaviour : MonoBehaviour Fields | Improve this Doc View Source Types Declaration public static readonly List<Type> Types Field Value Type Description List<Type> Methods | Improve this Doc View Source FindTypesInAssemblies() Declaration public static List<Type> FindTypesInAssemblies() Returns Type Description List<Type> | Improve this Doc View Source GetOrCreateEntity() Declaration public abstract Entity GetOrCreateEntity() Returns Type Description Entity"
  },
  "api/ProjectDawn.Navigation.Hybrid.WriteAgentRectTransformSystem.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.WriteAgentRectTransformSystem.html",
    "title": "Struct WriteAgentRectTransformSystem",
    "keywords": "Struct WriteAgentRectTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] [UpdateBefore(typeof(FixedStepSimulationSystemGroup))] public struct WriteAgentRectTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Hybrid.WriteAgentTransformSystem.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.WriteAgentTransformSystem.html",
    "title": "Struct WriteAgentTransformSystem",
    "keywords": "Struct WriteAgentTransformSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.Hybrid Assembly: ProjectDawn.Navigation.Hybrid.dll Syntax [BurstCompile] [UpdateInGroup(typeof(SimulationSystemGroup), OrderFirst = true)] [UpdateBefore(typeof(FixedStepSimulationSystemGroup))] public struct WriteAgentTransformSystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.Hybrid.html": {
    "href": "api/ProjectDawn.Navigation.Hybrid.html",
    "title": "Namespace ProjectDawn.Navigation.Hybrid",
    "keywords": "Namespace ProjectDawn.Navigation.Hybrid Classes AgentAuthoring Main component of agent that enables motion. AgentAvoidAuthoring Agent avoidance of nearby agents. AgentCircleShapeAuthoring Agent circle shape. AgentColliderAuthoring Enables collision with other agents. AgentCrowdPathingAuthoring Agent uses Continuum Crowd for pathfinding in specific CrowdGroupAuthoring. AgentCylinderShapeAuthoring Agent cylindre shape. AgentFlockAuthoring AgentGroundingAuthoring Enables collisio with other agents. AgentNavMeshAuthoring Agent uses NavMesh for pathfinding. AgentOculusAvoidAuthoring AgentReciprocalAvoidAuthoring AgentSeparationAuthoring Agent separation from nearby agents. AgentSmartStopAuthoring Enables collisio with other agents. BirdAuthoring Agent Bird from nearby agents. CrowdDiscomfortAuthoring Discomfort volume of crowd agents. CrowdGroupAuthoring A single group that will navigate on the CrowdSurfaceAuthoring. CrowdObstacleAuthoring Obstacle volume of crowd agents. CrowdSurfaceAuthoring A surface on which a crowd can move. DepthSurfaceAuthoring A surface on which a boids can move. EntityBehaviour FlockGroupAuthoring NavMeshSurfaceBaker SettingsBehaviour Structs AgentSetDestinationDeferredSystem AgentSetDestinationDeferredSystem.Singleton ReadAgentRectTransformSystem ReadAgentTransformSystem WriteAgentRectTransformSystem WriteAgentTransformSystem Interfaces INavMeshWallProvider Enums AgentGroundingMode AgentMotionType"
  },
  "api/ProjectDawn.Navigation.ISpatialQueryEntity.html": {
    "href": "api/ProjectDawn.Navigation.ISpatialQueryEntity.html",
    "title": "Interface ISpatialQueryEntity",
    "keywords": "Interface ISpatialQueryEntity Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public interface ISpatialQueryEntity Methods | Improve this Doc View Source Execute(Entity, AgentBody, AgentShape, LocalTransform) Declaration void Execute(Entity entity, AgentBody body, AgentShape shape, LocalTransform transform) Parameters Type Name Description Entity entity AgentBody body AgentShape shape LocalTransform transform"
  },
  "api/ProjectDawn.Navigation.ISubSettings.html": {
    "href": "api/ProjectDawn.Navigation.ISubSettings.html",
    "title": "Interface ISubSettings",
    "keywords": "Interface ISubSettings Classes with this interface will be included into AgentsNavigationSettings as sub settings. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public interface ISubSettings"
  },
  "api/ProjectDawn.Navigation.ISurfaceArea-1.html": {
    "href": "api/ProjectDawn.Navigation.ISurfaceArea-1.html",
    "title": "Interface ISurfaceArea<T>",
    "keywords": "Interface ISurfaceArea<T> Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public interface ISurfaceArea<T> where T : unmanaged Type Parameters Name Description T Methods | Improve this Doc View Source SurfaceArea() Returns surface area of the shape. Declaration float SurfaceArea() Returns Type Description float"
  },
  "api/ProjectDawn.Navigation.IUnion-1.html": {
    "href": "api/ProjectDawn.Navigation.IUnion-1.html",
    "title": "Interface IUnion<T>",
    "keywords": "Interface IUnion<T> Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public interface IUnion<T> where T : unmanaged Type Parameters Name Description T Methods | Improve this Doc View Source Union(T) Returns combined volume. Declaration T Union(T value) Parameters Type Name Description T value Returns Type Description T"
  },
  "api/ProjectDawn.Navigation.LinkTraversal.html": {
    "href": "api/ProjectDawn.Navigation.LinkTraversal.html",
    "title": "Struct LinkTraversal",
    "keywords": "Struct LinkTraversal Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct LinkTraversal : IComponentData, IQueryTypeParameter, IEnableableComponent Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.LinkTraversalSeek.html": {
    "href": "api/ProjectDawn.Navigation.LinkTraversalSeek.html",
    "title": "Struct LinkTraversalSeek",
    "keywords": "Struct LinkTraversalSeek Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct LinkTraversalSeek : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source End Declaration public Portal End Field Value Type Description Portal | Improve this Doc View Source Start Declaration public Portal Start Field Value Type Description Portal Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.LinkTraversalSeekSystem.html": {
    "href": "api/ProjectDawn.Navigation.LinkTraversalSeekSystem.html",
    "title": "Struct LinkTraversalSeekSystem",
    "keywords": "Struct LinkTraversalSeekSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct LinkTraversalSeekSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.Handle.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.Handle.html",
    "title": "Struct UnsafeBHVTree<TVolume, TValue>.Handle",
    "keywords": "Struct UnsafeBHVTree<TVolume, TValue>.Handle Kd Tree iterator. Implements IEquatable<UnsafeBHVTree<TVolume, TValue>.Handle> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.LowLevel.Unsafe Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeBHVTree<TVolume, TValue>.Handle : IEquatable<UnsafeBHVTree<TVolume, TValue>.Handle> Properties | Improve this Doc View Source IsValid Returns true if handle is valid. Declaration public bool IsValid { get; } Property Value Type Description bool Methods | Improve this Doc View Source Equals(Handle) Kd Tree iterator. Declaration public bool Equals(UnsafeBHVTree<TVolume, TValue>.Handle other) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle other Returns Type Description bool | Improve this Doc View Source Equals(object) Kd Tree iterator. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source GetHashCode() Kd Tree iterator. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(Handle, Handle) Kd Tree iterator. Declaration public static bool operator ==(UnsafeBHVTree<TVolume, TValue>.Handle lhs, UnsafeBHVTree<TVolume, TValue>.Handle rhs) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle lhs UnsafeBHVTree<TVolume, TValue>.Handle rhs Returns Type Description bool | Improve this Doc View Source implicit operator int(Handle) Kd Tree iterator. Declaration public static implicit operator int(UnsafeBHVTree<TVolume, TValue>.Handle handled) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle handled Returns Type Description int | Improve this Doc View Source operator !=(Handle, Handle) Kd Tree iterator. Declaration public static bool operator !=(UnsafeBHVTree<TVolume, TValue>.Handle lhs, UnsafeBHVTree<TVolume, TValue>.Handle rhs) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle lhs UnsafeBHVTree<TVolume, TValue>.Handle rhs Returns Type Description bool Implements IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.Node.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.Node.html",
    "title": "Struct UnsafeBHVTree<TVolume, TValue>.Node",
    "keywords": "Struct UnsafeBHVTree<TVolume, TValue>.Node Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.LowLevel.Unsafe Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeBHVTree<TVolume, TValue>.Node Properties | Improve this Doc View Source IsLeaf Declaration public bool IsLeaf { get; } Property Value Type Description bool | Improve this Doc View Source LeftChild Declaration public UnsafeBHVTree<TVolume, TValue>.Handle LeftChild { get; } Property Value Type Description UnsafeBHVTree<TVolume, TValue>.Handle | Improve this Doc View Source Parent Declaration public UnsafeBHVTree<TVolume, TValue>.Handle Parent { get; } Property Value Type Description UnsafeBHVTree<TVolume, TValue>.Handle | Improve this Doc View Source RightChild Declaration public UnsafeBHVTree<TVolume, TValue>.Handle RightChild { get; } Property Value Type Description UnsafeBHVTree<TVolume, TValue>.Handle | Improve this Doc View Source Value Declaration public TValue Value { get; } Property Value Type Description TValue | Improve this Doc View Source Volume Declaration public TVolume Volume { get; } Property Value Type Description TVolume"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeBHVTree-2.html",
    "title": "Struct UnsafeBHVTree<TVolume, TValue>",
    "keywords": "Struct UnsafeBHVTree<TVolume, TValue> An unmanaged, resizable bhv tree, without any thread safety check features. BHV tree (short for bounding hierarchy volume tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.LowLevel.Unsafe Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeBHVTree<TVolume, TValue> : IDisposable where TVolume : unmanaged, ISurfaceArea<TVolume>, IUnion<TVolume> where TValue : unmanaged Type Parameters Name Description TVolume The type of the bounding volume. TValue The stored value in accelerated structure. Constructors | Improve this Doc View Source UnsafeBHVTree(int, AllocatorHandle) Initialized and returns an instance of NativeAABBTree. Declaration public UnsafeBHVTree(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int initialCapacity The initial capacity of the priority queue. AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; } Property Value Type Description int The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Whether this tree has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description bool True if this tree has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the tree is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool True if the tree is empty or the tree has not been constructed. | Improve this Doc View Source this[Handle] The bode at a given handle. Declaration public UnsafeBHVTree<TVolume, TValue>.Node this[UnsafeBHVTree<TVolume, TValue>.Handle handle] { get; } Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle handle Handle of the element. Property Value Type Description UnsafeBHVTree<TVolume, TValue>.Node | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description int The number of elements. | Improve this Doc View Source Root Returns the tree root handle. Declaration public UnsafeBHVTree<TVolume, TValue>.Handle Root { get; } Property Value Type Description UnsafeBHVTree<TVolume, TValue>.Handle Methods | Improve this Doc View Source Add(TVolume, TValue, bool) Add element to the tree. Declaration public UnsafeBHVTree<TVolume, TValue>.Handle Add(TVolume volume, TValue value, bool rebalance = true) Parameters Type Name Description TVolume volume TValue value The value to add. bool rebalance Should it attempt to rebalance. Returns Type Description UnsafeBHVTree<TVolume, TValue>.Handle | Improve this Doc View Source Clear() Removes all nodes of this tree. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Cost() Returns the sum of all non leaf surface area. The lower the number is, the more optimal a tree will be. Declaration public float Cost() Returns Type Description float | Improve this Doc View Source CountLeafs() Returns the number leaf nodes in this aabb tree. Declaration public int CountLeafs() Returns Type Description int Returns the number leaf nodes in this aabb tree. | Improve this Doc View Source CountNodes() Returns the number nodes in this tree. Declaration public int CountNodes() Returns Type Description int Returns the number nodes in this tree. | Improve this Doc View Source Create(int, AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeBHVTree<TVolume, TValue>* Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeBHVTree<TVolume, TValue>* | Improve this Doc View Source Destroy(UnsafeBHVTree<TVolume, TValue>*) Destroys container. Declaration public static void Destroy(UnsafeBHVTree<TVolume, TValue>* data) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>* data | Improve this Doc View Source Dispose() Releases all resources (memory and safety handles). Declaration public void Dispose() | Improve this Doc View Source GetBalancedTreeFactor() Returns factor from zero to one. Where one represents if tree is balanced and zero is unbalanced. This value can be used to decide if tree needs balancing. Declaration public float GetBalancedTreeFactor() Returns Type Description float Returns factor from zero to one. Where zero represents if tree is balanced and one is unbalanced. | Improve this Doc View Source GetDepth() Returns the depth of the tree. It is the maximum height of all nodes. Declaration public int GetDepth() Returns Type Description int | Improve this Doc View Source GetNode(Handle) An unmanaged, resizable bhv tree, without any thread safety check features. BHV tree (short for bounding hierarchy volume tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf. Declaration public UnsafeBHVTree<TVolume, TValue>.Node GetNode(UnsafeBHVTree<TVolume, TValue>.Handle handle) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle handle Returns Type Description UnsafeBHVTree<TVolume, TValue>.Node | Improve this Doc View Source RemoveAt(Handle) Removes node from the tree at givent iterator value. Declaration public void RemoveAt(UnsafeBHVTree<TVolume, TValue>.Handle iterator) Parameters Type Name Description UnsafeBHVTree<TVolume, TValue>.Handle iterator Position from which node will be removed. Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeHeap-2.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeHeap-2.html",
    "title": "Struct UnsafeHeap<TKey, TValue>",
    "keywords": "Struct UnsafeHeap<TKey, TValue> An unmanaged, resizable min heap, without any thread safety check features. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.LowLevel.Unsafe Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeHeap<TKey, TValue> : IDisposable where TKey : unmanaged, IComparable<TKey> where TValue : unmanaged Type Parameters Name Description TKey The type of the key. TValue The type of the element. Constructors | Improve this Doc View Source UnsafeHeap(int, AllocatorHandle) Initialized and returns an instance of heap. Declaration public UnsafeHeap(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int initialCapacity AllocatorManager.AllocatorHandle allocator The allocator to use. Properties | Improve this Doc View Source Capacity The number of elements that can fit in the internal buffer. Declaration public int Capacity { get; set; } Property Value Type Description int The number of elements that can fit in the internal buffer. | Improve this Doc View Source IsCreated Whether this heap has been allocated (and not yet deallocated). Declaration public bool IsCreated { get; } Property Value Type Description bool True if this heap has been allocated (and not yet deallocated). | Improve this Doc View Source IsEmpty Whether the heap is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool True if the heap is empty or the queue has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; set; } Property Value Type Description int The number of elements. Methods | Improve this Doc View Source Clear() Sets the length to 0. Declaration public void Clear() Remarks Does not change the capacity. | Improve this Doc View Source Create(int, AllocatorHandle) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeHeap<TKey, TValue>* Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. Returns Type Description UnsafeHeap<TKey, TValue>* | Improve this Doc View Source Destroy(UnsafeHeap<TKey, TValue>*) Destroys container. Declaration public static void Destroy(UnsafeHeap<TKey, TValue>* data) Parameters Type Name Description UnsafeHeap<TKey, TValue>* data | Improve this Doc View Source Dispose() Releases all resources (memory). Declaration public void Dispose() | Improve this Doc View Source GetKeyArray(AllocatorHandle) Returns an array with a copy of all this heap map's keys (in no particular order). Declaration public NativeArray<TKey> GetKeyArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description NativeArray<TKey> An array with a copy of all this hash map's keys (in no particular order). | Improve this Doc View Source GetValueArray(AllocatorHandle) Returns an array with a copy of all this heap map's values (in no particular order). Declaration public NativeArray<TValue> GetValueArray(AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description AllocatorManager.AllocatorHandle allocator The allocator to use. Returns Type Description NativeArray<TValue> An array with a copy of all this hash map's values (in no particular order). | Improve this Doc View Source Peek() Returns value with minimum key. Declaration public TValue Peek() Returns Type Description TValue Returns value with minimum key. | Improve this Doc View Source Pop() Returns value with minimum key. Declaration public TValue Pop() Returns Type Description TValue Returns value with minimum key. | Improve this Doc View Source Push(TKey, TValue) Adds new key and element to the heap. Declaration public bool Push(TKey key, TValue value) Parameters Type Name Description TKey key The key to be added. TValue value The value to be added. Returns Type Description bool | Improve this Doc View Source Resize(int, NativeArrayOptions) Sets the length, expanding the capacity if necessary. Declaration public void Resize(int length, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description int length The new length. NativeArrayOptions options Whether newly allocated bytes should be zeroed out. | Improve this Doc View Source SetCapacity(int) Sets the capacity. Declaration public void SetCapacity(int capacity) Parameters Type Name Description int capacity The new capacity. | Improve this Doc View Source TrimExcess() Sets the capacity to match the length. Declaration public void TrimExcess() | Improve this Doc View Source TryPop(out TValue) Returns value with minimum key. Declaration public bool TryPop(out TValue value) Parameters Type Name Description TValue value Outputs the element removed. Returns Type Description bool True if an element was removed. Remarks Does nothing if the queue is empty. Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeStack-1.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.UnsafeStack-1.html",
    "title": "Struct UnsafeStack<T>",
    "keywords": "Struct UnsafeStack<T> An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation.LowLevel.Unsafe Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeStack<T> : IDisposable where T : unmanaged Type Parameters Name Description T Source type of elements Constructors | Improve this Doc View Source UnsafeStack(int, AllocatorHandle, NativeArrayOptions) Constructs a new stack using the specified type of memory allocation. Declaration public UnsafeStack(int initialCapacity, AllocatorManager.AllocatorHandle allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description int initialCapacity AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Remarks The stack initially has a capacity of one. To avoid reallocating memory for the stack, specify sufficient capacity up front. | Improve this Doc View Source UnsafeStack(T*, int) Constructs stack as view into memory. Declaration public UnsafeStack(T* ptr, int length) Parameters Type Name Description T* ptr int length Fields | Improve this Doc View Source Allocator An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing. Declaration public AllocatorManager.AllocatorHandle Allocator Field Value Type Description AllocatorManager.AllocatorHandle | Improve this Doc View Source Ptr An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing. Declaration [NativeDisableUnsafePtrRestriction] public T* Ptr Field Value Type Description T* | Improve this Doc View Source capacity An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing. Declaration public int capacity Field Value Type Description int | Improve this Doc View Source length An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing. Declaration public int length Field Value Type Description int Properties | Improve this Doc View Source Capacity The number of elements that fit in the current allocation. Declaration public int Capacity { get; set; } Property Value Type Description int The number of elements that fit in the current allocation. | Improve this Doc View Source IsCreated Reports whether memory for the container is allocated. Declaration public bool IsCreated { get; } Property Value Type Description bool True if this container object's internal storage has been allocated. Remarks Note that the container storage is not created if you use the default constructor. You must specify at least an allocation type to construct a usable container. | Improve this Doc View Source IsEmpty Whether the stack is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool True if the stack is empty or the stack has not been constructed. | Improve this Doc View Source Length The number of elements. Declaration public int Length { get; } Property Value Type Description int The number of elements. Methods | Improve this Doc View Source Clear() Clears the container. Declaration public void Clear() Remarks Stack Capacity remains unchanged. | Improve this Doc View Source Create(int, AllocatorHandle, NativeArrayOptions) Creates a new container with the specified initial capacity and type of memory allocation. Declaration public static UnsafeStack<T>* Create(int initialCapacity, AllocatorManager.AllocatorHandle allocator, NativeArrayOptions options = NativeArrayOptions.UninitializedMemory) Parameters Type Name Description int initialCapacity The initial capacity of the list. If the list grows larger than its capacity, the internal array is copied to a new, larger array. AllocatorManager.AllocatorHandle allocator A member of the Unity.Collections.Allocator enumeration. NativeArrayOptions options Memory should be cleared on allocation or left uninitialized. Returns Type Description UnsafeStack<T>* | Improve this Doc View Source Destroy(UnsafeStack<T>*) Destroys container. Declaration public static void Destroy(UnsafeStack<T>* data) Parameters Type Name Description UnsafeStack<T>* data | Improve this Doc View Source Dispose() Disposes of this container and deallocates its memory immediately. Declaration public void Dispose() | Improve this Doc View Source Dispose(JobHandle) Safely disposes of this container and deallocates its memory when the jobs that use it have completed. Declaration public JobHandle Dispose(JobHandle inputDeps) Parameters Type Name Description JobHandle inputDeps The job handle or handles for any scheduled jobs that use this container. Returns Type Description JobHandle A new job handle containing the prior handles as well as the handle for the job that deletes the container. Remarks You can call this function dispose of the container immediately after scheduling the job. Pass the JobHandle returned by the Job.Schedule method using the jobHandle parameter so the job scheduler can dispose the container after all jobs using it have run. | Improve this Doc View Source Pop() Removes the element from the end of the stack. Declaration public T Pop() Returns Type Description T | Improve this Doc View Source Push(T) Pushs an element to the stack. Declaration public void Push(T value) Parameters Type Name Description T value The struct to be added at the end of the stack. | Improve this Doc View Source PushNoResize(T) Pushs an element to the container. Declaration public void PushNoResize(T value) Parameters Type Name Description T value The value to be added at the end of the container. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source PushRangeNoResize(void*, int) Pushs the elements to this container. Declaration public void PushRangeNoResize(void* ptr, int length) Parameters Type Name Description void* ptr A pointer to the buffer. int length The number of elements to add to the container. Remarks If the stack has reached its current capacity, internal array won't be resized, and exception will be thrown. | Improve this Doc View Source SetCapacity(int) Set the number of items that can fit in the stack. Declaration public void SetCapacity(int capacity) Parameters Type Name Description int capacity The number of items that the stack can hold before it resizes its internal storage. | Improve this Doc View Source TrimExcess() Sets the capacity to the actual number of elements in the container. Declaration public void TrimExcess() | Improve this Doc View Source TryPop(out T) Removes the element from the end of the stack. Declaration public bool TryPop(out T value) Parameters Type Name Description T value Outputs the element removed. Returns Type Description bool True if an element was removed. Remarks Does nothing if the queue is empty. Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.LowLevel.Unsafe.html": {
    "href": "api/ProjectDawn.Navigation.LowLevel.Unsafe.html",
    "title": "Namespace ProjectDawn.Navigation.LowLevel.Unsafe",
    "keywords": "Namespace ProjectDawn.Navigation.LowLevel.Unsafe Structs UnsafeBHVTree<TVolume, TValue> An unmanaged, resizable bhv tree, without any thread safety check features. BHV tree (short for bounding hierarchy volume tree) is a space-partitioning data structure for organizing bounding shapes in space. As structure uses generic it is not only usable for boxes, but any shape that implements interfaces. Based on https://box2d.org/files/ErinCatto_DynamicBVH_GDC2019.pdf. UnsafeBHVTree<TVolume, TValue>.Handle Kd Tree iterator. UnsafeBHVTree<TVolume, TValue>.Node UnsafeHeap<TKey, TValue> An unmanaged, resizable min heap, without any thread safety check features. UnsafeStack<T> An managed, resizable stack, without any thread safety check features. Limited version of NativeList that allows only adding to list back or removing."
  },
  "api/ProjectDawn.Navigation.NavMeshAreaCost.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshAreaCost.html",
    "title": "Struct NavMeshAreaCost",
    "keywords": "Struct NavMeshAreaCost Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [InternalBufferCapacity(0)] public struct NavMeshAreaCost : IBufferElementData Fields | Improve this Doc View Source Value Declaration public float Value Field Value Type Description float Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Navigation.NavMeshBoundary.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshBoundary.html",
    "title": "Struct NavMeshBoundary",
    "keywords": "Struct NavMeshBoundary Represents a boundary on the navigation mesh. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshBoundary : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Location The location of the boundary. Declaration public NavMeshLocation Location Field Value Type Description NavMeshLocation | Improve this Doc View Source Radius The radius of the boundary. Declaration public float Radius Field Value Type Description float Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.NavMeshBoundarySystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshBoundarySystem.html",
    "title": "Struct NavMeshBoundarySystem",
    "keywords": "Struct NavMeshBoundarySystem System that for each agent that has sonar with wall collects nearby navmesh edges as walls. Later on these walls are used for avoidance. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct NavMeshBoundarySystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshCorners.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshCorners.html",
    "title": "Struct NavMeshCorners",
    "keywords": "Struct NavMeshCorners Helper structure for getting corners of agent navmesh path. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshCorners : IDisposable Constructors | Improve this Doc View Source NavMeshCorners(int, Entity, Allocator) Helper structure for getting corners of agent navmesh path. Declaration public NavMeshCorners(int capacity, Entity entity, Allocator allocator) Parameters Type Name Description int capacity Entity entity Allocator allocator Methods | Improve this Doc View Source Dispose() Helper structure for getting corners of agent navmesh path. Declaration public void Dispose() | Improve this Doc View Source TryGetCorners(out NativeSlice<NavMeshLocation>) Helper structure for getting corners of agent navmesh path. Declaration public bool TryGetCorners(out NativeSlice<NavMeshLocation> corners) Parameters Type Name Description NativeSlice<NavMeshLocation> corners Returns Type Description bool Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.NavMeshData.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshData.html",
    "title": "Struct NavMeshData",
    "keywords": "Struct NavMeshData Implements ISharedComponentData IQueryTypeParameter IEquatable<NavMeshData> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshData : ISharedComponentData, IQueryTypeParameter, IEquatable<NavMeshData> Fields | Improve this Doc View Source Value Declaration public NavMeshData Value Field Value Type Description NavMeshData Methods | Improve this Doc View Source Equals(NavMeshData) Declaration public bool Equals(NavMeshData other) Parameters Type Name Description NavMeshData other Returns Type Description bool | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Implements Unity.Entities.ISharedComponentData Unity.Entities.IQueryTypeParameter IEquatable<T>"
  },
  "api/ProjectDawn.Navigation.NavMeshDataInstance.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshDataInstance.html",
    "title": "Struct NavMeshDataInstance",
    "keywords": "Struct NavMeshDataInstance Implements ICleanupComponentData IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshDataInstance : ICleanupComponentData, IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source Value Declaration public NavMeshDataInstance Value Field Value Type Description NavMeshDataInstance Implements Unity.Entities.ICleanupComponentData Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.NavMeshDataInstances.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshDataInstances.html",
    "title": "Class NavMeshDataInstances",
    "keywords": "Class NavMeshDataInstances Inheritance object NavMeshDataInstances Implements IComponentData IQueryTypeParameter IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public class NavMeshDataInstances : IComponentData, IQueryTypeParameter, IDisposable Fields | Improve this Doc View Source Instances Declaration public List<NavMeshDataInstance> Instances Field Value Type Description List<NavMeshDataInstance> Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter IDisposable"
  },
  "api/ProjectDawn.Navigation.NavMeshDataSystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshDataSystem.html",
    "title": "Struct NavMeshDataSystem",
    "keywords": "Struct NavMeshDataSystem Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [UpdateInGroup(typeof(InitializationSystemGroup))] [UpdateAfter(typeof(SceneSystemGroup))] public struct NavMeshDataSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshDisplacementSystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshDisplacementSystem.html",
    "title": "Struct NavMeshDisplacementSystem",
    "keywords": "Struct NavMeshDisplacementSystem System that forces agents to stay within NavMesh surface. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentDisplacementSystemGroup))] [UpdateAfter(typeof(AgentColliderSystem))] public struct NavMeshDisplacementSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshFunnel.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshFunnel.html",
    "title": "Struct NavMeshFunnel",
    "keywords": "Struct NavMeshFunnel Used for creating optimal path from navmesh polygons. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshFunnel : IDisposable Constructors | Improve this Doc View Source NavMeshFunnel(int, Allocator) Used for creating optimal path from navmesh polygons. Declaration public NavMeshFunnel(int capacity, Allocator allocator) Parameters Type Name Description int capacity Allocator allocator Properties | Improve this Doc View Source IsEndReachable Used for creating optimal path from navmesh polygons. Declaration public bool IsEndReachable { get; } Property Value Type Description bool Methods | Improve this Doc View Source AsFlags() Returns flags array of the path. Declaration public NativeSlice<StraightPathFlags> AsFlags() Returns Type Description NativeSlice<StraightPathFlags> Returns array of flags. | Improve this Doc View Source AsLocations() Returns locations array of the path. Declaration public NativeSlice<NavMeshLocation> AsLocations() Returns Type Description NativeSlice<NavMeshLocation> Returns array of locations. | Improve this Doc View Source Dispose() Used for creating optimal path from navmesh polygons. Declaration public void Dispose() | Improve this Doc View Source GetCornersDistance() Returns distance of the path. Declaration public float GetCornersDistance() Returns Type Description float | Improve this Doc View Source OptimizePath(NavMeshQuery, DynamicBuffer<PolygonId>, NavMeshLocation, int, NativeArray<float>) Used for creating optimal path from navmesh polygons. Declaration public void OptimizePath(NavMeshQuery query, DynamicBuffer<PolygonId> path, NavMeshLocation from, int areaMask = -1, NativeArray<float> costs = default) Parameters Type Name Description NavMeshQuery query DynamicBuffer<PolygonId> path NavMeshLocation from int areaMask NativeArray<float> costs | Improve this Doc View Source TryCreateStraightPath(NavMeshQuery, NativeSlice<PolygonId>, float3, float3) Recreates corridor with straight path. This method will attempt to build optimal path using NavMesh polygons. Declaration public bool TryCreateStraightPath(NavMeshQuery query, NativeSlice<PolygonId> path, float3 from, float3 to) Parameters Type Name Description NavMeshQuery query The NavMesh query. NativeSlice<PolygonId> path Polygons array. float3 from Starting position. float3 to Destination position. Returns Type Description bool Returns true if path is valid. Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.NavMeshLinkTraversal.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshLinkTraversal.html",
    "title": "Struct NavMeshLinkTraversal",
    "keywords": "Struct NavMeshLinkTraversal Agent off mesh link data that is currently traversing. Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshLinkTraversal : IComponentData, IQueryTypeParameter Fields | Improve this Doc View Source EndPolygon Agent off mesh link data that is currently traversing. Declaration public PolygonId EndPolygon Field Value Type Description PolygonId | Improve this Doc View Source Seek Agent off mesh link data that is currently traversing. Declaration public LinkTraversalSeek Seek Field Value Type Description LinkTraversalSeek | Improve this Doc View Source StartPolygon Agent off mesh link data that is currently traversing. Declaration public PolygonId StartPolygon Field Value Type Description PolygonId Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static NavMeshLinkTraversal Default { get; } Property Value Type Description NavMeshLinkTraversal Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.NavMeshLinkTraversalMode.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshLinkTraversalMode.html",
    "title": "Enum NavMeshLinkTraversalMode",
    "keywords": "Enum NavMeshLinkTraversalMode Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum NavMeshLinkTraversalMode Fields Name Description Custom None Seeking"
  },
  "api/ProjectDawn.Navigation.NavMeshNode.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshNode.html",
    "title": "Struct NavMeshNode",
    "keywords": "Struct NavMeshNode Agent NavMesh single node of path. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshNode : IBufferElementData Fields | Improve this Doc View Source Value Polygon id of NavMesh node. Declaration public PolygonId Value Field Value Type Description PolygonId Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Navigation.NavMeshPath.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshPath.html",
    "title": "Struct NavMeshPath",
    "keywords": "Struct NavMeshPath Agent NavMesh path. Implements IComponentData IQueryTypeParameter IEnableableComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshPath : IComponentData, IQueryTypeParameter, IEnableableComponent Fields | Improve this Doc View Source AgentTypeId The type ID for the agent in NavMesh. Declaration public int AgentTypeId Field Value Type Description int | Improve this Doc View Source AreaMask Specifies which NavMesh areas are passable. Changing areaMask will make the path stale (see isPathStale). Declaration public int AreaMask Field Value Type Description int | Improve this Doc View Source AutoRepath Should the agent attempt to acquire a new path if the existing path becomes invalid? Declaration public bool AutoRepath Field Value Type Description bool | Improve this Doc View Source EndLocation End location of the agent on NavMesh. Declaration public NavMeshLocation EndLocation Field Value Type Description NavMeshLocation | Improve this Doc View Source Grounded Constraint agent to be on the surface. It is useful to disable then used with physics, to allow more freedom motion and precision. Declaration public Grounded Grounded Field Value Type Description Grounded | Improve this Doc View Source Location Current location of the agent on NavMesh. Declaration public NavMeshLocation Location Field Value Type Description NavMeshLocation | Improve this Doc View Source MappingExtent Maximum distance on each axis will be used when attempting to map the agent's position or destination onto navmesh. The higher the value, the bigger the performance cost. Declaration public float3 MappingExtent Field Value Type Description float3 | Improve this Doc View Source OptimizePath Agent NavMesh path. Declaration public bool OptimizePath Field Value Type Description bool | Improve this Doc View Source QueryHandle Query handle of current requested path. Declaration public NavMeshQueryHandle QueryHandle Field Value Type Description NavMeshQueryHandle | Improve this Doc View Source State State of the path. Declaration public NavMeshPathState State Field Value Type Description NavMeshPathState Properties | Improve this Doc View Source Default Returns default configuration. Declaration public static NavMeshPath Default { get; } Property Value Type Description NavMeshPath | Improve this Doc View Source HasFullPath Agent NavMesh path. Declaration public bool HasFullPath { get; } Property Value Type Description bool | Improve this Doc View Source HasPartialPath Agent NavMesh path. Declaration public bool HasPartialPath { get; } Property Value Type Description bool | Improve this Doc View Source HasPath Agent NavMesh path. Declaration public bool HasPath { get; } Property Value Type Description bool Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter Unity.Entities.IEnableableComponent"
  },
  "api/ProjectDawn.Navigation.NavMeshPathState.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshPathState.html",
    "title": "Enum NavMeshPathState",
    "keywords": "Enum NavMeshPathState State of the path. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum NavMeshPathState Fields Name Description Failed NavMesg path building failed. See editor console for more information. Finished NavMesh path building is finished. Check NavMeshNode buffer for result. FinishedFullPath State of the path. FinishedPartialPath State of the path. InProgress NavMesh path building is in progress. InValid NavMesh path is no longer valid. WaitingNewPath Waiting for new NavMesh path requested to be handled."
  },
  "api/ProjectDawn.Navigation.NavMeshPathSystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshPathSystem.html",
    "title": "Struct NavMeshPathSystem",
    "keywords": "Struct NavMeshPathSystem System that controls agent NavMesh path. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct NavMeshPathSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshQueryHandle.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshQueryHandle.html",
    "title": "Struct NavMeshQueryHandle",
    "keywords": "Struct NavMeshQueryHandle Represents handle of NavMeshQuery used by NavMeshQuerySystem. Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshQueryHandle Fields | Improve this Doc View Source Index Unique index of NavMesh query. Declaration public int Index Field Value Type Description int Properties | Improve this Doc View Source Null Invalid NavMesh query. Declaration public static NavMeshQueryHandle Null { get; } Property Value Type Description NavMeshQueryHandle Methods | Improve this Doc View Source Equals(NavMeshQueryHandle) Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public bool Equals(NavMeshQueryHandle other) Parameters Type Name Description NavMeshQueryHandle other Returns Type Description bool | Improve this Doc View Source Equals(object) Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public override bool Equals(object compare) Parameters Type Name Description object compare Returns Type Description bool Overrides ValueType.Equals(object) | Improve this Doc View Source GetHashCode() Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source operator ==(NavMeshQueryHandle, NavMeshQueryHandle) Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public static bool operator ==(NavMeshQueryHandle lhs, NavMeshQueryHandle rhs) Parameters Type Name Description NavMeshQueryHandle lhs NavMeshQueryHandle rhs Returns Type Description bool | Improve this Doc View Source implicit operator int(NavMeshQueryHandle) Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public static implicit operator int(NavMeshQueryHandle handle) Parameters Type Name Description NavMeshQueryHandle handle Returns Type Description int | Improve this Doc View Source operator !=(NavMeshQueryHandle, NavMeshQueryHandle) Represents handle of NavMeshQuery used by NavMeshQuerySystem. Declaration public static bool operator !=(NavMeshQueryHandle lhs, NavMeshQueryHandle rhs) Parameters Type Name Description NavMeshQueryHandle lhs NavMeshQueryHandle rhs Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.NavMeshQueryStatus.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshQueryStatus.html",
    "title": "Enum NavMeshQueryStatus",
    "keywords": "Enum NavMeshQueryStatus The status of navmesh query. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum NavMeshQueryStatus Fields Name Description Allocated Path is allocated. Failed Failed to construct path. Finished Path is finished. FinishedFullPath Full path is finished, where destination is reachable. FinishedPartialPath Partial path is finished, where it leads close enough to destination. Free Path is already released. InProgress Path is in progress. None The status of navmesh query."
  },
  "api/ProjectDawn.Navigation.NavMeshQuerySystem.Singleton.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshQuerySystem.Singleton.html",
    "title": "Struct NavMeshQuerySystem.Singleton",
    "keywords": "Struct NavMeshQuerySystem.Singleton Implements IComponentData IQueryTypeParameter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshQuerySystem.Singleton : IComponentData, IQueryTypeParameter Properties | Improve this Doc View Source World Declaration public NavMeshWorld World { get; } Property Value Type Description NavMeshWorld Methods | Improve this Doc View Source CreateQuery(NavMeshLocation, NavMeshLocation, int, int, NativeArray<float>) Creates new navmesh query to construct optimal path. Declaration public NavMeshQueryHandle CreateQuery(NavMeshLocation from, NavMeshLocation to, int agentTypeId = 0, int areaMask = -1, NativeArray<float> costs = default) Parameters Type Name Description NavMeshLocation from NavMeshLocation to int agentTypeId int areaMask NativeArray<float> costs Returns Type Description NavMeshQueryHandle | Improve this Doc View Source DestroyQuery(NavMeshQueryHandle) Release navmesh query for reuse. Declaration public void DestroyQuery(NavMeshQueryHandle handle) Parameters Type Name Description NavMeshQueryHandle handle | Improve this Doc View Source Exist(NavMeshQueryHandle) Returns true if navmesh query exists. Declaration public bool Exist(NavMeshQueryHandle handle) Parameters Type Name Description NavMeshQueryHandle handle Returns Type Description bool | Improve this Doc View Source GetEdgesAndNeighbors(PolygonId, NativeSlice<Vector3>, NativeSlice<PolygonId>, NativeSlice<byte>, out int, out int) Returns surface information of navmesh node. Declaration public bool GetEdgesAndNeighbors(PolygonId node, NativeSlice<Vector3> vertices, NativeSlice<PolygonId> nodes, NativeSlice<byte> indices, out int numVertices, out int numNodes) Parameters Type Name Description PolygonId node NativeSlice<Vector3> vertices NativeSlice<PolygonId> nodes NativeSlice<byte> indices int numVertices int numNodes Returns Type Description bool | Improve this Doc View Source GetPolygonType(PolygonId) Declaration public NavMeshPolyTypes GetPolygonType(PolygonId path) Parameters Type Name Description PolygonId path Returns Type Description NavMeshPolyTypes | Improve this Doc View Source GetPolygons(NavMeshQueryHandle) Returns path that is represented as array of nodes. Can be used for construcing NavMeshFunnel. Declaration public NativeSlice<PolygonId> GetPolygons(NavMeshQueryHandle handle) Parameters Type Name Description NavMeshQueryHandle handle Returns Type Description NativeSlice<PolygonId> | Improve this Doc View Source GetPortalPoints(PolygonId, PolygonId, out float3, out float3) Declaration public bool GetPortalPoints(PolygonId from, PolygonId to, out float3 portalLeft, out float3 portalRight) Parameters Type Name Description PolygonId from PolygonId to float3 portalLeft float3 portalRight Returns Type Description bool | Improve this Doc View Source GetPortalPoints(PolygonId, PolygonId, out Vector3, out Vector3) Declaration public bool GetPortalPoints(PolygonId polygon, PolygonId neighbourPolygon, out Vector3 left, out Vector3 right) Parameters Type Name Description PolygonId polygon PolygonId neighbourPolygon Vector3 left Vector3 right Returns Type Description bool | Improve this Doc View Source GetStatus(NavMeshQueryHandle) Returns status of navmesh query. Declaration public NavMeshQueryStatus GetStatus(NavMeshQueryHandle handle) Parameters Type Name Description NavMeshQueryHandle handle Returns Type Description NavMeshQueryStatus | Improve this Doc View Source IsPathValid(NativeSlice<PolygonId>) Returns true, if all nodes in array are valid. Does not check, if the nodes are connected. Declaration public bool IsPathValid(NativeSlice<PolygonId> path) Parameters Type Name Description NativeSlice<PolygonId> path Returns Type Description bool | Improve this Doc View Source IsValid(PolygonId) Returns true, if node is valid. Declaration public bool IsValid(PolygonId path) Parameters Type Name Description PolygonId path Returns Type Description bool | Improve this Doc View Source MapLocation(float3, float3, int, int) Returns navmesh location from specified one. This is HPC# version of SamplePosition(Vector3, out NavMeshHit, float, int). Declaration public NavMeshLocation MapLocation(float3 position, float3 extents, int agentTypeID, int areaMask = -1) Parameters Type Name Description float3 position float3 extents int agentTypeID int areaMask Returns Type Description NavMeshLocation | Improve this Doc View Source MoveLocation(NavMeshLocation, float3, int) Moves navmesh location to specified position. This is usually used for finding new position without steping over the obstacles. Declaration public NavMeshLocation MoveLocation(NavMeshLocation location, float3 target, int areaMask = -1) Parameters Type Name Description NavMeshLocation location float3 target int areaMask Returns Type Description NavMeshLocation | Improve this Doc View Source OptimizePath(ref NavMeshFunnel, DynamicBuffer<PolygonId>, NavMeshLocation, int, NativeArray<float>) Declaration public void OptimizePath(ref NavMeshFunnel funnel, DynamicBuffer<PolygonId> path, NavMeshLocation from, int areaMask = -1, NativeArray<float> costs = default) Parameters Type Name Description NavMeshFunnel funnel DynamicBuffer<PolygonId> path NavMeshLocation from int areaMask NativeArray<float> costs | Improve this Doc View Source ProgressPath(ref DynamicBuffer<NavMeshNode>, PolygonId, PolygonId) Progress path by either removing or adding nodes. If newPolygon exists in path, it shortens path up to that node. Otherwise it attempts to add newPolygon to path. This method can produce invalid path, if newPolygon is can not be connected to path, it is expected that funnel will request new path in that case. Declaration public void ProgressPath(ref DynamicBuffer<NavMeshNode> nodes, PolygonId previousPolygon, PolygonId newPolygon) Parameters Type Name Description DynamicBuffer<NavMeshNode> nodes PolygonId previousPolygon PolygonId newPolygon | Improve this Doc View Source Raycast(out NavMeshHit, NavMeshLocation, Vector3, int, NativeArray<float>) Declaration public PathQueryStatus Raycast(out NavMeshHit hit, NavMeshLocation start, Vector3 targetPosition, int areaMask = -1, NativeArray<float> costs = default) Parameters Type Name Description NavMeshHit hit NavMeshLocation start Vector3 targetPosition int areaMask NativeArray<float> costs Returns Type Description PathQueryStatus | Improve this Doc View Source TryCreateFunnel(ref NavMeshFunnel, NativeSlice<PolygonId>, float3, float3) Creates navmesh funnel out of navmesh nodes. Declaration public bool TryCreateFunnel(ref NavMeshFunnel funnel, NativeSlice<PolygonId> path, float3 from, float3 to) Parameters Type Name Description NavMeshFunnel funnel NativeSlice<PolygonId> path float3 from float3 to Returns Type Description bool Implements Unity.Entities.IComponentData Unity.Entities.IQueryTypeParameter"
  },
  "api/ProjectDawn.Navigation.NavMeshQuerySystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshQuerySystem.html",
    "title": "Struct NavMeshQuerySystem",
    "keywords": "Struct NavMeshQuerySystem System for requesting NavMesh path. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateInGroup(typeof(InitializationSystemGroup))] public struct NavMeshQuerySystem : ISystem, ISystemCompilerGenerated Methods | Improve this Doc View Source OnCreate(ref SystemState) Called when this system is created. Declaration public void OnCreate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Implement an OnCreate function to set up system resources when it is created. OnCreate is invoked before the the first time Unity.Entities.ISystemStartStop.OnStartRunning(ref Unity.Entities.SystemState) and Unity.Entities.ISystem.OnUpdate(ref Unity.Entities.SystemState) are invoked. OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance | Improve this Doc View Source OnDestroy(ref SystemState) Called when this system is destroyed. Declaration [BurstCompile] public void OnDestroy(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks Systems are destroyed when the application shuts down, the World is destroyed, or you call Unity.Entities.World.DestroySystem(Unity.Entities.SystemHandle). In the Unity Editor, system destruction occurs when you exit Play Mode and when scripts are reloaded. | Improve this Doc View Source OnUpdate(ref SystemState) Implement OnUpdate to perform the major work of this system. Declaration [BurstCompile] public void OnUpdate(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Remarks By default, the system invokes `OnUpdate` once every frame on the main thread. To skip OnUpdate if all of the system's [EntityQueries] are empty, use the [RequireMatchingQueriesForUpdateAttribute]. To limit when OnUpdate is invoked, you can specify components that must exist, or queries that match specific Entities. To do this, call Unity.Entities.SystemState.RequireForUpdate<T>() or Unity.Entities.SystemState.RequireForUpdate(Unity.Entities.EntityQuery) in the system's OnCreate method. For more information, see Unity.Entities.SystemState.ShouldRunSystem(). You can instantiate and schedule an Unity.Entities.IJobChunk instance; you can use the [C# Job System] or you can perform work on the main thread. If you call Unity.Entities.EntityManager methods that perform structural changes on the main thread, be sure to arrange the system order to minimize the performance impact of the resulting [sync points]. Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshSteeringSystem.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshSteeringSystem.html",
    "title": "Struct NavMeshSteeringSystem",
    "keywords": "Struct NavMeshSteeringSystem System that steers agents within the NavMesh path. Implements ISystem ISystemCompilerGenerated Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [BurstCompile] [UpdateAfter(typeof(NavMeshBoundarySystem))] [UpdateAfter(typeof(NavMeshPathSystem))] [UpdateInGroup(typeof(AgentPathingSystemGroup))] public struct NavMeshSteeringSystem : ISystem, ISystemCompilerGenerated Methods OnCreateForCompiler(ref SystemState) Generated by compilation pipeline and used internally. Declaration public void OnCreateForCompiler(ref SystemState state) Parameters Type Name Description SystemState state The Unity.Entities.SystemState backing this system instance Implements Unity.Entities.ISystem Unity.Entities.ISystemCompilerGenerated"
  },
  "api/ProjectDawn.Navigation.NavMeshWall.html": {
    "href": "api/ProjectDawn.Navigation.NavMeshWall.html",
    "title": "Struct NavMeshWall",
    "keywords": "Struct NavMeshWall Represents a wall on the navigation mesh. Implements IBufferElementData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct NavMeshWall : IBufferElementData Constructors | Improve this Doc View Source NavMeshWall(float3, float3) Constructs a new instance of the NavMeshWall struct. Declaration public NavMeshWall(float3 from, float3 to) Parameters Type Name Description float3 from The start point of the wall. float3 to The end point of the wall. Fields | Improve this Doc View Source End The end point of the wall. Declaration public float3 End Field Value Type Description float3 | Improve this Doc View Source Start The start point of the wall. Declaration public float3 Start Field Value Type Description float3 Properties | Improve this Doc View Source Direction Represents a wall on the navigation mesh. Declaration public float3 Direction { get; } Property Value Type Description float3 Implements Unity.Entities.IBufferElementData"
  },
  "api/ProjectDawn.Navigation.NavigationLayerNames.html": {
    "href": "api/ProjectDawn.Navigation.NavigationLayerNames.html",
    "title": "Class NavigationLayerNames",
    "keywords": "Class NavigationLayerNames Inheritance object NavigationLayerNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public class NavigationLayerNames Properties | Improve this Doc View Source Names Declaration public string[] Names { get; } Property Value Type Description string[]"
  },
  "api/ProjectDawn.Navigation.NavigationLayerUtility.html": {
    "href": "api/ProjectDawn.Navigation.NavigationLayerUtility.html",
    "title": "Class NavigationLayerUtility",
    "keywords": "Class NavigationLayerUtility Inheritance object NavigationLayerUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public static class NavigationLayerUtility Methods | Improve this Doc View Source Add(ref NavigationLayers, NavigationLayers) Declaration public static void Add(this ref NavigationLayers lhs, NavigationLayers rhs) Parameters Type Name Description NavigationLayers lhs NavigationLayers rhs | Improve this Doc View Source All(NavigationLayers, NavigationLayers) Declaration public static bool All(this NavigationLayers lhs, NavigationLayers rhs) Parameters Type Name Description NavigationLayers lhs NavigationLayers rhs Returns Type Description bool | Improve this Doc View Source Any(NavigationLayers, NavigationLayers) Declaration public static bool Any(this NavigationLayers lhs, NavigationLayers rhs) Parameters Type Name Description NavigationLayers lhs NavigationLayers rhs Returns Type Description bool | Improve this Doc View Source TryGetLayerMask(string, out NavigationLayers) Declaration public static bool TryGetLayerMask(string name, out NavigationLayers mask) Parameters Type Name Description string name NavigationLayers mask Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.NavigationLayers.html": {
    "href": "api/ProjectDawn.Navigation.NavigationLayers.html",
    "title": "Enum NavigationLayers",
    "keywords": "Enum NavigationLayers Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Flags] public enum NavigationLayers Fields Name Description Default Everything Layer1 Layer10 Layer11 Layer12 Layer13 Layer14 Layer15 Layer16 Layer17 Layer18 Layer19 Layer2 Layer20 Layer21 Layer22 Layer23 Layer24 Layer25 Layer26 Layer27 Layer28 Layer29 Layer3 Layer30 Layer31 Layer4 Layer5 Layer6 Layer7 Layer8 Layer9 None Extension Methods NavigationLayerUtility.Add(ref NavigationLayers, NavigationLayers) NavigationLayerUtility.All(NavigationLayers, NavigationLayers) NavigationLayerUtility.Any(NavigationLayers, NavigationLayers)"
  },
  "api/ProjectDawn.Navigation.OculusAvoidance.html": {
    "href": "api/ProjectDawn.Navigation.OculusAvoidance.html",
    "title": "Struct OculusAvoidance",
    "keywords": "Struct OculusAvoidance Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct OculusAvoidance : IDisposable Properties | Improve this Doc View Source IsCreated Declaration public bool IsCreated { get; } Property Value Type Description bool Methods | Improve this Doc View Source AddObstacleHeightField(DepthWorld, bool) Declaration public void AddObstacleHeightField(DepthWorld world, bool splat) Parameters Type Name Description DepthWorld world bool splat | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DrawAvoidanceDirection(OculusAvoidanceWeights, GizmosCommandBuffer) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawAvoidanceDirection(OculusAvoidanceWeights weights, GizmosCommandBuffer gizmos) Parameters Type Name Description OculusAvoidanceWeights weights GizmosCommandBuffer gizmos | Improve this Doc View Source DrawNeighbours(GizmosCommandBuffer) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawNeighbours(GizmosCommandBuffer gizmos) Parameters Type Name Description GizmosCommandBuffer gizmos | Improve this Doc View Source DrawOcclusion(GizmosCommandBuffer) Declaration [Conditional(\"UNITY_EDITOR\")] public void DrawOcclusion(GizmosCommandBuffer gizmos) Parameters Type Name Description GizmosCommandBuffer gizmos | Improve this Doc View Source GetAvoidanceDirection(OculusAvoidanceWeights) Declaration public float3 GetAvoidanceDirection(OculusAvoidanceWeights weights) Parameters Type Name Description OculusAvoidanceWeights weights Returns Type Description float3 | Improve this Doc View Source NewHemiSphere17(Allocator) Declaration public static OculusAvoidance NewHemiSphere17(Allocator allocator) Parameters Type Name Description Allocator allocator Returns Type Description OculusAvoidance | Improve this Doc View Source NewHemiSphere25(Allocator) Declaration public static OculusAvoidance NewHemiSphere25(Allocator allocator) Parameters Type Name Description Allocator allocator Returns Type Description OculusAvoidance | Improve this Doc View Source Set(float3, float3, Quaternion, float) Declaration public void Set(float3 position, float3 velocity, Quaternion orentation, float radius) Parameters Type Name Description float3 position float3 velocity Quaternion orentation float radius Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.OculusAvoidanceWeights.html": {
    "href": "api/ProjectDawn.Navigation.OculusAvoidanceWeights.html",
    "title": "Struct OculusAvoidanceWeights",
    "keywords": "Struct OculusAvoidanceWeights Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct OculusAvoidanceWeights Constructors | Improve this Doc View Source OculusAvoidanceWeights(float, float, float) Declaration public OculusAvoidanceWeights(float direction, float occlusion, float veloecity) Parameters Type Name Description float direction float occlusion float veloecity Fields | Improve this Doc View Source Direction Declaration [Tooltip(\"Determines how likely the avoidance system will choose a direction close to the desired one. A value closer to 1 will favor directions aligned with the desired target direction.\")] [Range(0, 1)] public float Direction Field Value Type Description float | Improve this Doc View Source Occlusion Declaration [Tooltip(\"Controls how likely the avoidance system will choose a direction that minimizes occlusion by obstacles. A value closer to 1 will prioritize less obstructed paths.\")] [Range(0, 1)] public float Occlusion Field Value Type Description float | Improve this Doc View Source Velocity Declaration [Tooltip(\"Indicates how likely the avoidance system will select a direction close to the current velocity of the agent. A value closer to 1 will favor maintaining the agent’s momentum.\")] [Range(0, 1)] public float Velocity Field Value Type Description float Properties | Improve this Doc View Source Default Declaration public static OculusAvoidanceWeights Default { get; } Property Value Type Description OculusAvoidanceWeights | Improve this Doc View Source IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description bool Methods | Improve this Doc View Source Normalize() Declaration public void Normalize()"
  },
  "api/ProjectDawn.Navigation.PathUtils.html": {
    "href": "api/ProjectDawn.Navigation.PathUtils.html",
    "title": "Class PathUtils",
    "keywords": "Class PathUtils Inheritance object PathUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public class PathUtils Methods | Improve this Doc View Source FindStraightPath(NavMeshQuery, Vector3, Vector3, NativeSlice<PolygonId>, int, ref NativeArray<NavMeshLocation>, ref NativeArray<StraightPathFlags>, ref NativeArray<float>, ref int, int) Declaration public static PathQueryStatus FindStraightPath(NavMeshQuery query, Vector3 startPos, Vector3 endPos, NativeSlice<PolygonId> path, int pathSize, ref NativeArray<NavMeshLocation> straightPath, ref NativeArray<StraightPathFlags> straightPathFlags, ref NativeArray<float> vertexSide, ref int straightPathCount, int maxStraightPath) Parameters Type Name Description NavMeshQuery query Vector3 startPos Vector3 endPos NativeSlice<PolygonId> path int pathSize NativeArray<NavMeshLocation> straightPath NativeArray<StraightPathFlags> straightPathFlags NativeArray<float> vertexSide int straightPathCount int maxStraightPath Returns Type Description PathQueryStatus | Improve this Doc View Source Perp2D(Vector3, Vector3) Declaration public static float Perp2D(Vector3 u, Vector3 v) Parameters Type Name Description Vector3 u Vector3 v Returns Type Description float | Improve this Doc View Source RetracePortals(NavMeshQuery, int, int, NativeSlice<PolygonId>, int, Vector3, ref NativeArray<NavMeshLocation>, ref NativeArray<StraightPathFlags>, int) Declaration public static int RetracePortals(NavMeshQuery query, int startIndex, int endIndex, NativeSlice<PolygonId> path, int n, Vector3 termPos, ref NativeArray<NavMeshLocation> straightPath, ref NativeArray<StraightPathFlags> straightPathFlags, int maxStraightPath) Parameters Type Name Description NavMeshQuery query int startIndex int endIndex NativeSlice<PolygonId> path int n Vector3 termPos NativeArray<NavMeshLocation> straightPath NativeArray<StraightPathFlags> straightPathFlags int maxStraightPath Returns Type Description int | Improve this Doc View Source Swap(ref Vector3, ref Vector3) Declaration public static void Swap(ref Vector3 a, ref Vector3 b) Parameters Type Name Description Vector3 a Vector3 b"
  },
  "api/ProjectDawn.Navigation.Portal.html": {
    "href": "api/ProjectDawn.Navigation.Portal.html",
    "title": "Struct Portal",
    "keywords": "Struct Portal Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct Portal Constructors | Improve this Doc View Source Portal(float3) Declaration public Portal(float3 point) Parameters Type Name Description float3 point | Improve this Doc View Source Portal(float3, float3) Declaration public Portal(float3 left, float3 right) Parameters Type Name Description float3 left float3 right Fields | Improve this Doc View Source Left Declaration public float3 Left Field Value Type Description float3 | Improve this Doc View Source Right Declaration public float3 Right Field Value Type Description float3 Methods | Improve this Doc View Source GetClosestPortalPoint(float3) Returns closest point from position to portal line. Declaration public float3 GetClosestPortalPoint(float3 position) Parameters Type Name Description float3 position Returns Type Description float3"
  },
  "api/ProjectDawn.Navigation.Range.html": {
    "href": "api/ProjectDawn.Navigation.Range.html",
    "title": "Struct Range",
    "keywords": "Struct Range Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public struct Range Constructors | Improve this Doc View Source Range(float, float) Declaration public Range(float start, float end) Parameters Type Name Description float start float end Fields | Improve this Doc View Source End Declaration public float End Field Value Type Description float | Improve this Doc View Source Start Declaration public float Start Field Value Type Description float Properties | Improve this Doc View Source Length Declaration public float Length { get; } Property Value Type Description float Methods | Improve this Doc View Source Contains(float) Declaration public bool Contains(float value) Parameters Type Name Description float value Returns Type Description bool"
  },
  "api/ProjectDawn.Navigation.RangeExt.html": {
    "href": "api/ProjectDawn.Navigation.RangeExt.html",
    "title": "Class RangeExt",
    "keywords": "Class RangeExt Inheritance object RangeExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public static class RangeExt Methods | Improve this Doc View Source NextFloat(ref Random, Range) Declaration public static float NextFloat(this ref Random random, Range range) Parameters Type Name Description Random random Range range Returns Type Description float"
  },
  "api/ProjectDawn.Navigation.ShapeType.html": {
    "href": "api/ProjectDawn.Navigation.ShapeType.html",
    "title": "Enum ShapeType",
    "keywords": "Enum ShapeType Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum ShapeType Fields Name Description Circle Cylinder"
  },
  "api/ProjectDawn.Navigation.SonarAvoidMode.html": {
    "href": "api/ProjectDawn.Navigation.SonarAvoidMode.html",
    "title": "Enum SonarAvoidMode",
    "keywords": "Enum SonarAvoidMode Modifications of sonar avoidance funcionality. Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum SonarAvoidMode Fields Name Description Default Default mode. IgnoreBehindAgents Ignores agents that are behind."
  },
  "api/ProjectDawn.Navigation.SpatialPartitioningSubSettings.QueryCheckMode.html": {
    "href": "api/ProjectDawn.Navigation.SpatialPartitioningSubSettings.QueryCheckMode.html",
    "title": "Enum SpatialPartitioningSubSettings.QueryCheckMode",
    "keywords": "Enum SpatialPartitioningSubSettings.QueryCheckMode Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public enum SpatialPartitioningSubSettings.QueryCheckMode Fields Name Description _16 _32"
  },
  "api/ProjectDawn.Navigation.SpatialPartitioningSubSettings.html": {
    "href": "api/ProjectDawn.Navigation.SpatialPartitioningSubSettings.html",
    "title": "Class SpatialPartitioningSubSettings",
    "keywords": "Class SpatialPartitioningSubSettings Inheritance object SpatialPartitioningSubSettings Implements ISubSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Serializable] public class SpatialPartitioningSubSettings : ISubSettings Properties | Improve this Doc View Source CellSize The size of single cell. Declaration public float3 CellSize { get; } Property Value Type Description float3 | Improve this Doc View Source LayerNames Declaration public string[] LayerNames { get; } Property Value Type Description string[] | Improve this Doc View Source QueryCapacity The maximum number of nearby neighbors to be included in the avoidance systems will be determined. Declaration public int QueryCapacity { get; } Property Value Type Description int | Improve this Doc View Source QueryChecks The maximum number of nearby neighbors will be checked to find closest. Declaration public int QueryChecks { get; } Property Value Type Description int Implements ISubSettings"
  },
  "api/ProjectDawn.Navigation.StraightPathFlags.html": {
    "href": "api/ProjectDawn.Navigation.StraightPathFlags.html",
    "title": "Enum StraightPathFlags",
    "keywords": "Enum StraightPathFlags Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax [Flags] public enum StraightPathFlags Fields Name Description End OffMeshConnection Start"
  },
  "api/ProjectDawn.Navigation.UnsafeDepthWorld.html": {
    "href": "api/ProjectDawn.Navigation.UnsafeDepthWorld.html",
    "title": "Struct UnsafeDepthWorld",
    "keywords": "Struct UnsafeDepthWorld Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: ProjectDawn.Navigation Assembly: ProjectDawn.Navigation.dll Syntax public struct UnsafeDepthWorld : IDisposable Constructors | Improve this Doc View Source UnsafeDepthWorld(int, int, NonUniformTransform, AllocatorHandle) Declaration public UnsafeDepthWorld(int width, int height, NonUniformTransform transform, AllocatorManager.AllocatorHandle allocator) Parameters Type Name Description int width int height NonUniformTransform transform AllocatorManager.AllocatorHandle allocator Properties | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description int | Improve this Doc View Source HeightField Declaration public NativeArray<float> HeightField { get; } Property Value Type Description NativeArray<float> | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description int | Improve this Doc View Source Transform Declaration public NonUniformTransform Transform { get; } Property Value Type Description NonUniformTransform | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description int Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetCell(int) Converts index to cell. Declaration public int2 GetCell(int index) Parameters Type Name Description int index Returns Type Description int2 | Improve this Doc View Source GetCellIndex(int2) Converts cell to index. Declaration public int GetCellIndex(int2 point) Parameters Type Name Description int2 point Returns Type Description int | Improve this Doc View Source GetCellPosition(int2) Returns cell enter world space position. Declaration public float3 GetCellPosition(int2 cell) Parameters Type Name Description int2 cell Returns Type Description float3 | Improve this Doc View Source GetHeight(int2) Declaration public float GetHeight(int2 cell) Parameters Type Name Description int2 cell Returns Type Description float | Improve this Doc View Source IsSphereOverlap(float3, float) Declaration public bool IsSphereOverlap(float3 center, float radius) Parameters Type Name Description float3 center float radius Returns Type Description bool | Improve this Doc View Source IsValidCell(int2) Returns true, if cell is within world bounds and has no obstacle. Declaration public bool IsValidCell(int2 cell) Parameters Type Name Description int2 cell Returns Type Description bool | Improve this Doc View Source IsValidQuad(float2, float2) Declaration public bool IsValidQuad(float2 start, float2 end) Parameters Type Name Description float2 start float2 end Returns Type Description bool | Improve this Doc View Source IsValidQuad(float3, float3) Declaration public bool IsValidQuad(float3 position, float3 size) Parameters Type Name Description float3 position float3 size Returns Type Description bool | Improve this Doc View Source MapLocation(float3, float) Declaration public float3 MapLocation(float3 position, float heightOffset = 0) Parameters Type Name Description float3 position float heightOffset Returns Type Description float3 | Improve this Doc View Source SampleHeight(float2) Declaration public float SampleHeight(float2 point) Parameters Type Name Description float2 point Returns Type Description float | Improve this Doc View Source SampleHeight(float3) Declaration public float SampleHeight(float3 position) Parameters Type Name Description float3 position Returns Type Description float | Improve this Doc View Source SetHeightField(ReadOnlySpan<float>) Declaration public void SetHeightField(ReadOnlySpan<float> heights) Parameters Type Name Description ReadOnlySpan<float> heights | Improve this Doc View Source TryGetCell(float3, out int2) Returns cell, if it is valid. Declaration public bool TryGetCell(float3 position, out int2 cell) Parameters Type Name Description float3 position int2 cell Returns Type Description bool Implements IDisposable"
  },
  "api/ProjectDawn.Navigation.html": {
    "href": "api/ProjectDawn.Navigation.html",
    "title": "Namespace ProjectDawn.Navigation",
    "keywords": "Namespace ProjectDawn.Navigation Classes AgentActionSystemGroup AgentDisplacementSystemGroup AgentForceSystemGroup AgentLocomotionSystemGroup AgentPathingSystemGroup AgentPositionSystemGroup AgentSeekingSystemGroup AgentSpatialSystemGroup AgentSteeringSystemGroup AgentSystemGroup AgentTransformSystemGroup AgentsNavigationSettings Settings asset of agents navigation package. Contains list of sub settings combined from classes that implement ISubSettings interface. CollectionChecks ColliderSubSettings CrowdData Crowd data used for initializing topographical surface data. CrowdFlows CrowdWorlds GeometryUtils NavMeshDataInstances NavigationLayerNames NavigationLayerUtility PathUtils RangeExt SpatialPartitioningSubSettings Structs Agent Agent tag. AgentBody Agent's body movement. AgentCollider This component tags, if agent should collide with nearby agents. AgentColliderSystem AgentCrowdPath Agent Crowd pathing. AgentDepthCollider AgentDepthCollisionSystem AgentFlock Agent flocking with nearby agents. AgentFlockSystem AgentFlockingSystem System that calculates Flock direction from nearby agents. AgentForceSystem AgentGrounding This component tags, if agent Unity.Transforms.LocalTransform.Position y should be grounded using unity physics. AgentGroundingSlope This component tags, if agent Force should be grounded using unity physics. AgentGroundingSlopeSystem AgentGroundingSystem AgentLocomotion AgentLocomotionSystem AgentOculusAvoid AgentOculusAvoidSystem System that calculates avoidance direction from nearby agents. AgentReciprocalAvoid AgentReciprocalAvoidSystem AgentSeekingSystem System that steers agent towards destination. AgentSeparation Agent separation from nearby agents. AgentSeparationSystem System that calculates separation direction from nearby agents. AgentShape Represents agent shape in space. In the future this component might be split into specific shape components instead of having one big generic. AgentSmartStop Agent smart stop to handle some common stuck scenarios. AgentSmartStopSystem AgentSonarAvoid Agent avoidance of nearby agents using Sonar Avoidance algorithm. AgentSonarAvoidSystem System that calculates avoidance direction from nearby agents. AgentSpatialPartitioningSystem Partitions agents into arbitary size cells. This allows to query nearby agents more efficiently. Space is partitioned using multi hash map. AgentSpatialPartitioningSystem.Singleton AgentSteering Agent's steering towards destination with arrival. AgentSteeringSystem System that steers agent towards destination. Bird BirdLocomotion Agent's locomotion that moves towards destination with arrival. BirdLocomotionSystem BirdSeekingSystem System that steers agent towards destination. BirdSystem BirdWander CrowdData.Baked CrowdData.ObjectCollection Settings that define objects that will be collected for crowd surface data baking. CrowdDiscomfort Discomfort volume of crowd agents. CrowdDiscomfortSplat CrowdDisplacementSystem CrowdFlowSystem CrowdGoalSystem CrowdGroup Crowd group settings. CrowdGroupFlow Crowd group runtime created ProjectDawn.ContinuumCrowds.CrowdFlow. CrowdObstacle Obstacle volume of crowd agents. CrowdObstacleSplat CrowdSteeringSystem CrowdSurface Crowd surface settings. CrowdSurfaceData Crowd surface CrowdData. CrowdSurfaceSystem CrowdSurfaceWorld Crowd surface runtime created ProjectDawn.ContinuumCrowds.CrowdWorld. CrowdWorldSystem DepthSurface Depth surface settings. DepthSurfaceSystem DepthSurfaceWorld Depth surface runtime created DepthWorld. DepthWorld World in which Depth will navigate. This container does not contain thread safety checks, make sure it is contained in structure that ensures that. DepthWorlds DrawGizmos Tag for drawing gizmos. FlockEntity Single entity of the FlockGroup. FlockGroup Agent group for flocking. Modifies desired direction to match flock direction. FlockGroupSystem System that calculates flock grouo average position and direction of flock entities. GiveUpStop This option allows the agent to make smarter stop decisions than simply deciding if it is stuck. Every time the agent bumps into a standing agent, it will progress towards stopping. Additionally, by not bumping into one, it will recover from stopping. Once the progress value is met, the agent will stop. GiveUpStopTimer For tracking give up progress. GizmosCommandBuffer GizmosSystem GizmosSystem.Singleton HiveMindStop This option allows agent to do smarter stop decision then moving in group. It works under assumption that by reaching nearby agent that is already idle and have similar destination it can stop as destination is reached. LinkTraversal LinkTraversalSeek LinkTraversalSeekSystem NavMeshAreaCost NavMeshBoundary Represents a boundary on the navigation mesh. NavMeshBoundarySystem System that for each agent that has sonar with wall collects nearby navmesh edges as walls. Later on these walls are used for avoidance. NavMeshCorners Helper structure for getting corners of agent navmesh path. NavMeshData NavMeshDataInstance NavMeshDataSystem NavMeshDisplacementSystem System that forces agents to stay within NavMesh surface. NavMeshFunnel Used for creating optimal path from navmesh polygons. NavMeshLinkTraversal Agent off mesh link data that is currently traversing. NavMeshNode Agent NavMesh single node of path. NavMeshPath Agent NavMesh path. NavMeshPathSystem System that controls agent NavMesh path. NavMeshQueryHandle Represents handle of NavMeshQuery used by NavMeshQuerySystem. NavMeshQuerySystem System for requesting NavMesh path. NavMeshQuerySystem.Singleton NavMeshSteeringSystem System that steers agents within the NavMesh path. NavMeshWall Represents a wall on the navigation mesh. OculusAvoidance OculusAvoidanceWeights Portal Range UnsafeDepthWorld Interfaces ISpatialQueryEntity ISubSettings Classes with this interface will be included into AgentsNavigationSettings as sub settings. ISurfaceArea<T> IUnion<T> Enums AgentDepthGrounded AgentOculusAvoidMode BirdState CrowdData.ObjectCollectionGeometry Defines the collected objects geometry. CrowdDiscomfortType CrowdGoalSource Source from which crowd will get goal. CrowdObstacleType Grounded NavMeshLinkTraversalMode NavMeshPathState State of the path. NavMeshQueryStatus The status of navmesh query. NavigationLayers ShapeType SonarAvoidMode Modifications of sonar avoidance funcionality. SpatialPartitioningSubSettings.QueryCheckMode StraightPathFlags"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome to the Scripting Reference!",
    "keywords": "Welcome to the Scripting Reference! Select the API to view the detail."
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [4.4.1] - 2025-10-22 Fixed destroyed agents in aabb tree not getting removed [4.4.0] - 2025-10-22 Changed collision system no longer to use query capacity and always take all neighbours. I found from many users projects that cases where you would find this optimization useful, would prove too much unstable collision thus rendering it useless. Changed default grid hash spatial partitioning with query capacity 0 to take all neighbours instead of falling back to non shape based spatial grid partitioning. Added new agents navigation settings called Spatial Partitioning Mode that allow switching between different spatial partitioning backends Added new spatial partitioning that uses aabb tree. It is nice alternative to default one as it provides more stable search and also makes it quite optimal for using in game code, which is commonly requested feature Added new scene in unity scenarios Unity Physics Locomotion that shows example of integrating with unity ecs physics package Added to spatial partitioning aabb tree new overloads QueryLine, QuerySphere and QueryCylinder that are enurator based instead of generics. This make easier API and closer to SystemAPI.Query Fxed EntityBehaviour in some cases droping null reference exception on playmode stop [4.3.1] - 2025-10-17 Fixed compilation errors caused by RegisterUnityEngineComponentType on prior to 1.4.0 ecs version [4.3.0] - 2025-10-08 Fixed for ECS 1.4 RectTransform and Animator errors Fixed NavMeshCorners.TryGetCorners properly work with more than 2 navmesh nodes Updated zerg samples not to produce warnings on Unity 6 Increased performance optimization for smart stop Added new sample zerg animatron Changed NavMeshSteeringSystem to set AgentBody RemainingDistance to heuristic distance instead of max float value [4.2.5] - 2025-09-08 Removed wantsToRecalculatePath logging from astar [4.2.4] - 2025-09-01 Removed accidental leftover of priting pending path in astar Added in settings new option Log Verbose that for now controlls navmesh not found warrning [4.2.3] - 2025-08-19 Fixed error Loading from a non-readonly static field [4.2.2] - 2025-08-17 Fixed regression where agent inspector properties are not shown for default locomotion Fixed burst error for AgentGroundingSlopeSystem and AgentGroundingSystem on domain reload Added new Scenario sample scene Physics Grounding [4.2.1] - 2025-08-16 Fixed regression where imported agents navigation package loads old version [4.2.0] - 2025-08-15 Changed AgentAstarPath grounded option to enum Changed NavMeshPath grounded option to enum Added new component AgentGrounding that uses unity builtin physics for height correction Added to all component new ref based entity data returning as result simplying option changing [4.1.1] - 2025-06-21 Fixed build errors [4.1.0] - 2025-06-17 Added to navmesh OptimizePath feature that improves path quality for highly non uniform navmesh surfaces Fixed navmesh init to wait for query Fixed AgentCollider to work, if it is created disabled Changed SonarHorizon to be enabled by default, you can still disable it Changed AgentSonarAvoid some angle tooltips to be more clear Changed a lot of systems not to run without existing components Changed hive stop comment Changed not to print Failed to map agent in non development builds [4.0.15] - 2025-03-10 Fixed Astar pathing resulting in errors during carving [4.0.14] - 2025-03-04 Fixed TryGetCorners not working [4.0.13] - 2025-01-23 Added root motion locomotion sample [4.0.12] - 2025-01-02 Fixed A* Pathfinding Project 5.3.0 version to work Fixed selecting agent in subscene would result in errors [4.0.11] - 2025-01-02 Fixed all warnings in Unity 6 version [4.0.10] - 2024-12-25 Fixed scene Mass Astar Entities Fixed subscene navmesh loading resulting in \"Failed to map agent position to nav mesh location\" for first frame Updated to use ecs 1.3.5 version [4.0.9] - 2024-11-12 Added AGENTS_NAVIGATION_FAKE_ASSEMBLY_REFERENCE for faking depedency on ecs/collection assembly reference Fixed compatibility with the A* Pathfinding Project package version 5.2.5 Added AgentAstarPathingAuthoring from A* Pathfinding Project to work with subscenes [4.0.8] - 2024-10-06 Added Hybrid game object and entity connection. As result in dots hierarchy you can select runtime mode and see actualy entity connected to it Fixed compatibility with the A* Pathfinding Project package version 5.2. Fixed compatibility with the A* Pathfinding Project package version 5.2.6. [4.0.7] - 2024-10-05 Moved gizmos buffer from editor for easier debuging, still works only in editor Fixed rare exception: ArgumentException: Radius must be greater than zero Fixed rare exception: InvalidOperationException: The ComponentTypeHandle<Pathfinding.ECS.ManagedState> Fixed agent editor exception in prefab mode [4.0.6] - 2024-07-25 Changed spatial clear to parallel that improves performance drastically Fixed seeking on wide navmesh links Changed link detection to use velocity to avoid cases where agent overshots the link start [4.0.5] - 2024-07-17 Added area cost Added to AgentNavMeshAuthoring SetAreaCost and GetAreaCost Fixed NavMeshCorners.TryGetCorners to correctly handle empty array Fixed NavMeshPath.EndLocation properly match destination in all cases Changed found path no longer allocates temp memory Changed NavMeshPathState.Finished into NavMeshPathState.FinishedFullPath and NavMeshPathState.FinishedPartialPath [4.0.4] - 2024-06-11 Added to AgentNavMeshAuthoring CreateCorners Added NavMeshCorners for simplified accessing of path corners Added Weight in AgentSeperationAuthoring Fixed smart stop gizmos drawing Changed agent separation to allow enable/disable Changed selected agent navmesh authoring now draws corners [4.0.3] - 2024-04-28 Fixed smart stop baker for give up timer [4.0.2] - 2024-04-14 Fixed to work with A* Pathfind Project 5.0.9 [4.0.1] - 2024-04-14 Fixed astar link traversal [4.0.0] - 2024-04-13 Added integration with A* Pathfinding Project! This includes new component Agent A* Pathing that uses package global pathing. Added off mesh link support Added custom link traversal tutorial and scene Added Speed property to AgentBody Fixed navmesh path no longer being calculated 2x times Fixed NavMeshPath.Default to set Grounded to true [3.5.2] - 2023-12-14 Fixed AgentNavMeshPath correctly bake UseWalls in subscene Fixed NavMeshQuery to correctly return partial path in case all nodes visited instead of just return then it is out of iterations [3.5.1] - 2023-12-12 Fixed ECS NavMesh cleanup Fixed for crowds gizmos field capacity error [3.5.0] - 2023-12-02 Added AgentActionSystemGroup Added AgentSpatialSystemGroup Added AgentPathingSystemGroup Changed NavMesh Constrained into Grounded Changed AgentSteering into AgentLocomotion Changed AgentTransformSystemGroup into AgentDisplacementSystemGroup Changed AgentSteeringSystemGroup into AgentSeekingSystemGroup Fixed navigation settings null reference exception [3.4.2] - 2023-11-14 Added Agent.Default Fixed navigation layers not working with query capacity 0 [3.4.1] - 2023-11-10 Fixed issues with navigation layer setting to nothing [3.4.0] - 2023-11-08 Added path progress in case agents is moved outside agents system group Added Layers to Agent/AgentCollider/AgentSeparation/AgentSonarAvoid/AgentReciprocalAvoid Added Query Check setting. The maximum number of nearby neighbors will be checked to find closest. Added to Smart Stop new behaviour called Give Up Stop. Added AgentCollider enable/disable state Added Iterations Per Frame for NavMesh Added NavMesh Constrained option to control should agent be forced to be on surface Removed old 0.65 entities package baking path Changed Sonar Time Horizon only include agents that are withing radius. This will improve agent seeking. Changed Spatial Partitioning to use parallel jobs Changed AgentSystemGroup to be executed before physics [3.3.5] - 2023-10-25 Fixed gizmos drawing for multiple game objects and entities Changed ECS gizmos drawing no longer requires to select agent authoring Changed GizmosCommandBuffer no longer has parallel version. As this simplifies gizmos logic and did not worked correctly any way [3.3.4] - 2023-10-13 Fixed performance regression with query capacity Fixed samples script agent destination missing reference Fixed \"Leak Detected : Persistent allocates 257 individual allocations\" (Made workaround to unity bug that leaks bursted System.OnCreate) [3.3.3] - 2023-09-18 Changed NavMeshQueryStatus.Finished to be obsolete, use FinishedFullPath or FinishedPartialPath. This changes allows distinguish reachable from unreachable paths Fixed Regular Update to skip frame with delta zero Fixed in docs SonarAvoidance.Set parameters names Fixed SonarAvoidance.CopyFrom to also copy angle Fixed QueryCylinder using radius for y axis instead of height Fixed Query Capacity to more effiently take neighbour agents (Should reduce popping effect with collisions) [3.3.2] - 2023-09-01 Fixed regression from 3.3.1 limited query resulting error \"HashMap is full\" [3.3.1] - 2023-08-31 Added limited query fully account different agent sizes Changed nav mesh remaining distance to return float max value until it reaches few remaining nodes. It was changed, as it was never accurate value which was resulting other issues Fixed lower push forces on collision with sonar horizon Fixed authoring help links [3.3.0] - 2023-08-20 Added collider settings Added spatial partitioning cylinder and circle query with limited neighbour count Added map mapping to icons for a reduced aliasing Changed project settings from scene based to project wide Changed separation to use current shape of agent Changed com.unity.entities version to 1.0.14 [3.2.0] - 2023-07-16 Added NavMeshSettings singleton Added settings component mirroring in the project settings under new tab Agents Navigation Added new component Agent Smart Stop from Zerg Samples Added default configurations for AgentBody/AgentSteering/AgentCollider/AgentShape/AgentSeparation/NavMeshPath Added EntityNodes to AgentNavMeshAuthoring Added warning for agent authoring in case no shape is added Added error then NavMeshQuerySystem is attempted to be created in edit mode Changed velocity to account collision with agents and navmesh Changed SonarAvoidance radius scale with velocity Changed SonarAvoidance to be float2 now. First value represents angle of velocity obstacle and second one maximum allowed angle Changed AgentCylindreShapeAuthoring icon (I hope you will enjoy new one) Fixed SonarAvoidance Walls no longer produces extremely small paths Fixed hybrid mode have correct LocalTransform scale 1 Fixed spatial partitioning to use same same query to avoid inconsistencies Fixed component UI updating previous frames values [3.1.6] - 2023-04-11 Changed seperation algorithm Added weight property to seperation Fixed NavMesh Area Mask correctly work with no sequential layers [3.1.5] - 2023-03-29 Added NavMeshSurface surface baker and now it can be baked in subscene Added sample scene low level sonar avoidance to show its usage Added enable/disable to AgentNavMeshAuthoring and AgentAvoidAuthoring Chanded AgentSonarAvoid and NavMeshPath is now IEnableableComponent Fixed support for entities 1.0.0-preview.65 Fixed acceleration correctling working with huge values Fixed sonar avoidance quality regression from 3.1 [3.1.4] - 2023-02-22 Changed com.unity.entities package version from 1.0.0-pre.15 to 1.0.0-pre.44 Fixed AgenAuthroing.Stop to correctly set velocity to zero [3.1.3] - 2023-02-16 Added support for RectTransform [3.1.2] - 2023-02-10 Added SetDestinationDeferred to agent Fixed navmesh area mask editor property work correctly Changed agent capacity automatically resizing, removed AgentCapacity property for SpatialPartitioningSettings Changed gizmos system to be in the same group AgentGizmosSystemGroup [3.1.1] - 2023-02-07 Fixed compilation issue as one of the assembly was not set to Editor [3.1.0] - 2023-01-31 Added new feature to local avoidance Walls that accounts for navmesh. Added new property to AgentNavMeshAuthoring UseWalls. Changed standing agents now puch each other. Fixed local avoidance gizmos drawing. Fixed then desination either above or below agent would result in error. Fixed path failure case then it is out of nodes and path is in progress. [3.0.6] - 2023-01-11 Fixed NavMesh path sometimes discarding destination Fixed error drop when selecting agent in subscene \"The targets array should not be used inside OnSceneGUI or OnPreviewGUI. Use the single target property instead. UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&)\" [3.0.5] - 2022-12-26 Fixed NavMeshAgent correctly stop if path destination can not be mapped to navmesh Fixed that even with OutOfNodes still returns best possible path Added NavMeshPath failed state and also prints the error in editor Added NavMeshAgent/NavMeshPath added new property MappingExtent that allows controling the maximum distance the agent will be mapped Added documentation links to components and package Changed documentation to hidden folder as now it is on webpage [3.0.4] - 2022-12-23 Fixed NavMeshAgent correctly handle partial paths (Paths where destination can not be reached) Fixed few more cases where NavMesh update would result in \"Any jobs using NavMeshQuery must be completed before we mutate the NavMesh.\" Fixed NavMeshAgent in some cases reusing path from other agent Changed Zerg scene camera to be centered around controllable units [3.0.3] - 2022-12-17 Added to EntityBehaviour OnEnable and OnDisable Added error message box to AgentNavMeshAuthoring, if game objects also has NavMeshObstacle Added SetDestination method to AgentAuthoring Changed that if agent is not near any NavMesh it will throw error instead moved to the center of the world Changed dependency com.unity.entities version to 1.0.14 Fixed few cases where NavMesh update would result in \"Any jobs using NavMeshQuery must be completed before we mutate the NavMesh.\" [3.0.2] - 2022-12-15 Fixed NavMesh at the end of destination throwing error System.IndexOutOfRangeException: Index {0} is out of range of '{1}' Length. Fixed transform sync from game object to entity not override transform in most calls. [3.0.1] - 2022-12-08 Added correct documentation Added com.unity.modules.ui dependency as samples uses ui Removed second navmesh surface from zerg samples [3.0.0] - 2022-11-30 Release as Agents Navigation [2.0.0] - 2022-06-09 Changing velocity avoidance with new smart algorithm Changing package to use new Package Manager workflow Updating documentation to be more clear and reflect new API changes Adding zerg sample [1.0.3] - 2022-05-14 Adding new demo scene \"8 - Jobified Boids Navmesh Demo\" [1.0.2] - 2022-03-19 Fixing memory leaks in demo scenes [1.0.1] - 2022-03-08 Updated jobs demo to not use physics and small bug fix [1.0.0] - 2022-02-22 Package released"
  },
  "index.html": {
    "href": "index.html",
    "title": "Agents Navigation",
    "keywords": "Agents Navigation High performance, modular and scalable navigation for agents."
  },
  "manual/astar.html": {
    "href": "manual/astar.html",
    "title": "A* Pathfinding Project",
    "keywords": "A* Pathfinding Project Important This page explains the functionality of the A* Pathfinding Project extension package. To use this extension, you must also own the pro version of the A* Pathfinding Project. The A* Pathfinding Project is an alternative to Unity's built-in pathfinding solution. The Agents Navigation package can use the A* Pathfinding Project for pathfinding and off-mesh link traversal, while letting Agents Navigation handle local avoidance and other aspects of the agent's final movement. For more details about the A* Pathfinding Project, check out the A* Pathfinding Project documentation. Overview Agent Astar Pathing - a component that indicates an agent should use pathfinding from the A* Pathfinding Project, instead of using Unity's built-in pathfinding."
  },
  "manual/crowds.html": {
    "href": "manual/crowds.html",
    "title": "Crowds",
    "keywords": "Crowds Important This page explains the functionalities of the Agents Navigation - Crowds extension package. This is an alternative pathing solution to NavMesh that comes with a new extension package called Agents Navigation - Crowds. It is based on continuum crowds, where agents use flow fields to navigate. The flow field is a grid-based graph, and a key difference is that the agent's steering velocity is calculated not per agent but per grid cell. The key differences are as follows: Performance cost scales with grid size multiplied by group count instead of the pure agent count. This allows for huge crowds with lower performance costs. Pathing and avoidance are combined, resulting in a greatly reduced likelihood of scenarios where agents get stuck due to local avoidance. Each agent group must share common destination goals, which means performance can quickly degrade if there are many groups. Agents exhibit much better flow in huge crowds, but at the same time, agents lose individuality and favor group flow instead of their own. Overview Crowd Surface - walkable surface by agents. Crowd Group - a group of agents on a particular surface. Agent Crowd Pathing - a group that the agent belongs to and indicates it should participate in crowd flow."
  },
  "manual/crowds/crowd-agent.html": {
    "href": "manual/crowds/crowd-agent.html",
    "title": "Crowd Agent",
    "keywords": "Crowd Agent Important This page explains the functionalities of the Agents Navigation - Crowds extension package. As the Agents Navigation - Crowds extension package reuses the same base agent components that come from Agents Navigation, it includes the Agent, Agent Cylinder/Agent Circle, and other optional components. The regular agent and the agent that participates in crowd flow are distinguished by the Agent Crowd Pathing component."
  },
  "manual/crowds/crowd-data.html": {
    "href": "manual/crowds/crowd-data.html",
    "title": "",
    "keywords": ""
  },
  "manual/crowds/crowd-discomfort.html": {
    "href": "manual/crowds/crowd-discomfort.html",
    "title": "Crowd Discomfort",
    "keywords": "Crowd Discomfort Important This page explains the functionalities of the Agents Navigation - Crowds extension package. Crowd discomfort marks the area in Crowd Surface that will discourage crowd agents from entering. Make sure that agents in a group have their CostWeights discomfort set not to zero; otherwise, they will ignore discomfort. If the game object is set to static, it will not be updated. It can be created using the menu GameObject > AI > Crowd Discomfort."
  },
  "manual/crowds/crowd-group.html": {
    "href": "manual/crowds/crowd-group.html",
    "title": "Crowd Group",
    "keywords": "Crowd Group Important This page explains the functionalities of the Agents Navigation - Crowds extension package. A crowd group represents a group of agents that share the same destination goal, speed, and path preferences. Each surface can be referenced by multiple groups, but a group can only reference a single surface. The crowd group is one of the most expensive components of the crowds package, and it is highly recommended to use as few groups as possible. It can be created using the menu GameObject > AI > Crowd Group. Low Level At the low level, it uses the Crowd Flow structure, which is the core of this component. It is composed of multiple fields: Cost Field: Each cell indicates the cost of going into an orthogonal neighboring cell. Speed Field: Each cell indicates the speed of going into an orthogonal neighboring cell. Potential Field: Each cell indicates the potential, and the lower it is, the more likely crowd agents will be attracted to it. Debugging When selecting the component, you can see gizmos that will help you to debug and understand what is happening. The Gizmos option will allow selecting particular fields to be drawn. Note To make it work with Entities, you will need to add the DrawGizmos component to the surface entity."
  },
  "manual/crowds/crowd-obstacle.html": {
    "href": "manual/crowds/crowd-obstacle.html",
    "title": "Crowd Obstacle",
    "keywords": "Crowd Obstacle Important This page explains the functionalities of the Agents Navigation - Crowds extension package. A crowd obstacle marks the area in Crowd Surface that is unwalkable by crowd agents. If the game object is set to static, it will not be updated. It can be created using the menu GameObject > AI > Crowd Obstacle."
  },
  "manual/crowds/crowd-surface.html": {
    "href": "manual/crowds/crowd-surface.html",
    "title": "Crowd Surface",
    "keywords": "Crowd Surface Important This page explains the functionalities of the Agents Navigation - Crowds extension package. The Crowd Surface is a component that allows you to create a surface that agents can walk on. It is very similar to NavMeshSurface in Unity's NavMesh system. The Width and Height represent the cell count on their respective axes; the higher the number, the more accurate navigation will be at the expense of performance. It can be created using the menu GameObject > AI > Crowd Surface. Baking In Crowd Surface, baking is an optional feature and can be used without it. However, it can be useful to prebake surface heights and obstacles in a similar way to Unity's NavMesh. To bake the surface, you first need to create a Crowd Data asset. It can be created by right-clicking in the project view and selecting Create > AI > Crowd Data. Then you need to assign it to the Crowd Surface component. After that, you can bake the surface by pressing the Bake button in the Crowd Surface component. Make sure the gizmos encapsulate your physics colliders you want your surface to be baked from. If everything is set up correctly, you should see the gizmos like this: Note Baking is currently here experimental and will improve in the future. Most of the CrowdData API is exposed so users would have full control over it. Low Level At the low level, it uses the Crowd World structure, which is the core of this component. It is composed of multiple fields: Density Field: Each cell indicates agent coverage intensity. Average Velocity Field: Each cell indicates average agent speed. Obstacle Field: Each cell reference counts obstacle overlap. Discomfort Field: Each cell indicates discomfort coverage intensity. Height Field: Each cell indicates the height of the area. Debugging When selecting the component, you can see gizmos that will help you debug and understand what is happening. The Gizmos option will allow selecting particular fields to be drawn. Note To make it work with Entities, you will need to add the DrawGizmos component to the surface entity."
  },
  "manual/entities.html": {
    "href": "manual/entities.html",
    "title": "Entities",
    "keywords": "Entities For those who plan to use Entities in your project or want to squeeze as much performance as possible, you can directly use entities and their agent components. All you need to do is add your Agents to a SubScene, and they get automatically baked into the correct entity components. For those who want to create agent entities without the baker workflow, I recommend looking up game object authoring bakers to see the reference for which entity components to add with default fields. Also, each entity component has a static property named Default to simplify the creation of it instead of figuring out what default fields it requires. The other benefit of using those static properties provides better backward compatibility in case you upgrade to a newer version of agents navigation, and a new field gets added to the component. var entity = EntityManager.CreateEntity(); // Agent tag is required for agent to work EntityManager.AddComponentData(entity, Agent.Default); // AgentBody for dynamic agents EntityManager.AddComponentData(entity, AgentBody.Default); // AgentLocomotion for moving EntityManager.AddComponentData(entity, AgentLocomotion.Default); // AgentShape for default cylinder shape EntityManager.AddComponentData(entity, AgentShape.Default); Important If you are not familiar with ECS, I highly recommend learning the basics of Entities before continuing with this section. Architecture This package architecture is heavily influenced by Craig Reynolds' Boids. Agent navigation is essentially divided into four major sections. The first one is Action, where the agent performs high-level logic to decide whether it should continue moving or change its destination. Next is Steering, where the agent attempts to steer towards its destination. The steering force here is a vector used by the agent to move towards it. In most cases, it will be a unit vector, but not necessarily, as a lower length than one can indicate that the agent should slow down. Many systems will modify the steering force, and each system will attempt to refine it to provide more complicated navigation. For example, the steering force can start with very simple seeking logic, where the agent goes straight into the destination. Then a pathing system like navmesh can modify it to account for path following. Furthermore, there can be avoidance, like sonar, that modifies steering to avoid nearby agents. This can continue with multiple systems and even custom ones. The third section is Locomotion, where the agent uses its steering force to move. There is a default component called AgentLocomotion that simulates a point mass body. To write a custom one, you can check Custom Locomotion. Finally, Displacement is the final step where the agent typically will be constrained within the navmesh surface or ensure non-overlapping between other agents. Sections System Groups Details Action Agent Spatial System Group Constructs accelerated structure for fast nearby agent search Agent Action System Group High-level decision for navigation Steering Agent Seeking System Group Updates forces to steer towards the destination Agent Pathing System Group Updates forces to account for path following Agent Force System Group Updates forces to account for other behaviors like avoidance, separation... Locomotion Agent Locomotion System Group Moves agent using the forces Displacement Agent Displacement System Group Finishing pass like containing agent within the path or collision This architecture enables a high level of modularity and performance, allowing you to easily add your custom steering/locomotion or even pathing without modifying the package, as long as you follow proper system grouping. Debug In case you find some behaviors working unexpectedly, it is recommended to try debug gizmos functionality. This can be enabled per entity by adding component DrawGizmos to it."
  },
  "manual/game-objects.html": {
    "href": "manual/game-objects.html",
    "title": "Game Objects",
    "keywords": "Game Objects Since this package is designed to be modular, most of the navigation behaviors are spread across many components. This enables a wide variety of customizations, as users can add and remove behaviors even per agent. All components essentially only contain authoring data and no logic. The Agent component internally creates an entity and synchronizes data between them. Tip It is recommended to minimize agent component reading as it will require synchronization of jobs."
  },
  "manual/game-objects/agent.html": {
    "href": "manual/game-objects/agent.html",
    "title": "Agent",
    "keywords": "Agent This is the main component that marks a GameObject/Entity as an Agent. In this package, everything that participates in navigation will be considered an Agent, whether it is just a static obstacle or dynamic. If the agent type is set to Default Locomotion, it will also include default Locomotion, Seeking and Arrival behaviors. This will allow the agent to seek its destination and move towards it using simple acceleration based model. For custom locomotion, go check tutorials on how to implement your own locomotion."
  },
  "manual/game-objects/avoidance.html": {
    "href": "manual/game-objects/avoidance.html",
    "title": "Avoidance",
    "keywords": "Avoidance Avoidance is one of the core features of navigation. It is used to avoid obstacles and other agents. It is important to understand that avoidance relies on heuristics and is not a perfect solution. There may be situations where agents will not be able to avoid each other, or they might get stuck in a loop trying to avoid each other. Additionally, it is essential to grasp that avoidance is not a replacement for pathfinding. Instead, it complements pathfinding by helping agents avoid obstacles and other agents while following their path. Note A good way to understand the difference between avoidance and pathfinding is to think of pathfinding as a person with a map and avoidance as a person with a flashlight in a dark room. Pathfinding helps you find a way to the destination, while avoidance helps you navigate around obstacles and other agents along the way."
  },
  "manual/game-objects/avoidance/separation.html": {
    "href": "manual/game-objects/avoidance/separation.html",
    "title": "Agent Separation",
    "keywords": "Agent Separation This component enables one of the Boids behaviors called separation. It is very lightweight algorithm and quite recommended for games that do not require good quality avoidance."
  },
  "manual/game-objects/avoidance/sonar-avoidance.html": {
    "href": "manual/game-objects/avoidance/sonar-avoidance.html",
    "title": "Agent Sonar Avoid",
    "keywords": "Agent Sonar Avoid This component enables avoidance between nearby agents using the Sonar Avoidance solution. It implements the Local Avoidance package. This behavior has many similarities with RVO (Reciprocal Velocity Obstacles) and ORCA (Optimal Reciprocal Collision Avoidance) algorithms and solves similar problems. The main difference with Sonar Avoidance is that it is more focused on the quality of a particular agent as opposed to the quality of the whole group. For this reason, it exhibits behaviors like circling around the target, which is highly sought after in games. Debugging When selecting the agent component, you can see gizmos that will help you debug and understand what is happening. The green volume will indicate the agent's non-obstructed area where it can go. Note To make it work with Entities, you will need to add the DrawGizmos component to the agent entity and select any Agent component. Frequently asked questions Why is my agent circling the target forever? If the destination is unreachable, it is quite possible for the agent to get into a state where it would start circling back and forth. To solve this issue, it is recommended to implement a termination state. For example, if the agent does not make progress towards the target for some time, then it should stop and report failure. Also, playing around with the Radius and Angle fields, and reducing them, should reduce the circling behavior. I want my agent to follow/attack another agent, but it starts to go around it? This happens because the destination you set is inside the agent. As it fails to reach the destination, it starts to circle around the target. To solve this, there is a simple solution to offset the destination by some distance in front of the target. This will make the agent go towards the target and stop in front of it. Sometimes agents still overlap? The avoidance algorithm is based on velocity, but it does not account for acceleration. In some rare cases, it is possible for agents to overlap. Also, if you have Blocked Stop disabled, in the case of being fully blocked, it would fallback to regular direction disregarding avoidance. To solve this, you can use the Agent Collider component to enable collision between agents. With the Nav Mesh component added, my agent moon-walks into the wall? By default, Sonar has no understanding of nav mesh obstacles, so the algorithm gives direction without accounting for them. There is a new feature called Use Walls that will insert nav mesh edges into Sonar Avoidance as obstacles."
  },
  "manual/game-objects/collider.html": {
    "href": "manual/game-objects/collider.html",
    "title": "",
    "keywords": "Agent Collider This component will enable collisions between agents. This component is quite useful complimentary piece with avoidance algorithms, as they not always yield perfect results. Note This components does not uses Unity physics system, but rather it uses custom solution."
  },
  "manual/game-objects/grounding.html": {
    "href": "manual/game-objects/grounding.html",
    "title": "Grounding",
    "keywords": "Grounding This component improves the quality of agent movement along the up axis. It essentially simulates Unity Physics gravity and raycasts the ground for collisions. As a result, it reduces jagged movement when ascending or descending, since navigation surfaces often lose accuracy during generation. It is recommended not to use this component if you plan to add physics to your GameObject, as Unity Physics already handles gravity and collisions, making this component redundant. For collisions, it uses Unity’s built-in Nvidia PhysX. This means that for it to work, the surfaces you want it to collide with must have built-in colliders. This will not work with ECS Physics."
  },
  "manual/game-objects/pathing.html": {
    "href": "manual/game-objects/pathing.html",
    "title": "Pathing",
    "keywords": "Pathing Pathing is a system that allows you to find a path between two points in a scene. It is used by the navigation system to determine a route between two points in the scene. Additionally, the AI system utilizes pathing to find a path to a target."
  },
  "manual/game-objects/pathing/astar.html": {
    "href": "manual/game-objects/pathing/astar.html",
    "title": "Agent A* Pathing",
    "keywords": "Agent A* Pathing Important This page explains the functionalities of the A* Pathfinding Project extension package. This component specifies that agent should use A* Pathfinding Project pathing for navigation. Most of funcionality comes from component ManagedState. Auto Repath - policy for how often to recalculate an agent's path. Pathfinding Settings - various settings for path penalties and tags."
  },
  "manual/game-objects/pathing/crowds.html": {
    "href": "manual/game-objects/pathing/crowds.html",
    "title": "Agent Crowd Pathing",
    "keywords": "Agent Crowd Pathing Important This page explains the functionalities of the Agents Navigation - Crowds extension package. This component specifies which crowds group it belongs to and will use its crowd flow for navigation."
  },
  "manual/game-objects/pathing/nav-mesh.html": {
    "href": "manual/game-objects/pathing/nav-mesh.html",
    "title": "Agent NavMesh Pathing",
    "keywords": "Agent NavMesh Pathing This component enables these agents to use Unity's built-in NavMesh system. For more information, check AI Navigation. Debugging When selecting the agent component, you can see gizmos that will help you to debug and understand what is happening. Blue polygons will indicate the NavMesh path, and the end node will always have the strongest color. Note: To make it work with Entities, you will need to add the DrawGizmos component to the agent entity."
  },
  "manual/game-objects/shape.html": {
    "href": "manual/game-objects/shape.html",
    "title": "Shape",
    "keywords": "Shape Agent Cylinder Shape This component specifies the agent shape that will be used in navigation. Cylinder shape will indicate that the agent should be simulated in 3d space with Y as an up axis. Agent Circle Shape This component specifies the agent shape that will be used in navigation. The circle shape will indicate that the agent should be simulated in 2d space with Z as an up axis."
  },
  "manual/game-objects/smart-stop.html": {
    "href": "manual/game-objects/smart-stop.html",
    "title": "Smart Stop",
    "keywords": "Smart Stop This component enables smarter decision-making for agents on when to stop. Hive Mind Stop This behavior is group-based, where the agent attempts to stop when all agents in the group are stopped. It effectively handles scenarios where a group of agents attempts to move to the same destination. Every frame, the agent will check nearby idle agents to see if their destination is similar to its own. If so, it will stop. Give Up Stop This option allows the agent to make smarter stop decisions than simply deciding if it is stuck. Every time the agent bumps into a standing agent, it will progress towards stopping. Additionally, by not bumping into one, it will recover from stopping. Once the progress value is met, the agent will stop."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Agents Navigation",
    "keywords": "Agents Navigation This package includes high performance, modular and scalable navigation for agents. It is developed with DOTS in mind. As result, it takes advantage of Unity's latest technology stack like SIMD mathematics, Jobs, Burst compiler and EntityComponentSystem. Additionally, there is hybrid mode support that enables using it with GameObjects in Object Oriented Programming. One huge problem with navigation is that there is no single solution that would work for all games. Even one of the GDC 2011 talks about navigation was named AI Navigation: It's Not a Solved Problem - Yet, where studios presented unique solutions for solving their navigation problems. For this reason, this package's goal is not to give one universal solution, but actually give a foundation for agent navigation that can be customized and extended to user needs. This package is designed to work with both concepts DOD (Data oriented design) and OOP (Object oriented programming). Both share the same authoring components. Quick Start For minimal quick setup check tutorial Set Destination. Dependencies Minimum Unity 2022.2 version Package com.unity.entities@1.0.11 Package com.unity.ai.navigation@1.1.4 Support If you have questions, bugs or feature requests use Discord."
  },
  "manual/known-issues.html": {
    "href": "manual/known-issues.html",
    "title": "Known Issues",
    "keywords": "Known Issues Crowds currently does not support partial paths. Astar does support subscenes currently. Will be added in the future."
  },
  "manual/samples.html": {
    "href": "manual/samples.html",
    "title": "Samples",
    "keywords": "Samples In a package folder named Samples you can find projects that showcase possible use cases. Samples in this package are contained in a hidden folder named Samples~ and they can be imported using Package Manager. This allows package to be lighter if samples are not used. To import samples, follow these steps: Click menu item Window/Package Manager to open package manager window. Make sure you selected tab Packages: In Project. Find package Agents Navigation. Find button Samples and click it. Node. Make sure tab Packages: In Project is selected. For more information check https://docs.unity3d.com/2022.2/Documentation/Manual/cus-samples.html. Scenarios Contains small isolated test scenes that showcases some common navigation behaviors (etc. circle, hallway, group ...). Mass Stress test scene where thousands of agents are spawned and navigate through static and dynamic obstacles. Zerg Small subset of RTS game. With some common controls like smart stop, attack, follow, combat..."
  },
  "manual/settings.html": {
    "href": "manual/settings.html",
    "title": "Settings",
    "keywords": "Settings Settings in this package can be found in Project Settings window tab called Agents Navigation. The first field references project wide settings asset that stores serialized fields of the settings. To change settings you will need to create scriptable object Agents Navigation Settings. It can be done using menu item Assets>Create>AI>Agents Navigation Settings and then referenced to the field. Note Then setting asset is referenced it will be automatically stored in player settings preloaded assets. In case no asset is referenced the default settings will be used. Regular Update By default, all navigation systems run in FixedStepSimulationSystemGroup. This makes all systems update in fixed steps. It works very similarly to MonoBehaviour.FixedUpdate, and most of the same principles apply. The time step for fixed updates can be changed in Project Settings -> Time -> Fixed Timestep. By enabling the Regular Update option in the settings, all systems will instead run in the regular StepSimulationSystemGroup, similar to MonoBehaviour.Update. Fixed Update essentially works like this: on each frame, Unity checks how much time has accumulated since the last fixed update. If the accumulated time is greater than the fixed timestep, a fixed update is run. Unity may run multiple fixed updates within a single frame. When should you use fixed versus regular updates? It really depends on your game. Fixed Update is typically used when you want more determinism and more stable navigation. Since each step is fixed, it is less likely to produce unpredictable errors caused by varying delta time. However, it is very important to ensure that your game does not fall below the target fixed timestep. Otherwise, it can lead to what is called the “spiral of death,” where each frame accumulates more and more fixed updates, eventually degrading performance drastically. Fixed Update can also sometimes cause jagged agent movement. For example, if your game runs faster than the fixed timestep, agents may only move every other frame, creating the illusion of lag."
  },
  "manual/settings/custom-sub-settings.html": {
    "href": "manual/settings/custom-sub-settings.html",
    "title": "Custom Sub Settings",
    "keywords": "Custom Sub Settings Agents Navigation settings can be extended with additional sub settings. To add custom sub settings you need write class that implements interface MySubSettings and it will automatically be included in all instance of Agents Navigation Settings assets. Here is simple sample where new sub settings declared as MySubSettings that contain single value and later on can be accessed via AgentsNavigationSettings class. [Serializable] class MySubSettings : ISubSettings { public int Value = 1; } ... int myValue = AgentsNavigationSettings.Get<MySubSettings>().Value;"
  },
  "manual/sonar-avoidance.html": {
    "href": "manual/sonar-avoidance.html",
    "title": "Sonar Avoidance",
    "keywords": "Sonar Avoidance Component Agent Sonar Avoid is based on this previous package version called Local Avoidance 2.0. Users can still use SonarAvoidance directly without ECS interface. This local avoidance uses novel solution called SonarAvoidance. Idea is very simple. Interest point constructs sonar volume shaped in circle, that scans for nearby obstacles. Each obstacle cuts into the volume. Once all obstacles are scanned, the best direction can be calculated from it. The solution is designed to be lightweight so it could be moved into any design. Thus the whole functionality is contained of single struct called SonarAvoidance. Constructor Sonar can be created with simple constructor. var sonar = new SonarAvoidance(position, direction, up, innerRadius, outerRadius, speed); Circular Obstacle Circular shape obstacles usually used for other agents. bool success = sonar.InsertObstacle(obstaclePosition, obstacleVelocity, obstacleRadius); Obstacle with 0 velocity Obstacle with negative y axis velocity Note: Blue points shows where sonar would collide with collider red point at specific time. There can be multiple collision points. Directional Obstacle Directional shape obstacles usually used for limiting agent vision. bool success = sonar.InsertObstacle(obstacleDirection, obstacleRadius); With negative x direction and 180 degress Cleanup If you want to re-use the structure for next frame you can clear it. sonar.Clear() Or destroyed with dispose interface. sonar.Dispose();"
  },
  "manual/tutorials.html": {
    "href": "manual/tutorials.html",
    "title": "Tutorials",
    "keywords": "Tutorials This sections will contain some common tutorial requested by the users."
  },
  "manual/tutorials/astar-setup.html": {
    "href": "manual/tutorials/astar-setup.html",
    "title": "A* Pathfinding Project Setup",
    "keywords": "A* Pathfinding Project Setup Important This page explains the functionalities of the A* Pathfinding Project extension package. This tutorial will explain how to do minimal setup for agent crowd flow. Firstly, you will need to create a Astar Path. This will be the walkable surface area for your agents. Next, you need to create an agent. This can be done by right-clicking in Unity's Hierarchy View and selecting AI > Agent Cylinder/Circle. As this menu item creates minimal setup agent, you will need to add Agent Astar Pathing component that will enable agent to use astar pathing. For more details check Astar documentation."
  },
  "manual/tutorials/crowds-setup.html": {
    "href": "manual/tutorials/crowds-setup.html",
    "title": "Crowds Setup",
    "keywords": "Crowds Setup Important This page explains the functionalities of the Agents Navigation - Crowds extension package. This tutorial will explain how to do minimal setup for agent crowd flow. Firstly, you will need to create a Crowd Surface. This will be the walkable surface area for your crowd agents. You can easily do this by right-clicking in Unity's Hierarchy View and selecting AI > Crowd Surface. If your project is 3D, it is recommended to rotate the surface by 90 degrees around the x-axis. Next, you will be creating a Crowd Group. This will represent a single group where agents will belong. You can easily do this by right-clicking in Unity's Hierarchy View and selecting AI > Crowd Group. Make sure it references your newly created surface. Now, you need to create an agent. This again can be done by right-clicking in Unity's Hierarchy View and selecting AI > Agent Cylinder/Circle. As this menu item creates minimal setup agent, you will need a few additional components to add. Agent Crowd Pathing will include the agent to participate in crowd flow with a specific group, and Agent Collider will enable collision with other nearby agents. Collider is needed because crowd pathing does not guarantee agents won't overlap in all cases. Finally, you need to set a goal for your crowd group. If the crowd group has Goal Source set to Agent Destination, the group will collect all its agent destinations and will construct a global goal out of it. For how to set agent destination, you can refer to another tutorial Set Destination. The alternative way is to pass goals array directly into the group. Hybrid: var goals = new float3[] { a, b, c }; var group = GetComponent<CrowdGroupAuthoring>(); group.SetGoals(goals) Entities: var goals = new float3[] { a, b, c }; var group = world.EntityManager.GetComponentData<CrowdGroupFlow>(entity); group.Flow.ClearGoals(); foreach (float3 goal in goals) { group.Flow.AddGoal(goal); }"
  },
  "manual/tutorials/custom-link-traversal.html": {
    "href": "manual/tutorials/custom-link-traversal.html",
    "title": "Custom Link Traversal",
    "keywords": "Custom Link Traversal Component Agent NavMesh Pathing has property Link Traversal that enables the agent to automatically traverse off-mesh links. By default, it uses its own locomotion to traverse it, but there is a way to create custom traversal of it. The whole agent navmesh link traversal data is contained in NavMeshLinkTraversal structure. In this tutorial, I will show how to create custom link traversal that does a parabolic jump instead of regular locomotion. This tutorial is recommended for those who are already familiar with navmesh and navmesh links. Important Tutorials may have code that does not compile and may be outdated. Their purpose here is to set you in the right direction. If you have questions, do not hesitate to reach the creator in the discord channel. Game Objects To get data of currently traversed link you need to access property AgentNavMeshAuthoring.EntityLinkTraversal. First of all, you will need to disable the default seeking; this can be done by setting Link Traversal Mode in component to Custom. Next in update we firstly need to check, if agent is currently traversing link. This can be done by checking Active property in NavMeshLinkTraversal. void Update() { // Skip, if not on active link if (!m_NavMesh.OnLinkTraversal) return; ... Finally, we do the actual parabolic interpolation. if (!m_Jumping) { // Start jumping sequence m_JumpTimeStamp = Time.realtimeSinceStartupAsDouble; m_Jumping = true; } else { float timeInAir = (float)((Time.realtimeSinceStartupAsDouble - m_JumpTimeStamp) / Duration); if (timeInAir > Duration) { // Finish link traversal m_NavMesh.OnLinkTraversal = false; m_Jumping = false; } else { // Do nice parabolic jump float progress = math.saturate(timeInAir / Duration); var seek = m_NavMesh.NavMeshLinkTraversal.Seek; float3 start = seek.Start.Left; float3 end = seek.End.Left; transform.position = ParabolicLerp(start, end, progress); } } Here is the full script. using ProjectDawn.Navigation.Hybrid; using Unity.Mathematics; using UnityEngine; public class AgentJump : MonoBehaviour { public float Duration = 1.0f; AgentNavMeshAuthoring m_NavMesh; bool m_Jumping; double m_JumpTimeStamp; void Start() { m_NavMesh = GetComponent<AgentNavMeshAuthoring>(); } void Update() { // Skip, if not on active link if (!m_NavMesh.OnLinkTraversal) return; if (!m_Jumping) { // Start jumping sequence m_JumpTimeStamp = Time.realtimeSinceStartupAsDouble; m_Jumping = true; } else { float timeInAir = (float)((Time.realtimeSinceStartupAsDouble - m_JumpTimeStamp) / Duration); if (timeInAir > Duration) { // Finish link traversal m_NavMesh.OnLinkTraversal = false; m_Jumping = false; } else { // Do nice parabolic jump float progress = math.saturate(timeInAir / Duration); var seek = m_NavMesh.NavMeshLinkTraversal.Seek; float3 start = seek.Start.Left; float3 end = seek.End.Left; transform.position = ParabolicLerp(start, end, progress); } } } // Generated by chatgpt static Vector3 ParabolicLerp(Vector3 pointA, Vector3 pointB, float lerpValue) { // Ensure lerpValue is clamped between 0 and 1 lerpValue = Mathf.Clamp01(lerpValue); // Calculate the control point position Vector3 controlPoint = CalculateControlPoint(pointA, pointB); // Perform quadratic Bezier interpolation return QuadraticBezier(pointA, controlPoint, pointB, lerpValue); } // Generated by chatgpt // Calculate the control point for quadratic Bezier curve static Vector3 CalculateControlPoint(Vector3 pointA, Vector3 pointB) { // Calculate the mid-point between pointA and pointB Vector3 midPoint = (pointA + pointB) / 2f; // Adjust the y-coordinate of the mid-point to form a parabolic curve midPoint.y = Mathf.Max(pointA.y, pointB.y) + Mathf.Abs(pointA.y - pointB.y) * 0.5f; return midPoint; } // Generated by chatgpt // Perform quadratic Bezier interpolation static Vector3 QuadraticBezier(Vector3 pointA, Vector3 controlPoint, Vector3 pointB, float t) { float u = 1f - t; float tt = t * t; float uu = u * u; Vector3 result = uu * pointA; result += 2 * u * t * controlPoint; result += tt * pointB; return result; } }"
  },
  "manual/tutorials/custom-locomotion.html": {
    "href": "manual/tutorials/custom-locomotion.html",
    "title": "Custom Locomotion",
    "keywords": "Custom Locomotion This tutorial will show you how to create a custom locomotion for your agents that mimics tank movement. It is also expected that you have a minimum knowledge about ECS and Unity's Job System. Important Tutorials may have code that does not compile and may be outdated. Their purpose here is to set you in the right direction. If you have questions, do not hesitate to reach creator in the discord channel. Entity Component The first script that you will be creating is the tank's locomotion entity component. This component will contain information about the tank's movement speed, acceleration, angular speed, stopping distance, and auto braking. This script is essentially a copy of the AgentLocomotion component. /// <summary> /// Tanks locomotion that moves towards destination with arrival. /// </summary> public struct TankLocomotion : IComponentData { /// <summary> /// Maximum movement speed when moving to destination. /// </summary> public float Speed; /// <summary> /// The maximum acceleration of an agent as it follows a path, given in units / sec^2. /// </summary> public float Acceleration; /// <summary> /// Maximum turning speed in (rad/s) while following a path. /// </summary> public float AngularSpeed; /// <summary> /// Stop within this distance from the target position. /// </summary> public float StoppingDistance; /// <summary> /// Should the agent brake automatically to avoid overshooting the destination point? /// </summary> public bool AutoBreaking; } Authoring Component The next script that you will be creating is the authoring component. The authoring component is a regular MonoBehaviour that serves the purpose of keeping serialized information about the entity component. The Awake and Destroy methods here are used by the hybrid path to create and destroy the entity component. The TankLocomotionBaker is used by the pure ECS path to bake the subscene. Most of the code in this component is boilerplate to support both paths, and typically, all authoring components share these methods. [RequireComponent(typeof(AgentAuthoring))] [DisallowMultipleComponent] public class TankLocomotionAuthoring : MonoBehaviour { [SerializeField] float Speed = 3.5f; [SerializeField] float Acceleration = 8; [SerializeField] float AngularSpeed = 120; [SerializeField] float StoppingDistance = 0; [SerializeField] bool AutoBreaking = true; Entity m_Entity; /// <summary> /// Returns default component of <see cref=\"TankLocomotion\"/>. /// </summary> public TankLocomotion DefaultLocomotion => new() { Speed = Speed, Acceleration = Acceleration, AngularSpeed = math.radians(AngularSpeed), StoppingDistance = StoppingDistance, AutoBreaking = AutoBreaking, }; void Awake() { var world = World.DefaultGameObjectInjectionWorld; m_Entity = GetComponent<AgentAuthoring>().GetOrCreateEntity(); world.EntityManager.AddComponentData(m_Entity, DefaultLocomotion); } void OnDestroy() { var world = World.DefaultGameObjectInjectionWorld; if (world != null) world.EntityManager.RemoveComponent<TankLocomotion>(m_Entity); } } internal class TankLocomotionBaker : Baker<TankLocomotionAuthoring> { public override void Bake(TankLocomotionAuthoring authoring) { AddComponent(GetEntity(TransformUsageFlags.Dynamic), authoring.DefaultLocomotion); } } Systems Finally, there will be two systems that will operate with our newly created TankLocomotion component. Seeking System The first system is the tank's seeking system. Its purpose is to set AgentBody.Force towards the destination. Usually, this system's AgentBody.Force will be overridden by navigation mesh systems, but in case it fails, it can fallback to this system. This is a copy of the AgentSeekingSystem with some minor changes. /// <summary> /// System that steers agent towards destination. /// </summary> [BurstCompile] [RequireMatchingQueriesForUpdate] [UpdateInGroup(typeof(AgentSeekingSystemGroup))] public partial struct TankSeekingSystem : ISystem { [BurstCompile] public void OnUpdate(ref SystemState state) { new TankSteeringJob().ScheduleParallel(); } [BurstCompile] partial struct TankSteeringJob : IJobEntity { public void Execute(ref AgentBody body, in TankLocomotion locomotion, in LocalTransform transform) { if (body.IsStopped) return; float3 towards = body.Destination - transform.Position; float distance = math.length(towards); float3 desiredDirection = distance > math.EPSILON ? towards / distance : float3.zero; body.Force = desiredDirection; body.RemainingDistance = distance; } } } Locomotion System The second system is the tank's locomotion system. Its purpose is to move the agent towards the destination. This is a copy of the AgentLocomotionSystem with added logic that prevents agent movement if its facing direction and movement direction match within certain degrees. [BurstCompile] [RequireMatchingQueriesForUpdate] [UpdateInGroup(typeof(AgentLocomotionSystemGroup))] public partial struct TankLocomotionSystem : ISystem { [BurstCompile] public void OnUpdate(ref SystemState state) { new TankLocomotionJob { DeltaTime = state.WorldUnmanaged.Time.DeltaTime }.ScheduleParallel(); } [BurstCompile] partial struct TankLocomotionJob : IJobEntity { public float DeltaTime; public void Execute(ref LocalTransform transform, ref AgentBody body, in TankLocomotion locomotion, in AgentShape shape) { if (body.IsStopped) return; // Check, if we reached the destination float remainingDistance = body.RemainingDistance; if (remainingDistance <= locomotion.StoppingDistance + 1e-3f) { body.Velocity = 0; body.IsStopped = true; return; } float maxSpeed = locomotion.Speed; // Start breaking if close to destination if (locomotion.AutoBreaking) { float breakDistance = shape.Radius * 2 + locomotion.StoppingDistance; if (remainingDistance <= breakDistance) { maxSpeed = math.lerp(locomotion.Speed * 0.25f, locomotion.Speed, remainingDistance / breakDistance); } } // Force force to be maximum of unit length, but can be less float forceLength = math.length(body.Force); if (forceLength > 1) body.Force = body.Force / forceLength; // Update rotation if (shape.Type == ShapeType.Circle) { float angle = math.atan2(body.Velocity.x, body.Velocity.y); transform.Rotation = math.slerp(transform.Rotation, quaternion.RotateZ(-angle), DeltaTime * locomotion.AngularSpeed); } else if (shape.Type == ShapeType.Cylinder) { float angle = math.atan2(body.Velocity.x, body.Velocity.z); transform.Rotation = math.slerp(transform.Rotation, quaternion.RotateY(angle), DeltaTime * locomotion.AngularSpeed); } // Tank should only move, if facing direction and movement direction is within certain degrees float3 direction = math.normalizesafe(body.Velocity); float3 facing = math.mul(transform.Rotation, new float3(1, 0, 0)); if (math.dot(direction, facing) > math.radians(10)) { maxSpeed = 0; } // Interpolate velocity body.Velocity = math.lerp(body.Velocity, body.Force * maxSpeed, DeltaTime * locomotion.Acceleration); float speed = math.length(body.Velocity); // Early out if steps is going to be very small if (speed < 1e-3f) return; // Avoid over-stepping the destination if (speed * DeltaTime > remainingDistance) { transform.Position += (body.Velocity / speed) * remainingDistance; return; } // Update position transform.Position += DeltaTime * body.Velocity; } } } Agent Authoring The last thing you need to do is add your newly created steering component to the agent game object and set the Motion Type in the Agent component to Dynamic. This will ensure that the agent will use your custom steering component instead of the default one. Sample In the Scenarios sample, you can find the Tank Locomotion scene that showcases this custom locomotion behavior."
  },
  "manual/tutorials/modify-hybrid-property.html": {
    "href": "manual/tutorials/modify-hybrid-property.html",
    "title": "Modify Hybrid Property",
    "keywords": "Modify Hybrid Property This tutorial will explain how to modify agent runtime properties in a hybrid workflow (a.k.a. game objects). For simplicity, hybrid mono components will be referred to as authoring components. As the hybrid workflow internally runs entities for simulation, the runtime interaction with its properties is closely tied to entity logic. Each authoring component has getters and setters of its respective entity component. Usually, the property name starts with the Entity prefix. Speed For example, let's say you want to modify the Agent speed at runtime. To do this, you would check the AgentAuthoring component and for its property EntityLocomotion, it will contain fields related to locomotion, including the Speed. Note You might wonder why the field is not called EntityAgent. The reason is that the agent contains multiple entity components: Agent, AgentBody, and AgentLocomotion. Each of these components represents different logic it controls. This is quite a special case; other components tend to follow a similar naming convention between mono and entity components. Here is how it would look like in code. Notice that EntityLocomotion is a value type and not a reference type, meaning you will need to assign back your modified structure copy! var agent = GetComponent<AgentAuthoring>(); var locomotion = agent.EntityLocomotion; // Reads locomotion value into a copy locomotion.Speed = 10.0f; // Modifies the copy agent.EntityLocomotion = locomotion; // Writes back the locomotion value Important Accessing these entity properties will cause the main thread to wait for job threads to finish. It is recommended to minimize the usage of it. Also, do not mix these properties with other very similar ones that start with the Default prefix. These properties are tied to editor logic and are default configurations which will be used to create the underlying entity. var agent = GetComponent<AgentAuthoring>(); var locomotion = agent.DefaultLocomotion; // Reads editor locomotion value into a copy Debug.Log($\"My agent {agent} has an awake speed value of {locomotion.Speed}!\");"
  },
  "manual/tutorials/navmesh-setup.html": {
    "href": "manual/tutorials/navmesh-setup.html",
    "title": "NavMesh Setup",
    "keywords": "NavMesh Setup This tutorial will explain how to do minimal setup for NavMesh navigation. As this package reuses the baking process from Unity NavMesh, all information in terms of baking applies to this package too. Firstly, you will need to create a NavMeshSurface. This will be the walkable surface area for your agents. You can easily do this by right-clicking in Unity's Hierarchy View and selecting AI > NavMesh Surface. Now, you need to create an agent. This again can be done by right-clicking in Unity's Hierarchy View and selecting AI > Agent Cylinder/Circle. As this menu item creates a minimal setup agent, you will need a few additional components to add. Agent NavMesh Pathing will include the agent to participate in crowd flow with a specific group, and Agent Collider will enable collision with other nearby agents. Collider is needed because crowd pathing does not guarantee agents won't overlap in all cases. Finally, you need to set the destination of the agent. For how to set agent destination, you can refer to another tutorial Set Destination. Important For more details, check the AI Navigation package documentation."
  },
  "manual/tutorials/set-destination.html": {
    "href": "manual/tutorials/set-destination.html",
    "title": "Quick Start",
    "keywords": "Quick Start This package is set up to support both GameObject (using components that inherit MonoBehaviour class) and Entity (ECS package) workflows. Here is a quick start guide to get you started with each workflow. GameObjects Create a game object using the menu item \"GameObject > AI > Agent Cylinder\". Create a new script \"AgentSetDestination.cs\" and attach it to the agent game object. using UnityEngine; using ProjectDawn.Navigation.Hybrid; public class AgentSetDestination : MonoBehaviour { public Transform Target; void Start() { GetComponent<AgentAuthoring>().SetDestination(Target.position); } } Create another game object that will be used as a target for the script AgentSetDestination.cs, and assign it to the Target field. Finally, click play, and the agent should start moving towards the target. Note This minimal setup will only include the steering behavior and will not include any avoidance. Other Behaviors To add additional behaviors to the agent, you can add them as components to the agent game object. For more detailed information about each behavior, check the Game Objects section. Agent Collider: This component will enable collisions between agents. Agent Sonar Avoid: This component will enable avoidance between nearby agents using the Sonar Avoidance solution. Agent Nav Mesh: This component will enable the agent to navigate using Unity Nav Mesh. ... Entities Sub-scene Before jumping into this section, make sure you are familiar with Entities and Baking concepts and have Entities Graphics setup. Assuming you have already followed the previous section on Game Objects, you can now convert your game object agent to an entity agent. To do this, create a new sub-scene and add your Agent Cylinder and Destination game objects to it. Extend the previous script AgentSetDestination.cs with ECS component, baker, and system that will set the agent's destination using the AgentBody component. using UnityEngine; using ProjectDawn.Navigation.Hybrid; using Unity.Entities; using Unity.Mathematics; using ProjectDawn.Navigation; public class AgentSetDestination : MonoBehaviour { public Transform Target; void Start() { GetComponent<AgentAuthoring>().SetDestination(Target.position); } } // ECS component public struct SetDestination : IComponentData { public float3 Value; } // Bakes mono component into ecs component class AgentSetDestinationBaker : Baker<AgentSetDestination> { public override void Bake(AgentSetDestination authoring) { AddComponent(GetEntity(TransformUsageFlags.Dynamic), new SetDestination { Value = authoring.Target.position }); } } // Sets agents destination partial struct AgentSetDestinationSystem : ISystem { public void OnUpdate(ref SystemState systemState) { foreach (var (destination, body) in SystemAPI.Query<RefRO<SetDestination>, RefRW<AgentBody>>()) { body.ValueRW.SetDestination(destination.ValueRO.Value); } } } Finally, click play, and the agent should start moving towards the target. Entities Code This section will show you how to create an agent using code. This is useful when you want to create agents dynamically. var entity = EntityManager.CreateEntity(); // Agent tag is required for agent to work EntityManager.AddComponentData(entity, Agent.Default); // AgentBody for dynamic agents EntityManager.AddComponentData(entity, AgentBody.Default); // AgentLocomotion for moving EntityManager.AddComponentData(entity, AgentLocomotion.Default); // AgentShape for default cylinder shape EntityManager.AddComponentData(entity, AgentShape.Default); Note It is always recommended to use the sub-scene workflow when possible."
  },
  "manual/tutorials/vidoes.html": {
    "href": "manual/tutorials/vidoes.html",
    "title": "Videos",
    "keywords": "Videos Turbo Makes Games Important Sales information is outdated."
  }
}